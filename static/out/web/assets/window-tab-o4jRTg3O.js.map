{"version":3,"file":"window-tab-o4jRTg3O.js","sources":["../../../src/renderer/features/settings/components/window/discord-settings.tsx","../../../src/renderer/features/settings/components/window/password-settings.tsx","../../../src/renderer/features/settings/components/window/update-settings.tsx","../../../src/renderer/features/settings/components/window/window-settings.tsx","../../../src/renderer/features/settings/components/window/window-tab.tsx"],"sourcesContent":["import isElectron from 'is-electron';\nimport { useTranslation } from 'react-i18next';\n\nimport { NumberInput, Switch, TextInput } from '/@/renderer/components';\nimport {\n    SettingOption,\n    SettingsSection,\n} from '/@/renderer/features/settings/components/settings-section';\nimport {\n    useDiscordSetttings,\n    useGeneralSettings,\n    useSettingsStoreActions,\n} from '/@/renderer/store';\n\nexport const DiscordSettings = () => {\n    const { t } = useTranslation();\n    const settings = useDiscordSetttings();\n    const generalSettings = useGeneralSettings();\n    const { setSettings } = useSettingsStoreActions();\n\n    const discordOptions: SettingOption[] = [\n        {\n            control: (\n                <Switch\n                    checked={settings.enabled}\n                    onChange={(e) => {\n                        setSettings({\n                            discord: {\n                                ...settings,\n                                enabled: e.currentTarget.checked,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.discordRichPresence', {\n                context: 'description',\n                discord: 'Discord',\n                icon: 'icon',\n                paused: 'paused',\n                playing: 'playing',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.discordRichPresence', {\n                discord: 'Discord',\n                postProcess: 'sentenceCase',\n            }),\n        },\n        {\n            control: (\n                <TextInput\n                    defaultValue={settings.clientId}\n                    onBlur={(e) => {\n                        setSettings({\n                            discord: {\n                                ...settings,\n                                clientId: e.currentTarget.value,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.discordApplicationId', {\n                context: 'description',\n                defaultId: '1165957668758900787',\n                discord: 'Discord',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.discordApplicationId', {\n                discord: 'Discord',\n                postProcess: 'sentenceCase',\n            }),\n        },\n        {\n            control: (\n                <NumberInput\n                    onChange={(e) => {\n                        let value = e ? Number(e) : 0;\n                        if (value < 15) {\n                            value = 15;\n                        }\n\n                        setSettings({\n                            discord: {\n                                ...settings,\n                                updateInterval: value,\n                            },\n                        });\n                    }}\n                    value={settings.updateInterval}\n                />\n            ),\n            description: t('setting.discordUpdateInterval', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.discordUpdateInterval', {\n                discord: 'Discord',\n                postProcess: 'sentenceCase',\n            }),\n        },\n        {\n            control: (\n                <Switch\n                    checked={settings.enableIdle}\n                    onChange={(e) => {\n                        setSettings({\n                            discord: {\n                                ...settings,\n                                enableIdle: e.currentTarget.checked,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.discordIdleStatus', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.discordIdleStatus', {\n                postProcess: 'sentenceCase',\n            }),\n        },\n        {\n            control: (\n                <Switch\n                    checked={settings.showAsListening}\n                    onChange={(e) => {\n                        setSettings({\n                            discord: {\n                                ...settings,\n                                showAsListening: e.currentTarget.checked,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.discordListening', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.discordListening', {\n                postProcess: 'sentenceCase',\n            }),\n        },\n        {\n            control: (\n                <Switch\n                    checked={settings.showServerImage}\n                    onChange={(e) => {\n                        setSettings({\n                            discord: {\n                                ...settings,\n                                showServerImage: e.currentTarget.checked,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.discordServeImage', {\n                context: 'description',\n\n                discord: 'Discord',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.discordServeImage', {\n                discord: 'Discord',\n                postProcess: 'sentenceCase',\n            }),\n        },\n        {\n            control: (\n                <TextInput\n                    defaultValue={generalSettings.lastfmApiKey}\n                    onBlur={(e) => {\n                        setSettings({\n                            general: {\n                                ...generalSettings,\n                                lastfmApiKey: e.currentTarget.value,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.lastfmApiKey', {\n                context: 'description',\n                lastfm: 'Last.fm',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.lastfmApiKey', {\n                lastfm: 'Last.fm',\n                postProcess: 'sentenceCase',\n            }),\n        },\n    ];\n\n    return <SettingsSection options={discordOptions} />;\n};\n","import { SelectItem } from '@mantine/core';\nimport isElectron from 'is-electron';\nimport { useTranslation } from 'react-i18next';\n\nimport { Select } from '/@/renderer/components';\nimport {\n    SettingOption,\n    SettingsSection,\n} from '/@/renderer/features/settings/components/settings-section';\nimport { useGeneralSettings, useSettingsStoreActions } from '/@/renderer/store';\n\nconst localSettings = isElectron() ? window.api.localSettings : null;\n\nconst PASSWORD_SETTINGS: SelectItem[] = [\n    { label: 'libsecret', value: 'gnome_libsecret' },\n    { label: 'KDE 4 (kwallet4)', value: 'kwallet' },\n    { label: 'KDE 5 (kwallet5)', value: 'kwallet5' },\n    { label: 'KDE 6 (kwallet6)', value: 'kwallet6' },\n];\n\nexport const PasswordSettings = () => {\n    const { t } = useTranslation();\n    const settings = useGeneralSettings();\n    const { setSettings } = useSettingsStoreActions();\n\n    const updateOptions: SettingOption[] = [\n        {\n            control: (\n                <Select\n                    aria-label={t('setting.passwordStore')}\n                    clearable={false}\n                    data={PASSWORD_SETTINGS}\n                    defaultValue={settings.passwordStore ?? 'gnome_libsecret'}\n                    disabled={!isElectron()}\n                    onChange={(e) => {\n                        if (!e) return;\n                        localSettings?.set('password_store', e);\n                        setSettings({\n                            general: {\n                                ...settings,\n                                passwordStore: e,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.passwordStore', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.passwordStore', { postProcess: 'sentenceCase' }),\n        },\n    ];\n\n    return (\n        <SettingsSection\n            divider={false}\n            options={updateOptions}\n        />\n    );\n};\n","import isElectron from 'is-electron';\nimport { useTranslation } from 'react-i18next';\n\nimport { Switch } from '/@/renderer/components';\nimport {\n    SettingOption,\n    SettingsSection,\n} from '/@/renderer/features/settings/components/settings-section';\nimport { useSettingsStoreActions, useWindowSettings } from '/@/renderer/store';\n\nconst localSettings = isElectron() ? window.api.localSettings : null;\nconst utils = isElectron() ? window.api.utils : null;\n\nexport const UpdateSettings = () => {\n    const { t } = useTranslation();\n    const settings = useWindowSettings();\n    const { setSettings } = useSettingsStoreActions();\n\n    const updateOptions: SettingOption[] = [\n        {\n            control: (\n                <Switch\n                    aria-label=\"Disable automatic updates\"\n                    defaultChecked={settings.disableAutoUpdate}\n                    disabled={!isElectron()}\n                    onChange={(e) => {\n                        if (!e) return;\n                        localSettings?.set('disable_auto_updates', e.currentTarget.checked);\n                        setSettings({\n                            window: {\n                                ...settings,\n                                disableAutoUpdate: e.currentTarget.checked,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.disableAutomaticUpdates', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.disableAutomaticUpdates', { postProcess: 'sentenceCase' }),\n        },\n    ];\n\n    return (\n        <SettingsSection\n            divider={utils?.isLinux()}\n            options={updateOptions}\n        />\n    );\n};\n","import isElectron from 'is-electron';\nimport { useTranslation } from 'react-i18next';\n\nimport { Select, Switch, toast } from '/@/renderer/components';\nimport {\n    SettingOption,\n    SettingsSection,\n} from '/@/renderer/features/settings/components/settings-section';\nimport { useSettingsStoreActions, useWindowSettings } from '/@/renderer/store';\nimport { Platform } from '/@/shared/types/types';\n\nconst WINDOW_BAR_OPTIONS = [\n    { label: 'Web (hidden)', value: Platform.WEB },\n    { label: 'Windows', value: Platform.WINDOWS },\n    { label: 'macOS', value: Platform.MACOS },\n    { label: 'Native', value: Platform.LINUX },\n];\n\nconst localSettings = isElectron() ? window.api.localSettings : null;\n\nexport const WindowSettings = () => {\n    const { t } = useTranslation();\n    const settings = useWindowSettings();\n    const { setSettings } = useSettingsStoreActions();\n\n    const windowOptions: SettingOption[] = [\n        {\n            control: (\n                <Select\n                    data={WINDOW_BAR_OPTIONS}\n                    disabled={!isElectron()}\n                    onChange={(e) => {\n                        if (!e) return;\n\n                        // Platform.LINUX is used as the native frame option regardless of the actual platform\n                        const hasFrame = localSettings?.get('window_has_frame') as\n                            | boolean\n                            | undefined;\n                        const isSwitchingToFrame = !hasFrame && e === Platform.LINUX;\n                        const isSwitchingToNoFrame = hasFrame && e !== Platform.LINUX;\n\n                        const requireRestart = isSwitchingToFrame || isSwitchingToNoFrame;\n\n                        if (requireRestart) {\n                            toast.info({\n                                autoClose: false,\n                                id: 'restart-toast',\n                                message: t('common.forceRestartRequired', {\n                                    postProcess: 'sentenceCase',\n                                }),\n                                onClose: () => {\n                                    window.api.ipc!.send('app-restart');\n                                },\n                                title: t('common.restartRequired', {\n                                    postProcess: 'sentenceCase',\n                                }),\n                            });\n                        } else {\n                            toast.update({\n                                autoClose: 0,\n                                id: 'restart-toast',\n                                message: '',\n                                onClose: () => {},\n                            }); // clean old toasts\n                        }\n\n                        localSettings?.set('window_window_bar_style', e as Platform);\n                        setSettings({\n                            window: {\n                                ...settings,\n                                windowBarStyle: e as Platform,\n                            },\n                        });\n                    }}\n                    value={settings.windowBarStyle}\n                />\n            ),\n            description: t('setting.windowBarStyle', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.windowBarStyle', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <Switch\n                    aria-label=\"toggle hiding tray\"\n                    defaultChecked={settings.tray}\n                    disabled={!isElectron()}\n                    onChange={(e) => {\n                        if (!e) return;\n                        localSettings?.set('window_enable_tray', e.currentTarget.checked);\n                        if (e.currentTarget.checked) {\n                            setSettings({\n                                window: {\n                                    ...settings,\n                                    tray: true,\n                                },\n                            });\n                        } else {\n                            localSettings?.set('window_start_minimized', false);\n                            localSettings?.set('window_exit_to_tray', false);\n                            localSettings?.set('window_minimize_to_tray', false);\n\n                            setSettings({\n                                window: {\n                                    ...settings,\n                                    exitToTray: false,\n                                    minimizeToTray: false,\n                                    startMinimized: false,\n                                    tray: false,\n                                },\n                            });\n                        }\n                    }}\n                />\n            ),\n            description: t('setting.trayEnabled', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            note: t('common.restartRequired', {\n                postProcess: 'sentenceCase',\n            }),\n            title: t('setting.trayEnabled', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <Switch\n                    aria-label=\"Toggle minimize to tray\"\n                    defaultChecked={settings.tray}\n                    disabled={!isElectron()}\n                    onChange={(e) => {\n                        if (!e) return;\n                        localSettings?.set('window_minimize_to_tray', e.currentTarget.checked);\n                        setSettings({\n                            window: {\n                                ...settings,\n                                minimizeToTray: e.currentTarget.checked,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.minimizeToTray', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron() || !settings.tray,\n            title: t('setting.minimizeToTray', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <Switch\n                    aria-label=\"Toggle exit to tray\"\n                    defaultChecked={settings.exitToTray}\n                    disabled={!isElectron()}\n                    onChange={(e) => {\n                        if (!e) return;\n                        localSettings?.set('window_exit_to_tray', e.currentTarget.checked);\n                        setSettings({\n                            window: {\n                                ...settings,\n                                exitToTray: e.currentTarget.checked,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.exitToTray', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron() || !settings.tray,\n            title: t('setting.exitToTray', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <Switch\n                    aria-label=\"Toggle start in tray\"\n                    defaultChecked={settings.startMinimized}\n                    disabled={!isElectron()}\n                    onChange={(e) => {\n                        if (!e) return;\n                        localSettings?.set('window_start_minimized', e.currentTarget.checked);\n                        setSettings({\n                            window: {\n                                ...settings,\n                                startMinimized: e.currentTarget.checked,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.startMinimized', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron() || !settings.tray,\n            title: t('setting.startMinimized', { postProcess: 'sentenceCase' }),\n        },\n    ];\n\n    return <SettingsSection options={windowOptions} />;\n};\n","import { Stack } from '@mantine/core';\nimport isElectron from 'is-electron';\n\nimport { DiscordSettings } from '/@/renderer/features/settings/components/window/discord-settings';\nimport { PasswordSettings } from '/@/renderer/features/settings/components/window/password-settings';\nimport { UpdateSettings } from '/@/renderer/features/settings/components/window/update-settings';\nimport { WindowSettings } from '/@/renderer/features/settings/components/window/window-settings';\n\nconst utils = isElectron() ? window.api.utils : null;\n\nexport const WindowTab = () => {\n    return (\n        <Stack spacing=\"md\">\n            <WindowSettings />\n            <DiscordSettings />\n            <UpdateSettings />\n            {utils?.isLinux() && (\n                <>\n                    <PasswordSettings />\n                </>\n            )}\n        </Stack>\n    );\n};\n"],"names":["DiscordSettings","t","useTranslation","settings","useDiscordSetttings","generalSettings","useGeneralSettings","setSettings","useSettingsStoreActions","discordOptions","jsx","Switch","e","isElectron","TextInput","NumberInput","value","SettingsSection","localSettings","PASSWORD_SETTINGS","PasswordSettings","updateOptions","Select","utils","UpdateSettings","useWindowSettings","WINDOW_BAR_OPTIONS","Platform","WindowSettings","windowOptions","hasFrame","isSwitchingToFrame","isSwitchingToNoFrame","toast","WindowTab","jsxs","Stack","Fragment"],"mappings":"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"}