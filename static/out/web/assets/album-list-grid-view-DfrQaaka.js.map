{"version":3,"file":"album-list-grid-view-DfrQaaka.js","sources":["../../../src/renderer/features/albums/components/album-list-grid-view.tsx"],"sourcesContent":["import { QueryKey, useQueryClient } from '@tanstack/react-query';\nimport { useCallback, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport AutoSizer, { Size } from 'react-virtualized-auto-sizer';\nimport { ListOnScrollProps } from 'react-window';\n\nimport { controller } from '/@/renderer/api/controller';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { ALBUM_CARD_ROWS } from '/@/renderer/components';\nimport {\n    VirtualGridAutoSizerContainer,\n    VirtualInfiniteGrid,\n} from '/@/renderer/components/virtual-grid';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { useHandleFavorite } from '/@/renderer/features/shared/hooks/use-handle-favorite';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer, useListStoreActions, useListStoreByKey } from '/@/renderer/store';\nimport {\n    Album,\n    AlbumListQuery,\n    AlbumListResponse,\n    AlbumListSort,\n    LibraryItem,\n} from '/@/shared/types/domain-types';\nimport { CardRow, ListDisplayType } from '/@/shared/types/types';\n\nexport const AlbumListGridView = ({ gridRef, itemCount }: any) => {\n    const queryClient = useQueryClient();\n    const server = useCurrentServer();\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const { customFilters, id, pageKey } = useListContext();\n    const { display, filter, grid } = useListStoreByKey<AlbumListQuery>({ key: pageKey });\n    const { setGrid } = useListStoreActions();\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const scrollOffset = searchParams.get('scrollOffset');\n    const initialScrollOffset = Number(id ? scrollOffset : grid?.scrollOffset) || 0;\n\n    const handleFavorite = useHandleFavorite({ gridRef, server });\n\n    const cardRows = useMemo(() => {\n        const rows: CardRow<Album>[] = [ALBUM_CARD_ROWS.name];\n\n        switch (filter.sortBy) {\n            case AlbumListSort.ALBUM_ARTIST:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.releaseYear);\n                break;\n            case AlbumListSort.ARTIST:\n                rows.push(ALBUM_CARD_ROWS.artists);\n                rows.push(ALBUM_CARD_ROWS.releaseYear);\n                break;\n            case AlbumListSort.COMMUNITY_RATING:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                break;\n            case AlbumListSort.DURATION:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.duration);\n                break;\n            case AlbumListSort.FAVORITED:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.releaseYear);\n                break;\n            case AlbumListSort.NAME:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.releaseYear);\n                break;\n            case AlbumListSort.PLAY_COUNT:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.playCount);\n                break;\n            case AlbumListSort.RANDOM:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.releaseYear);\n                break;\n            case AlbumListSort.RATING:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.rating);\n                break;\n            case AlbumListSort.RECENTLY_ADDED:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.createdAt);\n                break;\n            case AlbumListSort.RECENTLY_PLAYED:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.lastPlayedAt);\n                break;\n            case AlbumListSort.SONG_COUNT:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.songCount);\n                break;\n            case AlbumListSort.YEAR:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.releaseYear);\n                break;\n            case AlbumListSort.RELEASE_DATE:\n                rows.push(ALBUM_CARD_ROWS.albumArtists);\n                rows.push(ALBUM_CARD_ROWS.releaseDate);\n        }\n\n        return rows;\n    }, [filter.sortBy]);\n\n    const handleGridScroll = useCallback(\n        (e: ListOnScrollProps) => {\n            if (id) {\n                setSearchParams(\n                    (params) => {\n                        params.set('scrollOffset', String(e.scrollOffset));\n                        return params;\n                    },\n                    { replace: true },\n                );\n            } else {\n                setGrid({ data: { scrollOffset: e.scrollOffset }, key: pageKey });\n            }\n        },\n        [id, pageKey, setGrid, setSearchParams],\n    );\n\n    const fetchInitialData = useCallback(() => {\n        const query: AlbumListQuery = {\n            ...filter,\n            ...customFilters,\n        };\n\n        const queryKey = queryKeys.albums.list(server?.id || '', query, id);\n\n        const queriesFromCache: [QueryKey, AlbumListResponse][] = queryClient.getQueriesData({\n            exact: false,\n            fetchStatus: 'idle',\n            queryKey,\n            stale: false,\n        });\n\n        const itemData: Album[] = [];\n\n        for (const [, data] of queriesFromCache) {\n            const { items, startIndex } = data || {};\n\n            if (items && items.length !== 1 && startIndex !== undefined) {\n                let itemIndex = 0;\n                for (\n                    let rowIndex = startIndex;\n                    rowIndex < startIndex + items.length;\n                    rowIndex += 1\n                ) {\n                    itemData[rowIndex] = items[itemIndex];\n                    itemIndex += 1;\n                }\n            }\n        }\n\n        return itemData;\n    }, [customFilters, filter, id, queryClient, server?.id]);\n\n    const fetch = useCallback(\n        async ({ skip, take }: { skip: number; take: number }) => {\n            if (!server) {\n                return [];\n            }\n\n            const query: AlbumListQuery = {\n                limit: take,\n                ...filter,\n                ...customFilters,\n                startIndex: skip,\n            };\n\n            const queryKey = queryKeys.albums.list(server?.id || '', query, id);\n\n            const albums = await queryClient.fetchQuery(queryKey, async ({ signal }) =>\n                controller.getAlbumList({\n                    apiClientProps: {\n                        server,\n                        signal,\n                    },\n                    query,\n                }),\n            );\n\n            return albums;\n        },\n        [customFilters, filter, id, queryClient, server],\n    );\n\n    return (\n        <VirtualGridAutoSizerContainer>\n            <AutoSizer>\n                {({ height, width }: Size) => (\n                    <VirtualInfiniteGrid\n                        cardRows={cardRows}\n                        display={display || ListDisplayType.CARD}\n                        fetchFn={fetch}\n                        fetchInitialData={fetchInitialData}\n                        handleFavorite={handleFavorite}\n                        handlePlayQueueAdd={handlePlayQueueAdd}\n                        height={height}\n                        initialScrollOffset={initialScrollOffset}\n                        itemCount={itemCount || 0}\n                        itemGap={grid?.itemGap ?? 10}\n                        itemSize={grid?.itemSize || 200}\n                        itemType={LibraryItem.ALBUM}\n                        key={`album-list-${server?.id}-${display}`}\n                        loading={itemCount === undefined || itemCount === null}\n                        minimumBatchSize={40}\n                        onScroll={handleGridScroll}\n                        ref={gridRef}\n                        route={{\n                            route: AppRoute.LIBRARY_ALBUMS_DETAIL,\n                            slugs: [{ idProperty: 'id', slugProperty: 'albumId' }],\n                        }}\n                        width={width}\n                    />\n                )}\n            </AutoSizer>\n        </VirtualGridAutoSizerContainer>\n    );\n};\n"],"names":["AlbumListGridView","gridRef","itemCount","queryClient","useQueryClient","server","useCurrentServer","handlePlayQueueAdd","usePlayQueueAdd","customFilters","id","pageKey","useListContext","display","filter","grid","useListStoreByKey","setGrid","useListStoreActions","searchParams","setSearchParams","useSearchParams","scrollOffset","initialScrollOffset","handleFavorite","useHandleFavorite","cardRows","useMemo","rows","ALBUM_CARD_ROWS","AlbumListSort","handleGridScroll","useCallback","e","params","fetchInitialData","query","queryKey","queryKeys","queriesFromCache","itemData","data","items","startIndex","itemIndex","rowIndex","fetch","skip","take","signal","controller","jsx","VirtualGridAutoSizerContainer","AutoSizer","height","width","VirtualInfiniteGrid","ListDisplayType","LibraryItem","AppRoute"],"mappings":"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"}