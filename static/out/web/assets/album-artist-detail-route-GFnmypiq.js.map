{"version":3,"file":"album-artist-detail-route-GFnmypiq.js","sources":["../../../src/renderer/features/artists/components/album-artist-detail-content.tsx","../../../src/renderer/features/artists/components/album-artist-detail-header.tsx","../../../src/renderer/features/artists/routes/album-artist-detail-route.tsx"],"sourcesContent":["import { ColDef, RowDoubleClickedEvent } from '@ag-grid-community/core';\nimport { Box, Grid, Group, Stack } from '@mantine/core';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FaLastfmSquare } from 'react-icons/fa';\nimport { RiHeartFill, RiHeartLine, RiMoreFill } from 'react-icons/ri';\nimport { SiMusicbrainz } from 'react-icons/si';\nimport { generatePath, useParams } from 'react-router';\nimport { createSearchParams, Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { Button, Spoiler, TextTitle } from '/@/renderer/components';\nimport { MemoizedSwiperGridCarousel } from '/@/renderer/components/grid-carousel';\nimport { getColumnDefs, VirtualTable } from '/@/renderer/components/virtual-table';\nimport { useAlbumList } from '/@/renderer/features/albums/queries/album-list-query';\nimport { useAlbumArtistDetail } from '/@/renderer/features/artists/queries/album-artist-detail-query';\nimport { useTopSongsList } from '/@/renderer/features/artists/queries/top-songs-list-query';\nimport {\n    useHandleGeneralContextMenu,\n    useHandleTableContextMenu,\n} from '/@/renderer/features/context-menu';\nimport {\n    ARTIST_CONTEXT_MENU_ITEMS,\n    SONG_CONTEXT_MENU_ITEMS,\n} from '/@/renderer/features/context-menu/context-menu-items';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { PlayButton, useCreateFavorite, useDeleteFavorite } from '/@/renderer/features/shared';\nimport { LibraryBackgroundOverlay } from '/@/renderer/features/shared/components/library-background-overlay';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useGenreRoute } from '/@/renderer/hooks/use-genre-route';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { ArtistItem, useCurrentServer } from '/@/renderer/store';\nimport { useGeneralSettings, usePlayButtonBehavior } from '/@/renderer/store/settings.store';\nimport { sanitize } from '/@/renderer/utils/sanitize';\nimport {\n    Album,\n    AlbumArtist,\n    AlbumListSort,\n    LibraryItem,\n    QueueSong,\n    ServerType,\n    SortOrder,\n} from '/@/shared/types/domain-types';\nimport { CardRow, Play, TableColumn } from '/@/shared/types/types';\n\nconst ContentContainer = styled.div`\n    position: relative;\n    z-index: 0;\n`;\n\nconst DetailContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    padding: 1rem 2rem 5rem;\n    overflow: hidden;\n\n    .ag-theme-alpine-dark {\n        --ag-header-background-color: rgb(0 0 0 / 0%) !important;\n    }\n`;\n\ninterface AlbumArtistDetailContentProps {\n    background?: string;\n}\n\nexport const AlbumArtistDetailContent = ({ background }: AlbumArtistDetailContentProps) => {\n    const { t } = useTranslation();\n    const { artistItems, externalLinks, lastFM, musicBrainz } = useGeneralSettings();\n    const { albumArtistId, artistId } = useParams() as {\n        albumArtistId?: string;\n        artistId?: string;\n    };\n    const routeId = (artistId || albumArtistId) as string;\n    const cq = useContainerQuery();\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const server = useCurrentServer();\n    const genrePath = useGenreRoute();\n\n    const [enabledItem, itemOrder] = useMemo(() => {\n        const enabled: { [key in ArtistItem]?: boolean } = {};\n        const order: { [key in ArtistItem]?: number } = {};\n\n        for (const [idx, item] of artistItems.entries()) {\n            enabled[item.id] = !item.disabled;\n            order[item.id] = idx + 1;\n        }\n\n        return [enabled, order];\n    }, [artistItems]);\n\n    const detailQuery = useAlbumArtistDetail({\n        query: { id: routeId },\n        serverId: server?.id,\n    });\n\n    const artistDiscographyLink = `${generatePath(\n        AppRoute.LIBRARY_ALBUM_ARTISTS_DETAIL_DISCOGRAPHY,\n        {\n            albumArtistId: routeId,\n        },\n    )}?${createSearchParams({\n        artistId: routeId,\n        artistName: detailQuery?.data?.name || '',\n    })}`;\n\n    const artistSongsLink = `${generatePath(AppRoute.LIBRARY_ALBUM_ARTISTS_DETAIL_SONGS, {\n        albumArtistId: routeId,\n    })}?${createSearchParams({\n        artistId: routeId,\n        artistName: detailQuery?.data?.name || '',\n    })}`;\n\n    const recentAlbumsQuery = useAlbumList({\n        options: {\n            enabled: enabledItem.recentAlbums,\n        },\n        query: {\n            artistIds: [routeId],\n            limit: 15,\n            sortBy: AlbumListSort.RELEASE_DATE,\n            sortOrder: SortOrder.DESC,\n            startIndex: 0,\n        },\n        serverId: server?.id,\n    });\n\n    const compilationAlbumsQuery = useAlbumList({\n        options: {\n            enabled: enabledItem.compilations && server?.type !== ServerType.SUBSONIC,\n        },\n        query: {\n            artistIds: [routeId],\n            compilation: true,\n            limit: 15,\n            sortBy: AlbumListSort.RELEASE_DATE,\n            sortOrder: SortOrder.DESC,\n            startIndex: 0,\n        },\n        serverId: server?.id,\n    });\n\n    const topSongsQuery = useTopSongsList({\n        options: {\n            enabled: !!detailQuery?.data?.name && enabledItem.topSongs,\n        },\n        query: {\n            artist: detailQuery?.data?.name || '',\n            artistId: routeId,\n        },\n        serverId: server?.id,\n    });\n\n    const topSongsColumnDefs: ColDef[] = useMemo(\n        () =>\n            getColumnDefs([\n                { column: TableColumn.ROW_INDEX, width: 0 },\n                { column: TableColumn.TITLE_COMBINED, width: 0 },\n                { column: TableColumn.DURATION, width: 0 },\n                { column: TableColumn.ALBUM, width: 0 },\n                { column: TableColumn.YEAR, width: 0 },\n                { column: TableColumn.PLAY_COUNT, width: 0 },\n                { column: TableColumn.USER_FAVORITE, width: 0 },\n            ]),\n        [],\n    );\n\n    const cardRows: Record<string, CardRow<Album>[] | CardRow<AlbumArtist>[]> = {\n        album: [\n            {\n                property: 'name',\n                route: {\n                    route: AppRoute.LIBRARY_ALBUMS_DETAIL,\n                    slugs: [{ idProperty: 'id', slugProperty: 'albumId' }],\n                },\n            },\n            {\n                arrayProperty: 'name',\n                property: 'albumArtists',\n                route: {\n                    route: AppRoute.LIBRARY_ALBUM_ARTISTS_DETAIL,\n                    slugs: [{ idProperty: 'id', slugProperty: 'albumArtistId' }],\n                },\n            },\n        ],\n        albumArtist: [\n            {\n                property: 'name',\n                route: {\n                    route: AppRoute.LIBRARY_ALBUM_ARTISTS_DETAIL,\n                    slugs: [{ idProperty: 'id', slugProperty: 'albumArtistId' }],\n                },\n            },\n        ],\n    };\n\n    const cardRoutes = {\n        album: {\n            route: AppRoute.LIBRARY_ALBUMS_DETAIL,\n            slugs: [{ idProperty: 'id', slugProperty: 'albumId' }],\n        },\n        albumArtist: {\n            route: AppRoute.LIBRARY_ALBUM_ARTISTS_DETAIL,\n            slugs: [{ idProperty: 'id', slugProperty: 'albumArtistId' }],\n        },\n    };\n\n    const carousels = useMemo(() => {\n        return [\n            {\n                data: recentAlbumsQuery?.data?.items,\n                isHidden: !recentAlbumsQuery?.data?.items?.length || !enabledItem.recentAlbums,\n                itemType: LibraryItem.ALBUM,\n                loading: recentAlbumsQuery?.isLoading || recentAlbumsQuery.isFetching,\n                order: itemOrder.recentAlbums,\n                title: (\n                    <Group align=\"flex-end\">\n                        <TextTitle\n                            order={2}\n                            weight={700}\n                        >\n                            {t('page.albumArtistDetail.recentReleases', {\n                                postProcess: 'sentenceCase',\n                            })}\n                        </TextTitle>\n                        <Button\n                            compact\n                            component={Link}\n                            to={artistDiscographyLink}\n                            uppercase\n                            variant=\"subtle\"\n                        >\n                            {t('page.albumArtistDetail.viewDiscography')}\n                        </Button>\n                    </Group>\n                ),\n                uniqueId: 'recentReleases',\n            },\n            {\n                data: compilationAlbumsQuery?.data?.items,\n                isHidden:\n                    !compilationAlbumsQuery?.data?.items?.length ||\n                    !enabledItem.compilations ||\n                    server?.type === ServerType.SUBSONIC,\n                itemType: LibraryItem.ALBUM,\n                loading: compilationAlbumsQuery?.isLoading || compilationAlbumsQuery.isFetching,\n                order: itemOrder.compilations,\n                title: (\n                    <TextTitle\n                        order={2}\n                        weight={700}\n                    >\n                        {t('page.albumArtistDetail.appearsOn', { postProcess: 'sentenceCase' })}\n                    </TextTitle>\n                ),\n                uniqueId: 'compilationAlbums',\n            },\n            {\n                data: detailQuery?.data?.similarArtists || [],\n                isHidden: !detailQuery?.data?.similarArtists || !enabledItem.similarArtists,\n                itemType: LibraryItem.ALBUM_ARTIST,\n                order: itemOrder.similarArtists,\n                title: (\n                    <TextTitle\n                        order={2}\n                        weight={700}\n                    >\n                        {t('page.albumArtistDetail.relatedArtists', {\n                            postProcess: 'sentenceCase',\n                        })}\n                    </TextTitle>\n                ),\n                uniqueId: 'similarArtists',\n            },\n        ];\n    }, [\n        artistDiscographyLink,\n        compilationAlbumsQuery?.data?.items,\n        compilationAlbumsQuery.isFetching,\n        compilationAlbumsQuery?.isLoading,\n        detailQuery?.data?.similarArtists,\n        enabledItem.compilations,\n        enabledItem.recentAlbums,\n        enabledItem.similarArtists,\n        itemOrder.compilations,\n        itemOrder.recentAlbums,\n        itemOrder.similarArtists,\n        recentAlbumsQuery?.data?.items,\n        recentAlbumsQuery.isFetching,\n        recentAlbumsQuery?.isLoading,\n        server?.type,\n        t,\n    ]);\n\n    const playButtonBehavior = usePlayButtonBehavior();\n\n    const handlePlay = async (playType?: Play) => {\n        handlePlayQueueAdd?.({\n            byItemType: {\n                id: [routeId],\n                type: albumArtistId ? LibraryItem.ALBUM_ARTIST : LibraryItem.ARTIST,\n            },\n            playType: playType || playButtonBehavior,\n        });\n    };\n\n    const handleContextMenu = useHandleTableContextMenu(LibraryItem.SONG, SONG_CONTEXT_MENU_ITEMS);\n\n    const handleRowDoubleClick = (e: RowDoubleClickedEvent<QueueSong>) => {\n        if (!e.data || !topSongsQuery?.data) return;\n\n        handlePlayQueueAdd?.({\n            byData: topSongsQuery?.data?.items || [],\n            initialSongId: e.data.id,\n            playType: playButtonBehavior,\n        });\n    };\n\n    const createFavoriteMutation = useCreateFavorite({});\n    const deleteFavoriteMutation = useDeleteFavorite({});\n\n    const handleFavorite = () => {\n        if (!detailQuery?.data) return;\n\n        if (detailQuery.data.userFavorite) {\n            deleteFavoriteMutation.mutate({\n                query: {\n                    id: [detailQuery.data.id],\n                    type: LibraryItem.ALBUM_ARTIST,\n                },\n                serverId: detailQuery.data.serverId,\n            });\n        } else {\n            createFavoriteMutation.mutate({\n                query: {\n                    id: [detailQuery.data.id],\n                    type: LibraryItem.ALBUM_ARTIST,\n                },\n                serverId: detailQuery.data.serverId,\n            });\n        }\n    };\n\n    const albumCount = detailQuery?.data?.albumCount;\n    const artistContextItems =\n        (albumCount ?? 1) > 0\n            ? ARTIST_CONTEXT_MENU_ITEMS\n            : ARTIST_CONTEXT_MENU_ITEMS.filter((item) => !item.id.toLowerCase().includes('play'));\n\n    const handleGeneralContextMenu = useHandleGeneralContextMenu(\n        LibraryItem.ALBUM_ARTIST,\n        artistContextItems,\n    );\n\n    const topSongs = topSongsQuery?.data?.items?.slice(0, 10);\n\n    const biography = useMemo(() => {\n        const bio = detailQuery?.data?.biography;\n\n        if (!bio || !enabledItem.biography) return null;\n        return sanitize(bio);\n    }, [detailQuery?.data?.biography, enabledItem.biography]);\n\n    const showTopSongs = topSongsQuery?.data?.items?.length && enabledItem.topSongs;\n    const showGenres = detailQuery?.data?.genres ? detailQuery?.data?.genres.length !== 0 : false;\n    const mbzId = detailQuery?.data?.mbz;\n\n    const isLoading =\n        detailQuery?.isLoading ||\n        (server?.type === ServerType.NAVIDROME && enabledItem.topSongs && topSongsQuery?.isLoading);\n\n    if (isLoading) return <ContentContainer ref={cq.ref} />;\n\n    return (\n        <ContentContainer ref={cq.ref}>\n            <LibraryBackgroundOverlay $backgroundColor={background} />\n            <DetailContainer>\n                <Group spacing=\"md\">\n                    <PlayButton\n                        disabled={albumCount === 0}\n                        onClick={() => handlePlay(playButtonBehavior)}\n                    />\n                    <Group spacing=\"xs\">\n                        <Button\n                            compact\n                            loading={\n                                createFavoriteMutation.isLoading || deleteFavoriteMutation.isLoading\n                            }\n                            onClick={handleFavorite}\n                            variant=\"subtle\"\n                        >\n                            {detailQuery?.data?.userFavorite ? (\n                                <RiHeartFill\n                                    color=\"red\"\n                                    size={20}\n                                />\n                            ) : (\n                                <RiHeartLine size={20} />\n                            )}\n                        </Button>\n                        <Button\n                            compact\n                            onClick={(e) => {\n                                if (!detailQuery?.data) return;\n                                handleGeneralContextMenu(e, [detailQuery.data!]);\n                            }}\n                            variant=\"subtle\"\n                        >\n                            <RiMoreFill size={20} />\n                        </Button>\n                    </Group>\n                </Group>\n                <Group spacing=\"md\">\n                    <Button\n                        compact\n                        component={Link}\n                        to={artistDiscographyLink}\n                        uppercase\n                        variant=\"subtle\"\n                    >\n                        {t('page.albumArtistDetail.viewDiscography')}\n                    </Button>\n                    <Button\n                        compact\n                        component={Link}\n                        to={artistSongsLink}\n                        uppercase\n                        variant=\"subtle\"\n                    >\n                        {t('page.albumArtistDetail.viewAllTracks')}\n                    </Button>\n                </Group>\n                {showGenres ? (\n                    <Box component=\"section\">\n                        <Group spacing=\"sm\">\n                            {detailQuery?.data?.genres?.map((genre) => (\n                                <Button\n                                    compact\n                                    component={Link}\n                                    key={`genre-${genre.id}`}\n                                    radius=\"md\"\n                                    size=\"md\"\n                                    to={generatePath(genrePath, {\n                                        genreId: genre.id,\n                                    })}\n                                    variant=\"outline\"\n                                >\n                                    {genre.name}\n                                </Button>\n                            ))}\n                        </Group>\n                    </Box>\n                ) : null}\n                {externalLinks && (lastFM || musicBrainz) ? (\n                    <Box component=\"section\">\n                        <Group spacing=\"sm\">\n                            {lastFM && (\n                                <Button\n                                    compact\n                                    component=\"a\"\n                                    href={`https://www.last.fm/music/${encodeURIComponent(\n                                        detailQuery?.data?.name || '',\n                                    )}`}\n                                    radius=\"md\"\n                                    rel=\"noopener noreferrer\"\n                                    size=\"md\"\n                                    target=\"_blank\"\n                                    tooltip={{\n                                        label: t('action.openIn.lastfm'),\n                                    }}\n                                    variant=\"subtle\"\n                                >\n                                    <FaLastfmSquare size={25} />\n                                </Button>\n                            )}\n                            {musicBrainz && mbzId ? (\n                                <Button\n                                    compact\n                                    component=\"a\"\n                                    href={`https://musicbrainz.org/artist/${mbzId}`}\n                                    radius=\"md\"\n                                    rel=\"noopener noreferrer\"\n                                    size=\"md\"\n                                    target=\"_blank\"\n                                    tooltip={{\n                                        label: t('action.openIn.musicbrainz'),\n                                    }}\n                                    variant=\"subtle\"\n                                >\n                                    <SiMusicbrainz size={25} />\n                                </Button>\n                            ) : null}\n                        </Group>\n                    </Box>\n                ) : null}\n                <Grid>\n                    {biography ? (\n                        <Grid.Col\n                            order={itemOrder.biography}\n                            span={12}\n                        >\n                            <Box\n                                component=\"section\"\n                                maw=\"1280px\"\n                            >\n                                <TextTitle\n                                    order={2}\n                                    weight={700}\n                                >\n                                    {t('page.albumArtistDetail.about', {\n                                        artist: detailQuery?.data?.name,\n                                    })}\n                                </TextTitle>\n                                <Spoiler dangerouslySetInnerHTML={{ __html: biography }} />\n                            </Box>\n                        </Grid.Col>\n                    ) : null}\n                    {showTopSongs ? (\n                        <Grid.Col\n                            order={itemOrder.topSongs}\n                            span={12}\n                        >\n                            <Box component=\"section\">\n                                <Group\n                                    noWrap\n                                    position=\"apart\"\n                                >\n                                    <Group\n                                        align=\"flex-end\"\n                                        noWrap\n                                    >\n                                        <TextTitle\n                                            order={2}\n                                            weight={700}\n                                        >\n                                            {t('page.albumArtistDetail.topSongs', {\n                                                postProcess: 'sentenceCase',\n                                            })}\n                                        </TextTitle>\n                                        <Button\n                                            compact\n                                            component={Link}\n                                            to={generatePath(\n                                                AppRoute.LIBRARY_ALBUM_ARTISTS_DETAIL_TOP_SONGS,\n                                                {\n                                                    albumArtistId: routeId,\n                                                },\n                                            )}\n                                            uppercase\n                                            variant=\"subtle\"\n                                        >\n                                            {t('page.albumArtistDetail.viewAll', {\n                                                postProcess: 'sentenceCase',\n                                            })}\n                                        </Button>\n                                    </Group>\n                                </Group>\n                                <VirtualTable\n                                    autoFitColumns\n                                    autoHeight\n                                    columnDefs={topSongsColumnDefs}\n                                    context={{\n                                        itemType: LibraryItem.SONG,\n                                    }}\n                                    deselectOnClickOutside\n                                    enableCellChangeFlash={false}\n                                    getRowId={(data) => data.data.uniqueId}\n                                    onCellContextMenu={handleContextMenu}\n                                    onRowDoubleClicked={handleRowDoubleClick}\n                                    rowData={topSongs}\n                                    rowHeight={60}\n                                    rowSelection=\"multiple\"\n                                    shouldUpdateSong\n                                    stickyHeader\n                                    suppressCellFocus\n                                    suppressHorizontalScroll\n                                    suppressLoadingOverlay\n                                    suppressRowDrag\n                                />\n                            </Box>\n                        </Grid.Col>\n                    ) : null}\n\n                    {carousels\n                        .filter((c) => !c.isHidden)\n                        .map((carousel) => (\n                            <Grid.Col\n                                key={`carousel-${carousel.uniqueId}`}\n                                order={carousel.order}\n                                span={12}\n                            >\n                                <Box component=\"section\">\n                                    <Stack spacing=\"xl\">\n                                        <MemoizedSwiperGridCarousel\n                                            cardRows={\n                                                cardRows[carousel.itemType as keyof typeof cardRows]\n                                            }\n                                            data={carousel.data}\n                                            isLoading={carousel.loading}\n                                            itemType={carousel.itemType}\n                                            route={\n                                                cardRoutes[\n                                                    carousel.itemType as keyof typeof cardRoutes\n                                                ]\n                                            }\n                                            swiperProps={{\n                                                grid: {\n                                                    rows: 2,\n                                                },\n                                            }}\n                                            title={{\n                                                label: carousel.title,\n                                            }}\n                                            uniqueId={carousel.uniqueId}\n                                        />\n                                    </Stack>\n                                </Box>\n                            </Grid.Col>\n                        ))}\n                </Grid>\n            </DetailContainer>\n        </ContentContainer>\n    );\n};\n","import { Group, Rating, Stack } from '@mantine/core';\nimport { forwardRef, Fragment, Ref } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router';\n\nimport { Text } from '/@/renderer/components';\nimport { useAlbumArtistDetail } from '/@/renderer/features/artists/queries/album-artist-detail-query';\nimport { LibraryHeader, useSetRating } from '/@/renderer/features/shared';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer } from '/@/renderer/store';\nimport { formatDurationString } from '/@/renderer/utils';\nimport { LibraryItem, ServerType } from '/@/shared/types/domain-types';\n\ninterface AlbumArtistDetailHeaderProps {\n    background: string;\n}\n\nexport const AlbumArtistDetailHeader = forwardRef(\n    ({ background }: AlbumArtistDetailHeaderProps, ref: Ref<HTMLDivElement>) => {\n        const { albumArtistId, artistId } = useParams() as {\n            albumArtistId?: string;\n            artistId?: string;\n        };\n        const routeId = (artistId || albumArtistId) as string;\n        const server = useCurrentServer();\n        const { t } = useTranslation();\n        const detailQuery = useAlbumArtistDetail({\n            query: { id: routeId },\n            serverId: server?.id,\n        });\n\n        const albumCount = detailQuery?.data?.albumCount;\n        const songCount = detailQuery?.data?.songCount;\n        const duration = detailQuery?.data?.duration;\n        const durationEnabled = duration !== null && duration !== undefined;\n\n        const metadataItems = [\n            {\n                enabled: albumCount !== null && albumCount !== undefined,\n                id: 'albumCount',\n                secondary: false,\n                value: t('entity.albumWithCount', { count: albumCount || 0 }),\n            },\n            {\n                enabled: songCount !== null && songCount !== undefined,\n                id: 'songCount',\n                secondary: false,\n                value: t('entity.trackWithCount', { count: songCount || 0 }),\n            },\n            {\n                enabled: durationEnabled,\n                id: 'duration',\n                secondary: true,\n                value: durationEnabled && formatDurationString(duration),\n            },\n        ];\n\n        const updateRatingMutation = useSetRating({});\n\n        const handleUpdateRating = (rating: number) => {\n            if (!detailQuery?.data) return;\n\n            updateRatingMutation.mutate({\n                query: {\n                    item: [detailQuery.data],\n                    rating,\n                },\n                serverId: detailQuery?.data.serverId,\n            });\n        };\n\n        const showRating = detailQuery?.data?.serverType === ServerType.NAVIDROME;\n\n        return (\n            <LibraryHeader\n                background={background}\n                imageUrl={detailQuery?.data?.imageUrl}\n                item={{ route: AppRoute.LIBRARY_ALBUM_ARTISTS, type: LibraryItem.ALBUM_ARTIST }}\n                ref={ref}\n                title={detailQuery?.data?.name || ''}\n            >\n                <Stack>\n                    <Group>\n                        {metadataItems\n                            .filter((i) => i.enabled)\n                            .map((item, index) => (\n                                <Fragment key={`item-${item.id}-${index}`}>\n                                    {index > 0 && <Text $noSelect>•</Text>}\n                                    <Text $secondary={item.secondary}>{item.value}</Text>\n                                </Fragment>\n                            ))}\n                        {showRating && (\n                            <>\n                                <Text $noSelect>•</Text>\n                                <Rating\n                                    onChange={handleUpdateRating}\n                                    readOnly={\n                                        detailQuery?.isFetching || updateRatingMutation.isLoading\n                                    }\n                                    value={detailQuery?.data?.userRating || 0}\n                                />\n                            </>\n                        )}\n                    </Group>\n                </Stack>\n            </LibraryHeader>\n        );\n    },\n);\n","import { useRef } from 'react';\nimport { useParams } from 'react-router';\n\nimport { NativeScrollArea, Spinner } from '/@/renderer/components';\nimport { AlbumArtistDetailContent } from '/@/renderer/features/artists/components/album-artist-detail-content';\nimport { AlbumArtistDetailHeader } from '/@/renderer/features/artists/components/album-artist-detail-header';\nimport { useAlbumArtistDetail } from '/@/renderer/features/artists/queries/album-artist-detail-query';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { AnimatedPage, LibraryHeaderBar } from '/@/renderer/features/shared';\nimport { useFastAverageColor } from '/@/renderer/hooks';\nimport { useCurrentServer } from '/@/renderer/store';\nimport { usePlayButtonBehavior } from '/@/renderer/store/settings.store';\nimport { LibraryItem } from '/@/shared/types/domain-types';\n\nconst AlbumArtistDetailRoute = () => {\n    const scrollAreaRef = useRef<HTMLDivElement>(null);\n    const headerRef = useRef<HTMLDivElement>(null);\n    const server = useCurrentServer();\n\n    const { albumArtistId, artistId } = useParams() as {\n        albumArtistId?: string;\n        artistId?: string;\n    };\n\n    const routeId = (artistId || albumArtistId) as string;\n\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const playButtonBehavior = usePlayButtonBehavior();\n    const detailQuery = useAlbumArtistDetail({\n        query: { id: routeId },\n        serverId: server?.id,\n    });\n    const { color: background, colorId } = useFastAverageColor({\n        id: routeId,\n        src: detailQuery.data?.imageUrl,\n        srcLoaded: !detailQuery.isLoading,\n    });\n\n    const handlePlay = () => {\n        handlePlayQueueAdd?.({\n            byItemType: {\n                id: [routeId],\n                type: LibraryItem.ALBUM_ARTIST,\n            },\n            playType: playButtonBehavior,\n        });\n    };\n\n    if (!background || colorId !== routeId) {\n        return <Spinner container />;\n    }\n\n    return (\n        <AnimatedPage key={`album-artist-detail-${routeId}`}>\n            <NativeScrollArea\n                pageHeaderProps={{\n                    backgroundColor: background,\n                    children: (\n                        <LibraryHeaderBar>\n                            <LibraryHeaderBar.PlayButton onClick={handlePlay} />\n                            <LibraryHeaderBar.Title>\n                                {detailQuery?.data?.name}\n                            </LibraryHeaderBar.Title>\n                        </LibraryHeaderBar>\n                    ),\n                    offset: 200,\n                    target: headerRef,\n                }}\n                ref={scrollAreaRef}\n            >\n                <AlbumArtistDetailHeader\n                    background={background}\n                    ref={headerRef}\n                />\n                <AlbumArtistDetailContent background={background} />\n            </NativeScrollArea>\n        </AnimatedPage>\n    );\n};\n\nexport default AlbumArtistDetailRoute;\n"],"names":["ContentContainer","styled","DetailContainer","AlbumArtistDetailContent","background","t","useTranslation","artistItems","externalLinks","lastFM","musicBrainz","useGeneralSettings","albumArtistId","artistId","useParams","routeId","cq","useContainerQuery","handlePlayQueueAdd","usePlayQueueAdd","server","useCurrentServer","genrePath","useGenreRoute","enabledItem","itemOrder","useMemo","enabled","order","idx","item","detailQuery","useAlbumArtistDetail","artistDiscographyLink","generatePath","AppRoute","createSearchParams","_a","artistSongsLink","_b","recentAlbumsQuery","useAlbumList","AlbumListSort","SortOrder","compilationAlbumsQuery","ServerType","topSongsQuery","useTopSongsList","_c","_d","topSongsColumnDefs","getColumnDefs","TableColumn","cardRows","cardRoutes","carousels","LibraryItem","jsxs","Group","jsx","TextTitle","Button","Link","_f","_e","_g","_h","playButtonBehavior","usePlayButtonBehavior","handlePlay","playType","handleContextMenu","useHandleTableContextMenu","SONG_CONTEXT_MENU_ITEMS","handleRowDoubleClick","createFavoriteMutation","useCreateFavorite","deleteFavoriteMutation","useDeleteFavorite","handleFavorite","albumCount","artistContextItems","ARTIST_CONTEXT_MENU_ITEMS","handleGeneralContextMenu","useHandleGeneralContextMenu","topSongs","_j","_i","biography","bio","sanitize","_k","showTopSongs","_m","_l","showGenres","_n","_o","mbzId","_p","LibraryBackgroundOverlay","PlayButton","_q","RiHeartFill","RiHeartLine","RiMoreFill","Box","_s","_r","genre","_t","FaLastfmSquare","SiMusicbrainz","Grid","_u","Spoiler","VirtualTable","data","c","carousel","Stack","MemoizedSwiperGridCarousel","AlbumArtistDetailHeader","forwardRef","ref","songCount","duration","durationEnabled","metadataItems","formatDurationString","updateRatingMutation","useSetRating","handleUpdateRating","rating","showRating","LibraryHeader","i","index","Fragment","Text","Rating","AlbumArtistDetailRoute","scrollAreaRef","useRef","headerRef","colorId","useFastAverageColor","Spinner","AnimatedPage","NativeScrollArea","LibraryHeaderBar"],"mappings":"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"}