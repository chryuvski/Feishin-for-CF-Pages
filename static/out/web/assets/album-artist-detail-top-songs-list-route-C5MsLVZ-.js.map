{"version":3,"file":"album-artist-detail-top-songs-list-route-C5MsLVZ-.js","sources":["../../../src/renderer/features/artists/components/album-artist-detail-top-songs-list-content.tsx","../../../src/renderer/features/artists/components/album-artist-detail-top-songs-list-header.tsx","../../../src/renderer/features/artists/routes/album-artist-detail-top-songs-list-route.tsx"],"sourcesContent":["import type { RowDoubleClickedEvent } from '@ag-grid-community/core';\nimport type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { MutableRefObject } from 'react';\n\nimport { VirtualGridAutoSizerContainer } from '/@/renderer/components/virtual-grid';\nimport { VirtualTable } from '/@/renderer/components/virtual-table';\nimport { useCurrentSongRowStyles } from '/@/renderer/components/virtual-table/hooks/use-current-song-row-styles';\nimport { useVirtualTable } from '/@/renderer/components/virtual-table/hooks/use-virtual-table';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { SONG_CONTEXT_MENU_ITEMS } from '/@/renderer/features/context-menu/context-menu-items';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { useCurrentServer } from '/@/renderer/store';\nimport { usePlayButtonBehavior } from '/@/renderer/store/settings.store';\nimport { LibraryItem, QueueSong, SongListQuery } from '/@/shared/types/domain-types';\n\ninterface AlbumArtistSongListContentProps {\n    data: QueueSong[];\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const AlbumArtistDetailTopSongsListContent = ({\n    data,\n    tableRef,\n}: AlbumArtistSongListContentProps) => {\n    const server = useCurrentServer();\n    const { id, pageKey } = useListContext();\n\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const playButtonBehavior = usePlayButtonBehavior();\n\n    const handleRowDoubleClick = (e: RowDoubleClickedEvent<QueueSong>) => {\n        if (!e.data) return;\n\n        const rowData: QueueSong[] = [];\n        e.api.forEachNode((node) => {\n            if (!node.data) return;\n            rowData.push(node.data);\n        });\n\n        handlePlayQueueAdd?.({\n            byData: rowData,\n            initialSongId: e.data.id,\n            playType: playButtonBehavior,\n        });\n    };\n\n    const customFilters: Partial<SongListQuery> = {\n        ...(id && { artistIds: [id] }),\n    };\n\n    const { rowClassRules } = useCurrentSongRowStyles({ tableRef });\n\n    const tableProps = useVirtualTable({\n        contextMenu: SONG_CONTEXT_MENU_ITEMS,\n        customFilters,\n        itemType: LibraryItem.SONG,\n        pageKey,\n        server,\n        tableRef,\n    });\n\n    return (\n        <>\n            <VirtualGridAutoSizerContainer>\n                <VirtualTable\n                    key={`table-${tableProps.rowHeight}-${server?.id}`}\n                    ref={tableRef}\n                    shouldUpdateSong\n                    {...tableProps}\n                    getRowId={(data) => data.data.uniqueId}\n                    onRowDoubleClicked={handleRowDoubleClick}\n                    rowClassRules={rowClassRules}\n                    rowData={data}\n                    rowModelType=\"clientSide\"\n                    rowSelection=\"multiple\"\n                />\n            </VirtualGridAutoSizerContainer>\n        </>\n    );\n};\n","import { useTranslation } from 'react-i18next';\nimport { RiAddBoxFill, RiAddCircleFill, RiMoreFill, RiPlayFill } from 'react-icons/ri';\n\nimport { Button, DropdownMenu, PageHeader, Paper, SpinnerIcon } from '/@/renderer/components';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { LibraryHeaderBar } from '/@/renderer/features/shared';\nimport { usePlayButtonBehavior } from '/@/renderer/store/settings.store';\nimport { QueueSong } from '/@/shared/types/domain-types';\nimport { Play } from '/@/shared/types/types';\n\ninterface AlbumArtistDetailTopSongsListHeaderProps {\n    data: QueueSong[];\n    itemCount?: number;\n    title: string;\n}\n\nexport const AlbumArtistDetailTopSongsListHeader = ({\n    data,\n    itemCount,\n    title,\n}: AlbumArtistDetailTopSongsListHeaderProps) => {\n    const { t } = useTranslation();\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const playButtonBehavior = usePlayButtonBehavior();\n\n    const handlePlay = async (playType: Play) => {\n        handlePlayQueueAdd?.({\n            byData: data,\n            playType,\n        });\n    };\n\n    return (\n        <PageHeader p=\"1rem\">\n            <LibraryHeaderBar>\n                <LibraryHeaderBar.PlayButton onClick={() => handlePlay(playButtonBehavior)} />\n                <LibraryHeaderBar.Title>\n                    {t('page.albumArtistDetail.topSongsFrom', { title })}\n                </LibraryHeaderBar.Title>\n                <Paper\n                    fw=\"600\"\n                    px=\"1rem\"\n                    py=\"0.3rem\"\n                    radius=\"sm\"\n                >\n                    {itemCount === null || itemCount === undefined ? <SpinnerIcon /> : itemCount}\n                </Paper>\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            fw=\"600\"\n                            variant=\"subtle\"\n                        >\n                            <RiMoreFill size={15} />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Item\n                            icon={<RiPlayFill />}\n                            onClick={() => handlePlay(Play.NOW)}\n                        >\n                            {t('player.play', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            icon={<RiAddBoxFill />}\n                            onClick={() => handlePlay(Play.LAST)}\n                        >\n                            {t('player.addLast', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            icon={<RiAddCircleFill />}\n                            onClick={() => handlePlay(Play.NEXT)}\n                        >\n                            {t('player.addNext', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </LibraryHeaderBar>\n        </PageHeader>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { useMemo, useRef } from 'react';\nimport { useParams } from 'react-router';\n\nimport { ListContext } from '/@/renderer/context/list-context';\nimport { AlbumArtistDetailTopSongsListContent } from '/@/renderer/features/artists/components/album-artist-detail-top-songs-list-content';\nimport { AlbumArtistDetailTopSongsListHeader } from '/@/renderer/features/artists/components/album-artist-detail-top-songs-list-header';\nimport { useAlbumArtistDetail } from '/@/renderer/features/artists/queries/album-artist-detail-query';\nimport { useTopSongsList } from '/@/renderer/features/artists/queries/top-songs-list-query';\nimport { AnimatedPage } from '/@/renderer/features/shared';\nimport { useCurrentServer } from '/@/renderer/store/auth.store';\nimport { LibraryItem } from '/@/shared/types/domain-types';\n\nconst AlbumArtistDetailTopSongsListRoute = () => {\n    const tableRef = useRef<AgGridReactType | null>(null);\n    const { albumArtistId, artistId } = useParams() as {\n        albumArtistId?: string;\n        artistId?: string;\n    };\n    const routeId = (artistId || albumArtistId) as string;\n    const server = useCurrentServer();\n    const pageKey = LibraryItem.SONG;\n\n    const detailQuery = useAlbumArtistDetail({\n        query: { id: routeId },\n        serverId: server?.id,\n    });\n\n    const topSongsQuery = useTopSongsList({\n        options: { enabled: !!detailQuery?.data?.name },\n        query: { artist: detailQuery?.data?.name || '', artistId: routeId },\n        serverId: server?.id,\n    });\n\n    const itemCount = topSongsQuery?.data?.items?.length || 0;\n\n    const providerValue = useMemo(() => {\n        return {\n            id: routeId,\n            pageKey,\n        };\n    }, [routeId, pageKey]);\n\n    return (\n        <AnimatedPage>\n            <ListContext.Provider value={providerValue}>\n                <AlbumArtistDetailTopSongsListHeader\n                    data={topSongsQuery?.data?.items || []}\n                    itemCount={itemCount}\n                    title={detailQuery?.data?.name || 'Unknown'}\n                />\n                <AlbumArtistDetailTopSongsListContent\n                    data={topSongsQuery?.data?.items || []}\n                    tableRef={tableRef}\n                />\n            </ListContext.Provider>\n        </AnimatedPage>\n    );\n};\n\nexport default AlbumArtistDetailTopSongsListRoute;\n"],"names":["AlbumArtistDetailTopSongsListContent","data","tableRef","server","useCurrentServer","id","pageKey","useListContext","handlePlayQueueAdd","usePlayQueueAdd","playButtonBehavior","usePlayButtonBehavior","handleRowDoubleClick","e","rowData","node","customFilters","rowClassRules","useCurrentSongRowStyles","tableProps","useVirtualTable","SONG_CONTEXT_MENU_ITEMS","LibraryItem","jsx","Fragment","VirtualGridAutoSizerContainer","VirtualTable","AlbumArtistDetailTopSongsListHeader","itemCount","title","t","useTranslation","handlePlay","playType","PageHeader","LibraryHeaderBar","Paper","SpinnerIcon","jsxs","DropdownMenu","Button","RiMoreFill","RiPlayFill","Play","RiAddBoxFill","RiAddCircleFill","AlbumArtistDetailTopSongsListRoute","useRef","albumArtistId","artistId","useParams","routeId","detailQuery","useAlbumArtistDetail","topSongsQuery","useTopSongsList","_a","_b","_d","_c","providerValue","useMemo","AnimatedPage","ListContext","_e","_f","_g"],"mappings":"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"}