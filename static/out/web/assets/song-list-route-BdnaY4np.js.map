{"version":3,"mappings":"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","names":["SongListTableView","lazy","module","SongListGridView","SongListContent","gridRef","itemCount","tableRef","pageKey","useListContext","display","useListStoreByKey","isGrid","ListDisplayType","jsx","Suspense","Spinner","JellyfinSongFilters","customFilters","onFilterChange","serverId","t","useTranslation","setFilter","useListStoreActions","filter","useListFilterByKey","isGenrePage","genreListQuery","useGenreList","GenreListSort","SortOrder","genreList","useMemo","genre","tagsQuery","useTagList","LibraryItem","selectedGenres","_c","_b","_a","selectedTags","_d","toggleFilters","e","updatedFilters","handleMinYearFilter","debounce","handleMaxYearFilter","handleGenresFilter","handleTagFilter","jsxs","Stack","Group","Text","Switch","Divider","NumberInput","MultiSelectWithInvalidData","_f","_e","NavidromeSongFilters","tag","handleYearFilter","SelectWithInvalidData","value","SubsonicSongFilters","Select","FILTERS","i18n","SongListSort","SongListHeaderFilters","server","useCurrentServer","handlePlay","grid","table","setDisplayType","setGrid","setTable","setTablePagination","handleRefreshGrid","handleRefreshTable","useListFilterRefresh","cq","useContainerQuery","musicFoldersQuery","useMusicFolders","sortByLabel","f","handleSetSortBy","useCallback","sortOrder","handleSetMusicFolder","handleToggleSortOrder","newSortOrder","handleSetViewType","handleTableColumns","values","existingColumns","newColumn","removed","column","newColumns","handleAutoFitColumns","handleItemSize","handleItemGap","handleRefresh","queryClient","queryKeys","handleOpenFiltersModal","FilterComponent","ServerType","openModal","isFilterApplied","isNavidromeFilterApplied","isJellyfinFilterApplied","isGenericFilterApplied","isFolderFilterApplied","Flex","DropdownMenu","Button","Fragment","OrderToggleButton","RiFolder2Fill","folder","RiFilterFill","RiRefreshLine","RiMoreFill","RiPlayFill","Play","RiShuffleFill","RiAddBoxFill","RiAddCircleFill","RiSettings3Fill","Slider","MultiSelect","SONG_TABLE_COLUMNS","SongListHeader","genreId","title","genreRef","useRef","refresh","search","useDisplayRefresh","handleSearch","filterWithCustom","useEffect","playButtonBehavior","usePlayButtonBehavior","PageHeader","LibraryHeaderBar","SearchInput","FilterBar","useSongListCount","args","options","query","getServerById","useQuery","signal","api","TrackListRoute","searchParams","useSearchParams","albumArtistId","useParams","isEmpty","handlePlayQueueAdd","usePlayQueueAdd","songListFilter","genreTitle","g","itemCountCheck","initialSongId","playType","providerValue","artist","sentenceCase","titleCase","AnimatedPage","ListContext"],"ignoreList":[],"sources":["../../../src/renderer/features/songs/components/song-list-content.tsx","../../../src/renderer/features/songs/components/jellyfin-song-filters.tsx","../../../src/renderer/features/songs/components/navidrome-song-filters.tsx","../../../src/renderer/features/songs/components/subsonic-song-filter.tsx","../../../src/renderer/features/songs/components/song-list-header-filters.tsx","../../../src/renderer/features/songs/components/song-list-header.tsx","../../../src/renderer/features/songs/queries/song-list-count-query.ts","../../../src/renderer/features/songs/routes/song-list-route.tsx"],"sourcesContent":["import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { lazy, MutableRefObject, Suspense } from 'react';\n\nimport { Spinner } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { useListStoreByKey } from '/@/renderer/store';\nimport { ListDisplayType } from '/@/shared/types/types';\n\nconst SongListTableView = lazy(() =>\n    import('/@/renderer/features/songs/components/song-list-table-view').then((module) => ({\n        default: module.SongListTableView,\n    })),\n);\n\nconst SongListGridView = lazy(() =>\n    import('/@/renderer/features/songs/components/song-list-grid-view').then((module) => ({\n        default: module.SongListGridView,\n    })),\n);\n\ninterface SongListContentProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const SongListContent = ({ gridRef, itemCount, tableRef }: SongListContentProps) => {\n    const { pageKey } = useListContext();\n    const { display } = useListStoreByKey({ key: pageKey });\n\n    const isGrid = display === ListDisplayType.CARD || display === ListDisplayType.POSTER;\n\n    return (\n        <Suspense fallback={<Spinner container />}>\n            {isGrid ? (\n                <SongListGridView\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                />\n            ) : (\n                <SongListTableView\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            )}\n        </Suspense>\n    );\n};\n","import { Divider, Group, Stack } from '@mantine/core';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { NumberInput, Switch, Text } from '/@/renderer/components';\nimport { MultiSelectWithInvalidData } from '/@/renderer/components/select-with-invalid-data';\nimport { useGenreList } from '/@/renderer/features/genres';\nimport { useTagList } from '/@/renderer/features/tag/queries/use-tag-list';\nimport { SongListFilter, useListFilterByKey, useListStoreActions } from '/@/renderer/store';\nimport { GenreListSort, LibraryItem, SongListQuery, SortOrder } from '/@/shared/types/domain-types';\n\ninterface JellyfinSongFiltersProps {\n    customFilters?: Partial<SongListFilter>;\n    onFilterChange: (filters: SongListFilter) => void;\n    pageKey: string;\n    serverId?: string;\n}\n\nexport const JellyfinSongFilters = ({\n    customFilters,\n    onFilterChange,\n    pageKey,\n    serverId,\n}: JellyfinSongFiltersProps) => {\n    const { t } = useTranslation();\n    const { setFilter } = useListStoreActions();\n    const filter = useListFilterByKey<SongListQuery>({ key: pageKey });\n\n    const isGenrePage = customFilters?.genreIds !== undefined;\n\n    // Despite the fact that getTags returns genres, it only returns genre names.\n    // We prefer using IDs, hence the double query\n    const genreListQuery = useGenreList({\n        query: {\n            musicFolderId: filter?.musicFolderId,\n            sortBy: GenreListSort.NAME,\n            sortOrder: SortOrder.ASC,\n            startIndex: 0,\n        },\n        serverId,\n    });\n\n    const genreList = useMemo(() => {\n        if (!genreListQuery?.data) return [];\n        return genreListQuery.data.items.map((genre) => ({\n            label: genre.name,\n            value: genre.id,\n        }));\n    }, [genreListQuery.data]);\n\n    const tagsQuery = useTagList({\n        query: {\n            folder: filter?.musicFolderId,\n            type: LibraryItem.SONG,\n        },\n        serverId,\n    });\n\n    const selectedGenres = useMemo(() => {\n        return filter?._custom?.jellyfin?.GenreIds?.split(',');\n    }, [filter?._custom?.jellyfin?.GenreIds]);\n\n    const selectedTags = useMemo(() => {\n        return filter?._custom?.jellyfin?.Tags?.split('|');\n    }, [filter?._custom?.jellyfin?.Tags]);\n\n    const toggleFilters = [\n        {\n            label: t('filter.isFavorited', { postProcess: 'sentenceCase' }),\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n                const updatedFilters = setFilter({\n                    customFilters,\n                    data: {\n                        _custom: {\n                            ...filter?._custom,\n                            jellyfin: {\n                                ...filter?._custom?.jellyfin,\n                                IncludeItemTypes: 'Audio',\n                            },\n                        },\n                        favorite: e.currentTarget.checked ? true : undefined,\n                    },\n                    itemType: LibraryItem.SONG,\n                    key: pageKey,\n                }) as SongListFilter;\n                onFilterChange(updatedFilters);\n            },\n            value: filter.favorite,\n        },\n    ];\n\n    const handleMinYearFilter = debounce((e: number | string) => {\n        if (typeof e === 'number' && (e < 1700 || e > 2300)) return;\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: {\n                    ...filter?._custom,\n                    jellyfin: {\n                        ...filter?._custom?.jellyfin,\n                        IncludeItemTypes: 'Audio',\n                    },\n                },\n                minYear: e === '' ? undefined : (e as number),\n            },\n            itemType: LibraryItem.SONG,\n            key: pageKey,\n        }) as SongListFilter;\n        onFilterChange(updatedFilters);\n    }, 500);\n\n    const handleMaxYearFilter = debounce((e: number | string) => {\n        if (typeof e === 'number' && (e < 1700 || e > 2300)) return;\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: {\n                    ...filter?._custom,\n                    jellyfin: {\n                        ...filter?._custom?.jellyfin,\n                        IncludeItemTypes: 'Audio',\n                    },\n                },\n                maxYear: e === '' ? undefined : (e as number),\n            },\n            itemType: LibraryItem.SONG,\n            key: pageKey,\n        }) as SongListFilter;\n        onFilterChange(updatedFilters);\n    }, 500);\n\n    const handleGenresFilter = debounce((e: string[] | undefined) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: {\n                    ...filter?._custom,\n                    jellyfin: {\n                        ...filter?._custom?.jellyfin,\n                        IncludeItemTypes: 'Audio',\n                    },\n                },\n                genreIds: e,\n            },\n            itemType: LibraryItem.SONG,\n            key: pageKey,\n        }) as SongListFilter;\n        onFilterChange(updatedFilters);\n    }, 250);\n\n    const handleTagFilter = debounce((e: string[] | undefined) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: {\n                    ...filter?._custom,\n                    jellyfin: {\n                        ...filter?._custom?.jellyfin,\n                        IncludeItemTypes: 'Audio',\n                        Tags: e?.join('|') || undefined,\n                    },\n                },\n            },\n            itemType: LibraryItem.SONG,\n            key: pageKey,\n        }) as SongListFilter;\n        onFilterChange(updatedFilters);\n    }, 250);\n\n    return (\n        <Stack p=\"0.8rem\">\n            {toggleFilters.map((filter) => (\n                <Group\n                    key={`nd-filter-${filter.label}`}\n                    position=\"apart\"\n                >\n                    <Text>{filter.label}</Text>\n                    <Switch\n                        checked={filter?.value || false}\n                        onChange={filter.onChange}\n                    />\n                </Group>\n            ))}\n            <Divider my=\"0.5rem\" />\n            <Group grow>\n                <NumberInput\n                    defaultValue={filter?.minYear}\n                    label={t('filter.fromYear', { postProcess: 'sentenceCase' })}\n                    max={2300}\n                    min={1700}\n                    onChange={handleMinYearFilter}\n                    required={!!filter?.minYear}\n                />\n                <NumberInput\n                    defaultValue={filter?.maxYear}\n                    label={t('filter.toYear', { postProcess: 'sentenceCase' })}\n                    max={2300}\n                    min={1700}\n                    onChange={handleMaxYearFilter}\n                    required={!!filter?.minYear}\n                />\n            </Group>\n            {!isGenrePage && (\n                <Group grow>\n                    <MultiSelectWithInvalidData\n                        clearable\n                        data={genreList}\n                        defaultValue={selectedGenres}\n                        label={t('entity.genre', { count: 1, postProcess: 'sentenceCase' })}\n                        onChange={handleGenresFilter}\n                        searchable\n                        width={250}\n                    />\n                </Group>\n            )}\n            {tagsQuery.data?.boolTags?.length && (\n                <Group grow>\n                    <MultiSelectWithInvalidData\n                        clearable\n                        data={tagsQuery.data.boolTags}\n                        defaultValue={selectedTags}\n                        label={t('common.tags', { postProcess: 'sentenceCase' })}\n                        onChange={handleTagFilter}\n                        searchable\n                        width={250}\n                    />\n                </Group>\n            )}\n        </Stack>\n    );\n};\n","import { Divider, Group, Stack } from '@mantine/core';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { NumberInput, Switch, Text } from '/@/renderer/components';\nimport { SelectWithInvalidData } from '/@/renderer/components/select-with-invalid-data';\nimport { useGenreList } from '/@/renderer/features/genres';\nimport { useTagList } from '/@/renderer/features/tag/queries/use-tag-list';\nimport { SongListFilter, useListFilterByKey, useListStoreActions } from '/@/renderer/store';\nimport { GenreListSort, LibraryItem, SongListQuery, SortOrder } from '/@/shared/types/domain-types';\n\ninterface NavidromeSongFiltersProps {\n    customFilters?: Partial<SongListFilter>;\n    onFilterChange: (filters: SongListFilter) => void;\n    pageKey: string;\n    serverId?: string;\n}\n\nexport const NavidromeSongFilters = ({\n    customFilters,\n    onFilterChange,\n    pageKey,\n    serverId,\n}: NavidromeSongFiltersProps) => {\n    const { t } = useTranslation();\n    const { setFilter } = useListStoreActions();\n    const filter = useListFilterByKey<SongListQuery>({ key: pageKey });\n\n    const isGenrePage = customFilters?.genreIds !== undefined;\n\n    const genreListQuery = useGenreList({\n        query: {\n            sortBy: GenreListSort.NAME,\n            sortOrder: SortOrder.ASC,\n            startIndex: 0,\n        },\n        serverId,\n    });\n\n    const tagsQuery = useTagList({\n        query: {\n            type: LibraryItem.SONG,\n        },\n        serverId,\n    });\n\n    const genreList = useMemo(() => {\n        if (!genreListQuery?.data) return [];\n        return genreListQuery.data.items.map((genre) => ({\n            label: genre.name,\n            value: genre.id,\n        }));\n    }, [genreListQuery.data]);\n\n    const handleGenresFilter = debounce((e: null | string) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: filter._custom,\n                genreIds: e ? [e] : undefined,\n            },\n            itemType: LibraryItem.SONG,\n            key: pageKey,\n        }) as SongListFilter;\n\n        onFilterChange(updatedFilters);\n    }, 250);\n\n    const handleTagFilter = debounce((tag: string, e: null | string) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: {\n                    ...filter._custom,\n                    navidrome: {\n                        ...filter._custom?.navidrome,\n                        [tag]: e || undefined,\n                    },\n                },\n            },\n            itemType: LibraryItem.SONG,\n            key: pageKey,\n        }) as SongListFilter;\n\n        onFilterChange(updatedFilters);\n    }, 250);\n\n    const toggleFilters = [\n        {\n            label: t('filter.isFavorited', { postProcess: 'sentenceCase' }),\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n                const updatedFilters = setFilter({\n                    customFilters,\n                    data: {\n                        _custom: filter._custom,\n                        favorite: e.currentTarget.checked ? true : undefined,\n                    },\n                    itemType: LibraryItem.SONG,\n                    key: pageKey,\n                }) as SongListFilter;\n\n                onFilterChange(updatedFilters);\n            },\n            value: filter.favorite,\n        },\n    ];\n\n    const handleYearFilter = debounce((e: number | string) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: {\n                    ...filter._custom,\n                    navidrome: {\n                        ...filter._custom?.navidrome,\n                        year: e === '' ? undefined : (e as number),\n                    },\n                },\n            },\n            itemType: LibraryItem.SONG,\n            key: pageKey,\n        }) as SongListFilter;\n\n        onFilterChange(updatedFilters);\n    }, 500);\n\n    return (\n        <Stack p=\"0.8rem\">\n            {toggleFilters.map((filter) => (\n                <Group\n                    key={`nd-filter-${filter.label}`}\n                    position=\"apart\"\n                >\n                    <Text>{filter.label}</Text>\n                    <Switch\n                        checked={filter?.value || false}\n                        onChange={filter.onChange}\n                        size=\"xs\"\n                    />\n                </Group>\n            ))}\n            <Divider my=\"0.5rem\" />\n            <Group grow>\n                <NumberInput\n                    label={t('common.year', { postProcess: 'titleCase' })}\n                    max={5000}\n                    min={0}\n                    onChange={(e) => handleYearFilter(e)}\n                    value={filter._custom?.navidrome?.year}\n                    width={50}\n                />\n                {!isGenrePage && (\n                    <SelectWithInvalidData\n                        clearable\n                        data={genreList}\n                        defaultValue={filter.genreIds ? filter.genreIds[0] : undefined}\n                        label={t('entity.genre', { count: 1, postProcess: 'titleCase' })}\n                        onChange={handleGenresFilter}\n                        searchable\n                        width={150}\n                    />\n                )}\n            </Group>\n            {tagsQuery.data?.enumTags?.length &&\n                tagsQuery.data.enumTags.map((tag) => (\n                    <Group\n                        grow\n                        key={tag.name}\n                    >\n                        <SelectWithInvalidData\n                            clearable\n                            data={tag.options}\n                            defaultValue={\n                                filter._custom?.navidrome?.[tag.name] as string | undefined\n                            }\n                            label={tag.name}\n                            onChange={(value) => handleTagFilter(tag.name, value)}\n                            searchable\n                            width={150}\n                        />\n                    </Group>\n                ))}\n        </Stack>\n    );\n};\n","import { Divider, Group, Stack } from '@mantine/core';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Select, Switch, Text } from '/@/renderer/components';\nimport { useGenreList } from '/@/renderer/features/genres';\nimport { SongListFilter, useListFilterByKey, useListStoreActions } from '/@/renderer/store';\nimport { GenreListSort, LibraryItem, SongListQuery, SortOrder } from '/@/shared/types/domain-types';\n\ninterface SubsonicSongFiltersProps {\n    customFilters?: Partial<SongListFilter>;\n    onFilterChange: (filters: SongListFilter) => void;\n    pageKey: string;\n    serverId?: string;\n}\n\nexport const SubsonicSongFilters = ({\n    customFilters,\n    onFilterChange,\n    pageKey,\n    serverId,\n}: SubsonicSongFiltersProps) => {\n    const { t } = useTranslation();\n    const { setFilter } = useListStoreActions();\n    const filter = useListFilterByKey<SongListQuery>({ key: pageKey });\n\n    const isGenrePage = customFilters?.genreIds !== undefined;\n\n    const genreListQuery = useGenreList({\n        query: {\n            sortBy: GenreListSort.NAME,\n            sortOrder: SortOrder.ASC,\n            startIndex: 0,\n        },\n        serverId,\n    });\n\n    const genreList = useMemo(() => {\n        if (!genreListQuery?.data) return [];\n        return genreListQuery.data.items.map((genre) => ({\n            label: genre.name,\n            value: genre.id,\n        }));\n    }, [genreListQuery.data]);\n\n    const handleGenresFilter = debounce((e: null | string) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                genreIds: e ? [e] : undefined,\n            },\n            itemType: LibraryItem.SONG,\n            key: pageKey,\n        }) as SongListFilter;\n\n        onFilterChange(updatedFilters);\n    }, 250);\n\n    const toggleFilters = [\n        {\n            disabled: filter.genreIds !== undefined || isGenrePage || !!filter.searchTerm,\n            label: t('filter.isFavorited', { postProcess: 'sentenceCase' }),\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n                const updatedFilters = setFilter({\n                    customFilters,\n                    data: {\n                        favorite: e.target.checked,\n                    },\n                    itemType: LibraryItem.SONG,\n                    key: pageKey,\n                }) as SongListFilter;\n\n                onFilterChange(updatedFilters);\n            },\n            value: filter.favorite,\n        },\n    ];\n\n    return (\n        <Stack p=\"0.8rem\">\n            {toggleFilters.map((filter) => (\n                <Group\n                    key={`ss-filter-${filter.label}`}\n                    position=\"apart\"\n                >\n                    <Text>{filter.label}</Text>\n                    <Switch\n                        checked={filter?.value || false}\n                        disabled={filter.disabled}\n                        onChange={filter.onChange}\n                        size=\"xs\"\n                    />\n                </Group>\n            ))}\n            <Divider my=\"0.5rem\" />\n            <Group grow>\n                {!isGenrePage && (\n                    <Select\n                        clearable\n                        data={genreList}\n                        defaultValue={filter.genreIds ? filter.genreIds[0] : undefined}\n                        disabled={!!filter.searchTerm}\n                        label={t('entity.genre', { count: 1, postProcess: 'titleCase' })}\n                        onChange={handleGenresFilter}\n                        searchable\n                        width={150}\n                    />\n                )}\n            </Group>\n        </Stack>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { Divider, Flex, Group, Stack } from '@mantine/core';\nimport { openModal } from '@mantine/modals';\nimport { ChangeEvent, MouseEvent, MutableRefObject, useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    RiAddBoxFill,\n    RiAddCircleFill,\n    RiFilterFill,\n    RiFolder2Fill,\n    RiMoreFill,\n    RiPlayFill,\n    RiRefreshLine,\n    RiSettings3Fill,\n    RiShuffleFill,\n} from 'react-icons/ri';\n\nimport i18n from '/@/i18n/i18n';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { Button, DropdownMenu, MultiSelect, Slider, Switch, Text } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { SONG_TABLE_COLUMNS } from '/@/renderer/components/virtual-table';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { OrderToggleButton, useMusicFolders } from '/@/renderer/features/shared';\nimport { JellyfinSongFilters } from '/@/renderer/features/songs/components/jellyfin-song-filters';\nimport { NavidromeSongFilters } from '/@/renderer/features/songs/components/navidrome-song-filters';\nimport { SubsonicSongFilters } from '/@/renderer/features/songs/components/subsonic-song-filter';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useListFilterRefresh } from '/@/renderer/hooks/use-list-filter-refresh';\nimport { queryClient } from '/@/renderer/lib/react-query';\nimport { SongListFilter, useCurrentServer, useListStoreActions } from '/@/renderer/store';\nimport { useListStoreByKey } from '/@/renderer/store/list.store';\nimport {\n    LibraryItem,\n    ServerType,\n    SongListQuery,\n    SongListSort,\n    SortOrder,\n} from '/@/shared/types/domain-types';\nimport { ListDisplayType, Play, TableColumn } from '/@/shared/types/types';\n\nconst FILTERS = {\n    jellyfin: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.album', { postProcess: 'titleCase' }),\n            value: SongListSort.ALBUM,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.albumArtist', { postProcess: 'titleCase' }),\n            value: SongListSort.ALBUM_ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.artist', { postProcess: 'titleCase' }),\n            value: SongListSort.ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.duration', { postProcess: 'titleCase' }),\n            value: SongListSort.DURATION,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.playCount', { postProcess: 'titleCase' }),\n            value: SongListSort.PLAY_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: SongListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.random', { postProcess: 'titleCase' }),\n            value: SongListSort.RANDOM,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.recentlyAdded', { postProcess: 'titleCase' }),\n            value: SongListSort.RECENTLY_ADDED,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.recentlyPlayed', { postProcess: 'titleCase' }),\n            value: SongListSort.RECENTLY_PLAYED,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.releaseDate', { postProcess: 'titleCase' }),\n            value: SongListSort.RELEASE_DATE,\n        },\n    ],\n    navidrome: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.album', { postProcess: 'titleCase' }),\n            value: SongListSort.ALBUM,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.albumArtist', { postProcess: 'titleCase' }),\n            value: SongListSort.ALBUM_ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.artist', { postProcess: 'titleCase' }),\n            value: SongListSort.ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.bpm', { postProcess: 'titleCase' }),\n            value: SongListSort.BPM,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('common.channel', { count: 2, postProcess: 'titleCase' }),\n            value: SongListSort.CHANNELS,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.comment', { postProcess: 'titleCase' }),\n            value: SongListSort.COMMENT,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.duration', { postProcess: 'titleCase' }),\n            value: SongListSort.DURATION,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.isFavorited', { postProcess: 'titleCase' }),\n            value: SongListSort.FAVORITED,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.genre', { postProcess: 'titleCase' }),\n            value: SongListSort.GENRE,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: SongListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.playCount', { postProcess: 'titleCase' }),\n            value: SongListSort.PLAY_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.random', { postProcess: 'titleCase' }),\n            value: SongListSort.RANDOM,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.rating', { postProcess: 'titleCase' }),\n            value: SongListSort.RATING,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyAdded', { postProcess: 'titleCase' }),\n            value: SongListSort.RECENTLY_ADDED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyPlayed', { postProcess: 'titleCase' }),\n            value: SongListSort.RECENTLY_PLAYED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.releaseYear', { postProcess: 'titleCase' }),\n            value: SongListSort.YEAR,\n        },\n    ],\n    subsonic: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: SongListSort.NAME,\n        },\n    ],\n};\n\ninterface SongListHeaderFiltersProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const SongListHeaderFilters = ({\n    gridRef,\n    itemCount,\n    tableRef,\n}: SongListHeaderFiltersProps) => {\n    const { t } = useTranslation();\n    const server = useCurrentServer();\n    const { customFilters, handlePlay, pageKey } = useListContext();\n    const { display, filter, grid, table } = useListStoreByKey<SongListQuery>({\n        filter: customFilters,\n        key: pageKey,\n    });\n\n    const { setDisplayType, setFilter, setGrid, setTable, setTablePagination } =\n        useListStoreActions();\n\n    const { handleRefreshGrid, handleRefreshTable } = useListFilterRefresh({\n        itemCount,\n        itemType: LibraryItem.SONG,\n        server,\n    });\n\n    const cq = useContainerQuery();\n\n    const musicFoldersQuery = useMusicFolders({ query: null, serverId: server?.id });\n\n    const sortByLabel =\n        (server?.type &&\n            (\n                FILTERS[server.type as keyof typeof FILTERS] as { name: string; value: string }[]\n            ).find((f) => f.value === filter.sortBy)?.name) ||\n        'Unknown';\n\n    const isGrid = display === ListDisplayType.CARD || display === ListDisplayType.POSTER;\n\n    const handleSetSortBy = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value || !server?.type) return;\n            const sortOrder = FILTERS[server.type as keyof typeof FILTERS].find(\n                (f) => f.value === e.currentTarget.value,\n            )?.defaultOrder;\n\n            const updatedFilters = setFilter({\n                customFilters,\n                data: {\n                    sortBy: e.currentTarget.value as SongListSort,\n                    sortOrder: sortOrder || SortOrder.ASC,\n                },\n                itemType: LibraryItem.SONG,\n                key: pageKey,\n            }) as SongListFilter;\n\n            if (isGrid) {\n                handleRefreshGrid(gridRef, updatedFilters);\n            } else {\n                handleRefreshTable(tableRef, updatedFilters);\n            }\n        },\n        [\n            customFilters,\n            gridRef,\n            handleRefreshGrid,\n            handleRefreshTable,\n            isGrid,\n            pageKey,\n            server?.type,\n            setFilter,\n            tableRef,\n        ],\n    );\n\n    const handleSetMusicFolder = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value) return;\n\n            let updatedFilters: null | SongListFilter = null;\n            if (e.currentTarget.value === String(filter.musicFolderId)) {\n                updatedFilters = setFilter({\n                    customFilters,\n                    data: { musicFolderId: undefined },\n                    itemType: LibraryItem.SONG,\n                    key: pageKey,\n                }) as SongListFilter;\n            } else {\n                updatedFilters = setFilter({\n                    customFilters,\n                    data: { musicFolderId: e.currentTarget.value },\n                    itemType: LibraryItem.SONG,\n                    key: pageKey,\n                }) as SongListFilter;\n            }\n\n            if (isGrid) {\n                handleRefreshGrid(gridRef, updatedFilters);\n            } else {\n                handleRefreshTable(tableRef, updatedFilters);\n            }\n        },\n        [\n            filter.musicFolderId,\n            isGrid,\n            setFilter,\n            customFilters,\n            pageKey,\n            handleRefreshGrid,\n            gridRef,\n            handleRefreshTable,\n            tableRef,\n        ],\n    );\n\n    const handleToggleSortOrder = useCallback(() => {\n        const newSortOrder = filter.sortOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n        const updatedFilters = setFilter({\n            customFilters,\n            data: { sortOrder: newSortOrder },\n            itemType: LibraryItem.SONG,\n            key: pageKey,\n        }) as SongListFilter;\n\n        if (isGrid) {\n            handleRefreshGrid(gridRef, updatedFilters);\n        } else {\n            handleRefreshTable(tableRef, updatedFilters);\n        }\n    }, [\n        customFilters,\n        filter.sortOrder,\n        gridRef,\n        handleRefreshGrid,\n        handleRefreshTable,\n        isGrid,\n        pageKey,\n        setFilter,\n        tableRef,\n    ]);\n\n    const handleSetViewType = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value) return;\n            const display = e.currentTarget.value as ListDisplayType;\n            setDisplayType({\n                data: e.currentTarget.value as ListDisplayType,\n                key: pageKey,\n            });\n\n            if (display === ListDisplayType.TABLE) {\n                tableRef.current?.api.paginationSetPageSize(\n                    tableRef.current.props.infiniteInitialRowCount,\n                );\n                setTablePagination({ data: { currentPage: 0 }, key: pageKey });\n            } else if (display === ListDisplayType.TABLE_PAGINATED) {\n                setTablePagination({ data: { currentPage: 0 }, key: pageKey });\n            }\n        },\n        [pageKey, setDisplayType, setTablePagination, tableRef],\n    );\n\n    const handleTableColumns = (values: TableColumn[]) => {\n        const existingColumns = table.columns;\n\n        if (values.length === 0) {\n            return setTable({\n                data: {\n                    columns: [],\n                },\n                key: pageKey,\n            });\n        }\n\n        // If adding a column\n        if (values.length > existingColumns.length) {\n            const newColumn = { column: values[values.length - 1], width: 100 };\n\n            return setTable({ data: { columns: [...existingColumns, newColumn] }, key: pageKey });\n        }\n\n        // If removing a column\n        const removed = existingColumns.filter((column) => !values.includes(column.column));\n        const newColumns = existingColumns.filter((column) => !removed.includes(column));\n\n        return setTable({ data: { columns: newColumns }, key: pageKey });\n    };\n\n    const handleAutoFitColumns = (e: ChangeEvent<HTMLInputElement>) => {\n        setTable({ data: { autoFit: e.currentTarget.checked }, key: pageKey });\n\n        if (e.currentTarget.checked) {\n            tableRef.current?.api.sizeColumnsToFit();\n        }\n    };\n\n    const handleItemSize = (e: number) => {\n        if (isGrid) {\n            setGrid({ data: { itemSize: e }, key: pageKey });\n        } else {\n            setTable({ data: { rowHeight: e }, key: pageKey });\n        }\n    };\n\n    const handleItemGap = (e: number) => {\n        setGrid({ data: { itemGap: e }, key: pageKey });\n    };\n\n    const handleRefresh = () => {\n        queryClient.invalidateQueries(queryKeys.songs.list(server?.id || ''));\n        if (isGrid) {\n            handleRefreshGrid(gridRef, filter);\n        } else {\n            handleRefreshTable(tableRef, filter);\n        }\n    };\n\n    const onFilterChange = (filter: SongListFilter) => {\n        if (isGrid) {\n            handleRefreshGrid(gridRef, {\n                ...filter,\n            });\n        } else {\n            handleRefreshTable(tableRef, {\n                ...filter,\n            });\n        }\n    };\n\n    const handleOpenFiltersModal = () => {\n        let FilterComponent;\n\n        switch (server?.type) {\n            case ServerType.JELLYFIN:\n                FilterComponent = JellyfinSongFilters;\n                break;\n            case ServerType.NAVIDROME:\n                FilterComponent = NavidromeSongFilters;\n                break;\n            case ServerType.SUBSONIC:\n                FilterComponent = SubsonicSongFilters;\n                break;\n        }\n\n        if (!FilterComponent) {\n            return;\n        }\n\n        openModal({\n            children: (\n                <FilterComponent\n                    customFilters={customFilters}\n                    onFilterChange={onFilterChange}\n                    pageKey={pageKey}\n                    serverId={server?.id}\n                />\n            ),\n            title: 'Song Filters',\n        });\n    };\n\n    const isFilterApplied = useMemo(() => {\n        const isNavidromeFilterApplied =\n            server?.type === ServerType.NAVIDROME &&\n            filter._custom?.navidrome &&\n            Object.values(filter?._custom?.navidrome).some((value) => value !== undefined);\n\n        const isJellyfinFilterApplied =\n            server?.type === ServerType.JELLYFIN &&\n            filter?._custom?.jellyfin &&\n            Object.values(filter?._custom?.jellyfin)\n                .filter((value) => value !== 'Audio') // Don't account for includeItemTypes: Audio\n                .some((value) => value !== undefined);\n\n        const isGenericFilterApplied = filter?.favorite || filter?.genreIds?.length;\n\n        return isNavidromeFilterApplied || isJellyfinFilterApplied || isGenericFilterApplied;\n    }, [\n        filter._custom?.jellyfin,\n        filter._custom?.navidrome,\n        filter?.favorite,\n        filter?.genreIds?.length,\n        server?.type,\n    ]);\n\n    const isFolderFilterApplied = useMemo(() => {\n        return filter.musicFolderId !== undefined;\n    }, [filter.musicFolderId]);\n\n    return (\n        <Flex justify=\"space-between\">\n            <Group\n                ref={cq.ref}\n                spacing=\"sm\"\n                w=\"100%\"\n            >\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            fw=\"600\"\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            {sortByLabel}\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        {FILTERS[server?.type as keyof typeof FILTERS].map((f) => (\n                            <DropdownMenu.Item\n                                $isActive={f.value === filter.sortBy}\n                                key={`filter-${f.name}`}\n                                onClick={handleSetSortBy}\n                                value={f.value}\n                            >\n                                {f.name}\n                            </DropdownMenu.Item>\n                        ))}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n                {server?.type !== ServerType.SUBSONIC && (\n                    <>\n                        <Divider orientation=\"vertical\" />\n                        <OrderToggleButton\n                            onToggle={handleToggleSortOrder}\n                            sortOrder={filter.sortOrder}\n                        />\n                    </>\n                )}\n                {server?.type === ServerType.JELLYFIN && (\n                    <>\n                        <Divider orientation=\"vertical\" />\n                        <DropdownMenu position=\"bottom-start\">\n                            <DropdownMenu.Target>\n                                <Button\n                                    compact\n                                    fw=\"600\"\n                                    size=\"md\"\n                                    sx={{\n                                        svg: {\n                                            fill: isFolderFilterApplied\n                                                ? 'var(--primary-color) !important'\n                                                : undefined,\n                                        },\n                                    }}\n                                    variant=\"subtle\"\n                                >\n                                    <RiFolder2Fill size=\"1.3rem\" />\n                                </Button>\n                            </DropdownMenu.Target>\n                            <DropdownMenu.Dropdown>\n                                {musicFoldersQuery.data?.items.map((folder) => (\n                                    <DropdownMenu.Item\n                                        $isActive={filter.musicFolderId === folder.id}\n                                        key={`musicFolder-${folder.id}`}\n                                        onClick={handleSetMusicFolder}\n                                        value={folder.id}\n                                    >\n                                        {folder.name}\n                                    </DropdownMenu.Item>\n                                ))}\n                            </DropdownMenu.Dropdown>\n                        </DropdownMenu>\n                    </>\n                )}\n                <Divider orientation=\"vertical\" />\n                <Button\n                    compact\n                    onClick={handleOpenFiltersModal}\n                    size=\"md\"\n                    sx={{\n                        svg: {\n                            fill: isFilterApplied ? 'var(--primary-color) !important' : undefined,\n                        },\n                    }}\n                    tooltip={{ label: t('common.filters', { postProcess: 'titleCase' }) }}\n                    variant=\"subtle\"\n                >\n                    <RiFilterFill size=\"1.3rem\" />\n                </Button>\n                <Divider orientation=\"vertical\" />\n                <Button\n                    compact\n                    onClick={handleRefresh}\n                    size=\"md\"\n                    tooltip={{ label: t('common.refresh', { postProcess: 'titleCase' }) }}\n                    variant=\"subtle\"\n                >\n                    <RiRefreshLine size=\"1.3rem\" />\n                </Button>\n                <Divider orientation=\"vertical\" />\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            fw=\"600\"\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            <RiMoreFill size=\"1.3rem\" />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Item\n                            icon={<RiPlayFill />}\n                            onClick={() => handlePlay?.({ playType: Play.NOW })}\n                        >\n                            {t('player.play', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            icon={<RiShuffleFill />}\n                            onClick={() => handlePlay?.({ playType: Play.SHUFFLE })}\n                        >\n                            {t('player.shuffle', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            icon={<RiAddBoxFill />}\n                            onClick={() => handlePlay?.({ playType: Play.LAST })}\n                        >\n                            {t('player.addLast', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            icon={<RiAddCircleFill />}\n                            onClick={() => handlePlay?.({ playType: Play.NEXT })}\n                        >\n                            {t('player.addNext', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Divider />\n                        <DropdownMenu.Item\n                            icon={<RiRefreshLine />}\n                            onClick={handleRefresh}\n                        >\n                            {t('common.refresh', { postProcess: 'titleCase' })}\n                        </DropdownMenu.Item>\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </Group>\n            <Group\n                noWrap\n                spacing=\"sm\"\n            >\n                <DropdownMenu\n                    position=\"bottom-end\"\n                    width={425}\n                >\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            <RiSettings3Fill size=\"1.3rem\" />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Label>\n                            {t('table.config.general.displayType', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.CARD}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.CARD}\n                        >\n                            {t('table.config.view.card', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.POSTER}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.POSTER}\n                        >\n                            {t('table.config.view.poster', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.TABLE}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.TABLE}\n                        >\n                            {t('table.config.view.table', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        {/* <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.TABLE_PAGINATED}\n                            value={ListDisplayType.TABLE_PAGINATED}\n                            onClick={handleSetViewType}\n                        >\n                            Table (paginated)\n                        </DropdownMenu.Item> */}\n                        <DropdownMenu.Divider />\n                        <DropdownMenu.Label>\n                            {t('table.config.general.size', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item closeMenuOnClick={false}>\n                            <Slider\n                                defaultValue={isGrid ? grid?.itemSize || 0 : table.rowHeight}\n                                max={isGrid ? 300 : 100}\n                                min={isGrid ? 100 : 25}\n                                onChangeEnd={handleItemSize}\n                            />\n                        </DropdownMenu.Item>\n                        {isGrid && (\n                            <>\n                                <DropdownMenu.Label>\n                                    {t('table.config.general.gap', {\n                                        postProcess: 'sentenceCase',\n                                    })}\n                                </DropdownMenu.Label>\n                                <DropdownMenu.Item closeMenuOnClick={false}>\n                                    <Slider\n                                        defaultValue={grid?.itemGap || 0}\n                                        max={30}\n                                        min={0}\n                                        onChangeEnd={handleItemGap}\n                                    />\n                                </DropdownMenu.Item>\n                            </>\n                        )}\n                        <DropdownMenu.Label>\n                            {t('table.config.general.tableColumns', {\n                                postProcess: 'sentenceCase',\n                            })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item\n                            closeMenuOnClick={false}\n                            component=\"div\"\n                            sx={{ cursor: 'default' }}\n                        >\n                            <Stack>\n                                <MultiSelect\n                                    clearable\n                                    data={SONG_TABLE_COLUMNS}\n                                    defaultValue={table?.columns.map((column) => column.column)}\n                                    onChange={handleTableColumns}\n                                    width={300}\n                                />\n                                <Group position=\"apart\">\n                                    <Text>\n                                        {t('table.config.general.autoFitColumns', {\n                                            postProcess: 'sentenceCase',\n                                        })}\n                                    </Text>\n                                    <Switch\n                                        defaultChecked={table.autoFit}\n                                        onChange={handleAutoFitColumns}\n                                    />\n                                </Group>\n                            </Stack>\n                        </DropdownMenu.Item>\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </Group>\n        </Flex>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { Flex, Group, Stack } from '@mantine/core';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, MutableRefObject, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { PageHeader, SearchInput } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { FilterBar, LibraryHeaderBar } from '/@/renderer/features/shared';\nimport { SongListHeaderFilters } from '/@/renderer/features/songs/components/song-list-header-filters';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useDisplayRefresh } from '/@/renderer/hooks/use-display-refresh';\nimport { SongListFilter, useCurrentServer } from '/@/renderer/store';\nimport { usePlayButtonBehavior } from '/@/renderer/store/settings.store';\nimport { LibraryItem, SongListQuery } from '/@/shared/types/domain-types';\n\ninterface SongListHeaderProps {\n    genreId?: string;\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n    title?: string;\n}\n\nexport const SongListHeader = ({\n    genreId,\n    gridRef,\n    itemCount,\n    tableRef,\n    title,\n}: SongListHeaderProps) => {\n    const { t } = useTranslation();\n    const server = useCurrentServer();\n    const cq = useContainerQuery();\n    const genreRef = useRef<string | undefined>(undefined);\n\n    const { customFilters, filter, handlePlay, refresh, search } = useDisplayRefresh<SongListQuery>(\n        {\n            gridRef,\n            itemCount,\n            itemType: LibraryItem.SONG,\n            server,\n            tableRef,\n        },\n    );\n\n    const handleSearch = debounce((e: ChangeEvent<HTMLInputElement>) => {\n        const updatedFilters = search(e) as SongListFilter;\n\n        const filterWithCustom = {\n            ...updatedFilters,\n            ...customFilters,\n        };\n\n        refresh(filterWithCustom);\n    }, 500);\n\n    useEffect(() => {\n        if (genreRef.current && genreRef.current !== genreId) {\n            refresh(customFilters);\n        }\n\n        genreRef.current = genreId;\n    }, [customFilters, genreId, refresh, tableRef]);\n\n    const playButtonBehavior = usePlayButtonBehavior();\n\n    return (\n        <Stack\n            ref={cq.ref}\n            spacing={0}\n        >\n            <PageHeader backgroundColor=\"var(--titlebar-bg)\">\n                <Flex\n                    justify=\"space-between\"\n                    w=\"100%\"\n                >\n                    <LibraryHeaderBar>\n                        <LibraryHeaderBar.PlayButton\n                            onClick={() => handlePlay?.({ playType: playButtonBehavior })}\n                        />\n                        <LibraryHeaderBar.Title>\n                            {title || t('page.trackList.title', { postProcess: 'titleCase' })}\n                        </LibraryHeaderBar.Title>\n                        <LibraryHeaderBar.Badge\n                            isLoading={itemCount === null || itemCount === undefined}\n                        >\n                            {itemCount}\n                        </LibraryHeaderBar.Badge>\n                    </LibraryHeaderBar>\n                    <Group>\n                        <SearchInput\n                            defaultValue={filter.searchTerm}\n                            onChange={handleSearch}\n                            openedWidth={cq.isMd ? 250 : cq.isSm ? 200 : 150}\n                        />\n                    </Group>\n                </Flex>\n            </PageHeader>\n            <FilterBar>\n                <SongListHeaderFilters\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            </FilterBar>\n        </Stack>\n    );\n};\n","import type { QueryHookArgs } from '/@/renderer/lib/react-query';\nimport type { SongListQuery } from '/@/shared/types/domain-types';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { getServerById } from '/@/renderer/store';\n\nexport const useSongListCount = (args: QueryHookArgs<SongListQuery>) => {\n    const { options, query, serverId } = args;\n    const server = getServerById(serverId);\n\n    return useQuery({\n        enabled: !!serverId,\n        queryFn: ({ signal }) => {\n            if (!server) throw new Error('Server not found');\n            return api.controller.getSongListCount({\n                apiClientProps: {\n                    server,\n                    signal,\n                },\n                query,\n            });\n        },\n        queryKey: queryKeys.songs.count(\n            serverId || '',\n            Object.keys(query).length === 0 ? undefined : query,\n        ),\n        ...options,\n    });\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport isEmpty from 'lodash/isEmpty';\nimport { useCallback, useMemo, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { ListContext } from '/@/renderer/context/list-context';\nimport { useGenreList } from '/@/renderer/features/genres';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { AnimatedPage } from '/@/renderer/features/shared';\nimport { SongListContent } from '/@/renderer/features/songs/components/song-list-content';\nimport { SongListHeader } from '/@/renderer/features/songs/components/song-list-header';\nimport { useSongListCount } from '/@/renderer/features/songs/queries/song-list-count-query';\nimport { useCurrentServer, useListFilterByKey } from '/@/renderer/store';\nimport { sentenceCase, titleCase } from '/@/renderer/utils';\nimport { GenreListSort, LibraryItem, SongListQuery, SortOrder } from '/@/shared/types/domain-types';\nimport { Play } from '/@/shared/types/types';\n\nconst TrackListRoute = () => {\n    const { t } = useTranslation();\n    const gridRef = useRef<null | VirtualInfiniteGridRef>(null);\n    const tableRef = useRef<AgGridReactType | null>(null);\n    const server = useCurrentServer();\n    const [searchParams] = useSearchParams();\n    const { albumArtistId, genreId } = useParams();\n\n    const pageKey = albumArtistId ? `albumArtistSong` : 'song';\n\n    const customFilters = useMemo(() => {\n        const value = {\n            ...(albumArtistId && { artistIds: [albumArtistId] }),\n            ...(genreId && {\n                genreIds: [genreId],\n            }),\n        };\n\n        if (isEmpty(value)) {\n            return undefined;\n        }\n\n        return value;\n    }, [albumArtistId, genreId]);\n\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const songListFilter = useListFilterByKey<SongListQuery>({\n        filter: customFilters,\n        key: pageKey,\n    });\n\n    const genreList = useGenreList({\n        options: {\n            cacheTime: 1000 * 60 * 60,\n            enabled: !!genreId,\n        },\n        query: {\n            sortBy: GenreListSort.NAME,\n            sortOrder: SortOrder.ASC,\n            startIndex: 0,\n        },\n        serverId: server?.id,\n    });\n\n    const genreTitle = useMemo(() => {\n        if (!genreList.data) return '';\n        const genre = genreList.data.items.find((g) => g.id === genreId);\n\n        if (!genre) return 'Unknown';\n\n        return genre?.name;\n    }, [genreId, genreList.data]);\n\n    const itemCountCheck = useSongListCount({\n        options: {\n            cacheTime: 1000 * 60,\n            staleTime: 1000 * 60,\n        },\n        query: songListFilter,\n        serverId: server?.id,\n    });\n\n    const itemCount = itemCountCheck.data === null ? undefined : itemCountCheck.data;\n\n    const handlePlay = useCallback(\n        async (args: { initialSongId?: string; playType: Play }) => {\n            if (!itemCount || itemCount === 0) return;\n            const { initialSongId, playType } = args;\n            const query: SongListQuery = { ...songListFilter, limit: itemCount, startIndex: 0 };\n\n            if (albumArtistId) {\n                handlePlayQueueAdd?.({\n                    byItemType: {\n                        id: [albumArtistId],\n                        type: LibraryItem.ALBUM_ARTIST,\n                    },\n                    initialSongId,\n                    playType,\n                    query,\n                });\n            } else {\n                handlePlayQueueAdd?.({\n                    byItemType: {\n                        id: [],\n                        type: LibraryItem.SONG,\n                    },\n                    initialSongId,\n                    playType,\n                    query,\n                });\n            }\n        },\n        [albumArtistId, handlePlayQueueAdd, itemCount, songListFilter],\n    );\n\n    const providerValue = useMemo(() => {\n        return {\n            customFilters,\n            handlePlay,\n            id: albumArtistId ?? genreId,\n            pageKey,\n        };\n    }, [albumArtistId, customFilters, genreId, handlePlay, pageKey]);\n\n    const artist = searchParams.get('artistName');\n    const title = artist\n        ? sentenceCase(t('page.trackList.artistTracks', { artist }))\n        : genreId\n          ? sentenceCase(\n                t('page.trackList.genreTracks', {\n                    genre: titleCase(genreTitle),\n                }),\n            )\n          : undefined;\n\n    return (\n        <AnimatedPage>\n            <ListContext.Provider value={providerValue}>\n                <SongListHeader\n                    genreId={genreId}\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                    title={title}\n                />\n                <SongListContent\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            </ListContext.Provider>\n        </AnimatedPage>\n    );\n};\n\nexport default TrackListRoute;\n"],"file":"assets/song-list-route-BdnaY4np.js"}