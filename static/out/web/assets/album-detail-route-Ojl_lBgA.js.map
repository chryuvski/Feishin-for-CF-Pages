{"version":3,"file":"album-detail-route-Ojl_lBgA.js","sources":["../../../src/renderer/components/virtual-table/utils.ts","../../../src/renderer/features/albums/queries/album-detail-query.ts","../../../src/renderer/components/virtual-table/cells/full-width-disc-cell.tsx","../../../src/renderer/features/albums/components/album-detail-content.tsx","../../../src/renderer/features/albums/components/album-detail-header.tsx","../../../src/renderer/features/albums/routes/album-detail-route.tsx"],"sourcesContent":["import { GridApi, RowNode } from '@ag-grid-community/core';\n\nexport const getNodesByDiscNumber = (args: {\n    api: GridApi;\n    discNumber: number;\n    subtitle: null | string;\n}) => {\n    const { api, discNumber, subtitle } = args;\n\n    const nodes: RowNode<any>[] = [];\n    api.forEachNode((node) => {\n        if (node.data.discNumber === discNumber && node.data.discSubtitle === subtitle)\n            nodes.push(node);\n    });\n\n    return nodes;\n};\n\nexport const setNodeSelection = (args: {\n    deselectAll?: boolean;\n    isSelected: boolean;\n    nodes: RowNode<any>[];\n}) => {\n    const { isSelected, nodes } = args;\n\n    nodes.forEach((node) => {\n        node.setSelected(isSelected);\n    });\n};\n\nexport const toggleNodeSelection = (args: { nodes: RowNode<any>[] }) => {\n    const { nodes } = args;\n\n    nodes.forEach((node) => {\n        if (node.isSelected()) {\n            node.setSelected(false);\n        } else {\n            node.setSelected(true);\n        }\n    });\n};\n","import type { QueryHookArgs } from '/@/renderer/lib/react-query';\nimport type { AlbumDetailQuery } from '/@/shared/types/domain-types';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { controller } from '/@/renderer/api/controller';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { getServerById } from '/@/renderer/store';\n\nexport const useAlbumDetail = (args: QueryHookArgs<AlbumDetailQuery>) => {\n    const { options, query, serverId } = args;\n    const server = getServerById(serverId);\n\n    return useQuery({\n        queryFn: ({ signal }) => {\n            if (!server) throw new Error('Server not found');\n            return controller.getAlbumDetail({ apiClientProps: { server, signal }, query });\n        },\n        queryKey: queryKeys.albums.detail(server?.id || '', query),\n        ...options,\n    });\n};\n","import { ICellRendererParams } from '@ag-grid-community/core';\nimport { Group } from '@mantine/core';\nimport { useState } from 'react';\nimport { RiCheckboxBlankLine, RiCheckboxLine } from 'react-icons/ri';\nimport styled from 'styled-components';\n\nimport { Button } from '/@/renderer/components/button';\nimport { Paper } from '/@/renderer/components/paper';\nimport { getNodesByDiscNumber, setNodeSelection } from '/@/renderer/components/virtual-table/utils';\n\nconst Container = styled(Paper)`\n    display: flex;\n    height: 100%;\n    padding: 0.5rem 1rem;\n    border: 1px solid transparent;\n`;\n\nexport const FullWidthDiscCell = ({ api, data, node }: ICellRendererParams) => {\n    const [isSelected, setIsSelected] = useState(false);\n\n    const handleToggleDiscNodes = () => {\n        if (!data) return;\n        const split: string[] = node.data.id.split('-');\n        const discNumber = Number(split[1]);\n        // the subtitle could have '-' in it; make sure to have all remaining items\n        const subtitle = split.length === 3 ? split.slice(2).join('-') : null;\n        const nodes = getNodesByDiscNumber({ api, discNumber, subtitle });\n\n        setNodeSelection({ isSelected: !isSelected, nodes });\n        setIsSelected((prev) => !prev);\n    };\n\n    return (\n        <Container>\n            <Group\n                position=\"apart\"\n                w=\"100%\"\n            >\n                <Button\n                    compact\n                    leftIcon={isSelected ? <RiCheckboxLine /> : <RiCheckboxBlankLine />}\n                    onClick={handleToggleDiscNodes}\n                    size=\"md\"\n                    variant=\"subtle\"\n                >\n                    {data.name}\n                </Button>\n            </Group>\n        </Container>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { RowDoubleClickedEvent, RowHeightParams, RowNode } from '@ag-grid-community/core';\nimport { Box, Group, Stack } from '@mantine/core';\nimport { useSetState } from '@mantine/hooks';\nimport { MutableRefObject, useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { FaLastfmSquare } from 'react-icons/fa';\nimport { RiHeartFill, RiHeartLine, RiMoreFill, RiSettings2Fill } from 'react-icons/ri';\nimport { SiMusicbrainz } from 'react-icons/si';\nimport { generatePath, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { Button, Popover, Spoiler } from '/@/renderer/components';\nimport { MemoizedSwiperGridCarousel } from '/@/renderer/components/grid-carousel';\nimport {\n    getColumnDefs,\n    TableConfigDropdown,\n    VirtualTable,\n} from '/@/renderer/components/virtual-table';\nimport { FullWidthDiscCell } from '/@/renderer/components/virtual-table/cells/full-width-disc-cell';\nimport { useCurrentSongRowStyles } from '/@/renderer/components/virtual-table/hooks/use-current-song-row-styles';\nimport { useAlbumDetail } from '/@/renderer/features/albums/queries/album-detail-query';\nimport { useAlbumList } from '/@/renderer/features/albums/queries/album-list-query';\nimport {\n    useHandleGeneralContextMenu,\n    useHandleTableContextMenu,\n} from '/@/renderer/features/context-menu';\nimport {\n    ALBUM_CONTEXT_MENU_ITEMS,\n    SONG_CONTEXT_MENU_ITEMS,\n} from '/@/renderer/features/context-menu/context-menu-items';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { PlayButton, useCreateFavorite, useDeleteFavorite } from '/@/renderer/features/shared';\nimport { LibraryBackgroundOverlay } from '/@/renderer/features/shared/components/library-background-overlay';\nimport { useAppFocus, useContainerQuery } from '/@/renderer/hooks';\nimport { useGenreRoute } from '/@/renderer/hooks/use-genre-route';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer, useCurrentSong, useCurrentStatus } from '/@/renderer/store';\nimport {\n    PersistedTableColumn,\n    useGeneralSettings,\n    usePlayButtonBehavior,\n    useSettingsStoreActions,\n    useTableSettings,\n} from '/@/renderer/store/settings.store';\nimport { replaceURLWithHTMLLinks } from '/@/renderer/utils/linkify';\nimport {\n    AlbumListQuery,\n    AlbumListSort,\n    LibraryItem,\n    QueueSong,\n    SortOrder,\n} from '/@/shared/types/domain-types';\nimport { Play } from '/@/shared/types/types';\n\nconst isFullWidthRow = (node: RowNode) => {\n    return node.id?.startsWith('disc-');\n};\n\nconst ContentContainer = styled.div`\n    position: relative;\n    z-index: 0;\n`;\n\nconst DetailContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    padding: 1rem 2rem 5rem;\n    overflow: hidden;\n`;\n\ninterface AlbumDetailContentProps {\n    background?: string;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const AlbumDetailContent = ({ background, tableRef }: AlbumDetailContentProps) => {\n    const { t } = useTranslation();\n    const { albumId } = useParams() as { albumId: string };\n    const server = useCurrentServer();\n    const detailQuery = useAlbumDetail({ query: { id: albumId }, serverId: server?.id });\n    const cq = useContainerQuery();\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const tableConfig = useTableSettings('albumDetail');\n    const { setTable } = useSettingsStoreActions();\n    const status = useCurrentStatus();\n    const isFocused = useAppFocus();\n    const currentSong = useCurrentSong();\n    const { externalLinks, lastFM, musicBrainz } = useGeneralSettings();\n    const genreRoute = useGenreRoute();\n\n    const columnDefs = useMemo(\n        () => getColumnDefs(tableConfig.columns, false, 'albumDetail'),\n        [tableConfig.columns],\n    );\n\n    const getRowHeight = useCallback(\n        (params: RowHeightParams) => {\n            if (isFullWidthRow(params.node)) {\n                return 45;\n            }\n\n            return tableConfig.rowHeight;\n        },\n        [tableConfig.rowHeight],\n    );\n\n    const songsRowData = useMemo(() => {\n        if (!detailQuery.data?.songs) {\n            return [];\n        }\n\n        let discNumber = -1;\n        let discSubtitle: null | string = null;\n\n        const rowData: (QueueSong | { id: string; name: string })[] = [];\n        const discTranslated = t('common.disc', { postProcess: 'upperCase' });\n\n        for (const song of detailQuery.data.songs) {\n            if (song.discNumber !== discNumber || song.discSubtitle !== discSubtitle) {\n                discNumber = song.discNumber;\n                discSubtitle = song.discSubtitle;\n\n                let id = `disc-${discNumber}`;\n                let name = `${discTranslated} ${discNumber}`;\n\n                if (discSubtitle) {\n                    id += `-${discSubtitle}`;\n                    name += `: ${discSubtitle}`;\n                }\n\n                rowData.push({ id, name });\n            }\n            rowData.push(song);\n        }\n\n        return rowData;\n    }, [detailQuery.data?.songs, t]);\n\n    const [pagination, setPagination] = useSetState({\n        artist: 0,\n    });\n\n    const handleNextPage = useCallback(\n        (key: 'artist') => {\n            setPagination({\n                [key]: pagination[key as keyof typeof pagination] + 1,\n            });\n        },\n        [pagination, setPagination],\n    );\n\n    const handlePreviousPage = useCallback(\n        (key: 'artist') => {\n            setPagination({\n                [key]: pagination[key as keyof typeof pagination] - 1,\n            });\n        },\n        [pagination, setPagination],\n    );\n\n    const artistQuery = useAlbumList({\n        options: {\n            cacheTime: 1000 * 60,\n            enabled: detailQuery?.data?.albumArtists[0]?.id !== undefined,\n            keepPreviousData: true,\n            staleTime: 1000 * 60,\n        },\n        query: {\n            _custom: {\n                jellyfin: {\n                    ExcludeItemIds: detailQuery?.data?.id,\n                },\n            },\n            artistIds: detailQuery?.data?.albumArtists.length\n                ? [detailQuery?.data?.albumArtists[0].id]\n                : undefined,\n            limit: 15,\n            sortBy: AlbumListSort.YEAR,\n            sortOrder: SortOrder.DESC,\n            startIndex: 0,\n        },\n        serverId: server?.id,\n    });\n\n    const relatedAlbumGenresRequest: AlbumListQuery = {\n        genres: detailQuery.data?.genres.length ? [detailQuery.data.genres[0].id] : undefined,\n        limit: 15,\n        sortBy: AlbumListSort.RANDOM,\n        sortOrder: SortOrder.ASC,\n        startIndex: 0,\n    };\n\n    const relatedAlbumGenresQuery = useAlbumList({\n        options: {\n            cacheTime: 1000 * 60,\n            enabled: !!detailQuery?.data?.genres?.[0],\n            queryKey: queryKeys.albums.related(\n                server?.id || '',\n                albumId,\n                relatedAlbumGenresRequest,\n            ),\n            staleTime: 1000 * 60,\n        },\n        query: relatedAlbumGenresRequest,\n        serverId: server?.id,\n    });\n\n    const carousels = [\n        {\n            data: artistQuery?.data?.items.filter((a) => a.id !== detailQuery?.data?.id),\n            isHidden: !artistQuery?.data?.items.filter((a) => a.id !== detailQuery?.data?.id)\n                .length,\n            loading: artistQuery?.isLoading || artistQuery.isFetching,\n            pagination: {\n                handleNextPage: () => handleNextPage('artist'),\n                handlePreviousPage: () => handlePreviousPage('artist'),\n                hasPreviousPage: pagination.artist > 0,\n            },\n            title: t('page.albumDetail.moreFromArtist', { postProcess: 'sentenceCase' }),\n            uniqueId: 'mostPlayed',\n        },\n        {\n            data: relatedAlbumGenresQuery?.data?.items.filter(\n                (a) => a.id !== detailQuery?.data?.id,\n            ),\n            isHidden: !relatedAlbumGenresQuery?.data?.items.filter(\n                (a) => a.id !== detailQuery?.data?.id,\n            ).length,\n            loading: relatedAlbumGenresQuery?.isLoading || relatedAlbumGenresQuery.isFetching,\n            title: t('page.albumDetail.moreFromGeneric', {\n                item: detailQuery?.data?.genres?.[0]?.name,\n                postProcess: 'sentenceCase',\n            }),\n            uniqueId: 'relatedGenres',\n        },\n    ];\n    const playButtonBehavior = usePlayButtonBehavior();\n\n    const handlePlay = async (playType?: Play) => {\n        handlePlayQueueAdd?.({\n            byData: detailQuery?.data?.songs,\n            playType: playType || playButtonBehavior,\n        });\n    };\n\n    const onCellContextMenu = useHandleTableContextMenu(LibraryItem.SONG, SONG_CONTEXT_MENU_ITEMS);\n\n    const handleRowDoubleClick = (e: RowDoubleClickedEvent<QueueSong>) => {\n        if (!e.data || e.node.isFullWidthCell()) return;\n\n        const rowData: QueueSong[] = [];\n        e.api.forEachNode((node) => {\n            if (!node.data || node.isFullWidthCell()) return;\n            rowData.push(node.data);\n        });\n\n        handlePlayQueueAdd?.({\n            byData: rowData,\n            initialSongId: e.data.id,\n            playType: playButtonBehavior,\n        });\n    };\n\n    const createFavoriteMutation = useCreateFavorite({});\n    const deleteFavoriteMutation = useDeleteFavorite({});\n\n    const handleFavorite = () => {\n        if (!detailQuery?.data) return;\n\n        if (detailQuery.data.userFavorite) {\n            deleteFavoriteMutation.mutate({\n                query: {\n                    id: [detailQuery.data.id],\n                    type: LibraryItem.ALBUM,\n                },\n                serverId: detailQuery.data.serverId,\n            });\n        } else {\n            createFavoriteMutation.mutate({\n                query: {\n                    id: [detailQuery.data.id],\n                    type: LibraryItem.ALBUM,\n                },\n                serverId: detailQuery.data.serverId,\n            });\n        }\n    };\n\n    const showGenres = detailQuery?.data?.genres ? detailQuery?.data?.genres.length !== 0 : false;\n    const comment = detailQuery?.data?.comment;\n\n    const handleGeneralContextMenu = useHandleGeneralContextMenu(\n        LibraryItem.ALBUM,\n        ALBUM_CONTEXT_MENU_ITEMS,\n    );\n\n    const onColumnMoved = useCallback(() => {\n        const { columnApi } = tableRef?.current || {};\n        const columnsOrder = columnApi?.getAllGridColumns();\n\n        if (!columnsOrder) return;\n\n        const columnsInSettings = tableConfig.columns;\n        const updatedColumns: PersistedTableColumn[] = [];\n        for (const column of columnsOrder) {\n            const columnInSettings = columnsInSettings.find(\n                (c) => c.column === column.getColDef().colId,\n            );\n\n            if (columnInSettings) {\n                updatedColumns.push({\n                    ...columnInSettings,\n                    ...(!tableConfig.autoFit && {\n                        width: column.getActualWidth(),\n                    }),\n                });\n            }\n        }\n\n        setTable('albumDetail', { ...tableConfig, columns: updatedColumns });\n    }, [setTable, tableConfig, tableRef]);\n\n    const { rowClassRules } = useCurrentSongRowStyles({ tableRef });\n\n    const mbzId = detailQuery?.data?.mbzId;\n\n    return (\n        <ContentContainer>\n            <LibraryBackgroundOverlay $backgroundColor={background} />\n            <DetailContainer>\n                <Box component=\"section\">\n                    <Group\n                        position=\"apart\"\n                        spacing=\"sm\"\n                    >\n                        <Group>\n                            <PlayButton onClick={() => handlePlay(playButtonBehavior)} />\n                            <Button\n                                compact\n                                loading={\n                                    createFavoriteMutation.isLoading ||\n                                    deleteFavoriteMutation.isLoading\n                                }\n                                onClick={handleFavorite}\n                                variant=\"subtle\"\n                            >\n                                {detailQuery?.data?.userFavorite ? (\n                                    <RiHeartFill\n                                        color=\"red\"\n                                        size={20}\n                                    />\n                                ) : (\n                                    <RiHeartLine size={20} />\n                                )}\n                            </Button>\n                            <Button\n                                compact\n                                onClick={(e) => {\n                                    if (!detailQuery?.data) return;\n                                    handleGeneralContextMenu(e, [detailQuery.data!]);\n                                }}\n                                variant=\"subtle\"\n                            >\n                                <RiMoreFill size={20} />\n                            </Button>\n                        </Group>\n\n                        <Popover position=\"bottom-end\">\n                            <Popover.Target>\n                                <Button\n                                    compact\n                                    size=\"md\"\n                                    variant=\"subtle\"\n                                >\n                                    <RiSettings2Fill size={20} />\n                                </Button>\n                            </Popover.Target>\n                            <Popover.Dropdown>\n                                <TableConfigDropdown type=\"albumDetail\" />\n                            </Popover.Dropdown>\n                        </Popover>\n                    </Group>\n                </Box>\n                {showGenres && (\n                    <Box component=\"section\">\n                        <Group spacing=\"sm\">\n                            {detailQuery?.data?.genres?.map((genre) => (\n                                <Button\n                                    compact\n                                    component={Link}\n                                    key={`genre-${genre.id}`}\n                                    radius={0}\n                                    size=\"md\"\n                                    to={generatePath(genreRoute, {\n                                        genreId: genre.id,\n                                    })}\n                                    variant=\"outline\"\n                                >\n                                    {genre.name}\n                                </Button>\n                            ))}\n                        </Group>\n                    </Box>\n                )}\n                {externalLinks && (lastFM || musicBrainz) ? (\n                    <Box component=\"section\">\n                        <Group spacing=\"sm\">\n                            {lastFM && (\n                                <Button\n                                    compact\n                                    component=\"a\"\n                                    href={`https://www.last.fm/music/${encodeURIComponent(\n                                        detailQuery?.data?.albumArtist || '',\n                                    )}/${encodeURIComponent(detailQuery.data?.name || '')}`}\n                                    radius=\"md\"\n                                    rel=\"noopener noreferrer\"\n                                    size=\"md\"\n                                    target=\"_blank\"\n                                    tooltip={{\n                                        label: t('action.openIn.lastfm'),\n                                    }}\n                                    variant=\"subtle\"\n                                >\n                                    <FaLastfmSquare size={25} />\n                                </Button>\n                            )}\n                            {musicBrainz && mbzId ? (\n                                <Button\n                                    compact\n                                    component=\"a\"\n                                    href={`https://musicbrainz.org/release/${mbzId}`}\n                                    radius=\"md\"\n                                    rel=\"noopener noreferrer\"\n                                    size=\"md\"\n                                    target=\"_blank\"\n                                    tooltip={{\n                                        label: t('action.openIn.musicbrainz'),\n                                    }}\n                                    variant=\"subtle\"\n                                >\n                                    <SiMusicbrainz size={25} />\n                                </Button>\n                            ) : null}\n                        </Group>\n                    </Box>\n                ) : null}\n                {comment && (\n                    <Box component=\"section\">\n                        <Spoiler maxHeight={75}>{replaceURLWithHTMLLinks(comment)}</Spoiler>\n                    </Box>\n                )}\n                <Box style={{ minHeight: '300px' }}>\n                    <VirtualTable\n                        autoFitColumns={tableConfig.autoFit}\n                        autoHeight\n                        columnDefs={columnDefs}\n                        context={{\n                            currentSong,\n                            isFocused,\n                            itemType: LibraryItem.SONG,\n                            onCellContextMenu,\n                            status,\n                        }}\n                        enableCellChangeFlash={false}\n                        fullWidthCellRenderer={FullWidthDiscCell}\n                        getRowHeight={getRowHeight}\n                        getRowId={(data) => data.data.id}\n                        isFullWidthRow={(data) => {\n                            return isFullWidthRow(data.rowNode) || false;\n                        }}\n                        isRowSelectable={(data) => {\n                            if (isFullWidthRow(data.data)) return false;\n                            return true;\n                        }}\n                        key={`table-${tableConfig.rowHeight}`}\n                        onCellContextMenu={onCellContextMenu}\n                        onColumnMoved={onColumnMoved}\n                        onRowDoubleClicked={handleRowDoubleClick}\n                        ref={tableRef}\n                        rowClassRules={rowClassRules}\n                        rowData={songsRowData}\n                        rowSelection=\"multiple\"\n                        shouldUpdateSong\n                        stickyHeader\n                        suppressCellFocus\n                        suppressLoadingOverlay\n                        suppressRowDrag\n                    />\n                </Box>\n                <Stack\n                    mt=\"3rem\"\n                    ref={cq.ref}\n                    spacing=\"lg\"\n                >\n                    {cq.height || cq.width ? (\n                        <>\n                            {carousels\n                                .filter((c) => !c.isHidden)\n                                .map((carousel, index) => (\n                                    <MemoizedSwiperGridCarousel\n                                        cardRows={[\n                                            {\n                                                property: 'name',\n                                                route: {\n                                                    route: AppRoute.LIBRARY_ALBUMS_DETAIL,\n                                                    slugs: [\n                                                        {\n                                                            idProperty: 'id',\n                                                            slugProperty: 'albumId',\n                                                        },\n                                                    ],\n                                                },\n                                            },\n                                            {\n                                                arrayProperty: 'name',\n                                                property: 'albumArtists',\n                                                route: {\n                                                    route: AppRoute.LIBRARY_ALBUM_ARTISTS_DETAIL,\n                                                    slugs: [\n                                                        {\n                                                            idProperty: 'id',\n                                                            slugProperty: 'albumArtistId',\n                                                        },\n                                                    ],\n                                                },\n                                            },\n                                        ]}\n                                        data={carousel.data}\n                                        isLoading={carousel.loading}\n                                        itemType={LibraryItem.ALBUM}\n                                        key={`carousel-${carousel.uniqueId}-${index}`}\n                                        route={{\n                                            route: AppRoute.LIBRARY_ALBUMS_DETAIL,\n                                            slugs: [{ idProperty: 'id', slugProperty: 'albumId' }],\n                                        }}\n                                        title={{\n                                            label: carousel.title,\n                                        }}\n                                        uniqueId={carousel.uniqueId}\n                                    />\n                                ))}\n                        </>\n                    ) : null}\n                </Stack>\n            </DetailContainer>\n        </ContentContainer>\n    );\n};\n","import { Group, Stack } from '@mantine/core';\nimport { forwardRef, Fragment, Ref, useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { generatePath, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { Rating, Text } from '/@/renderer/components';\nimport { useAlbumDetail } from '/@/renderer/features/albums/queries/album-detail-query';\nimport { LibraryHeader, useSetRating } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useSongChange } from '/@/renderer/hooks/use-song-change';\nimport { queryClient } from '/@/renderer/lib/react-query';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer } from '/@/renderer/store';\nimport { formatDateAbsoluteUTC, formatDurationString } from '/@/renderer/utils';\nimport { AlbumDetailResponse, LibraryItem, ServerType } from '/@/shared/types/domain-types';\n\ninterface AlbumDetailHeaderProps {\n    background: {\n        background: string;\n        blur: number;\n    };\n}\n\nexport const AlbumDetailHeader = forwardRef(\n    ({ background }: AlbumDetailHeaderProps, ref: Ref<HTMLDivElement>) => {\n        const { albumId } = useParams() as { albumId: string };\n        const server = useCurrentServer();\n        const detailQuery = useAlbumDetail({ query: { id: albumId }, serverId: server?.id });\n        const cq = useContainerQuery();\n        const { t } = useTranslation();\n\n        const showRating = detailQuery?.data?.serverType === ServerType.NAVIDROME;\n\n        const originalDifferentFromRelease =\n            detailQuery.data?.originalDate &&\n            detailQuery.data.originalDate !== detailQuery.data.releaseDate;\n\n        const releasePrefix = originalDifferentFromRelease\n            ? t('page.albumDetail.released', { postProcess: 'sentenceCase' })\n            : '♫';\n\n        const songIds = useMemo(() => {\n            return new Set(detailQuery.data?.songs?.map((song) => song.id));\n        }, [detailQuery.data?.songs]);\n\n        const handleSongChange = useCallback(\n            (id: string) => {\n                if (songIds.has(id)) {\n                    const queryKey = queryKeys.albums.detail(server?.id, { id: albumId });\n                    queryClient.setQueryData<AlbumDetailResponse | undefined>(\n                        queryKey,\n                        (previous) => {\n                            if (!previous) return undefined;\n\n                            return {\n                                ...previous,\n                                playCount: previous.playCount ? previous.playCount + 1 : 1,\n                            };\n                        },\n                    );\n                }\n            },\n            [albumId, server?.id, songIds],\n        );\n\n        useSongChange((ids, event) => {\n            if (event.event === 'play') {\n                handleSongChange(ids[0]);\n            }\n        }, detailQuery.data !== undefined);\n\n        const metadataItems = [\n            {\n                id: 'releaseDate',\n                value:\n                    detailQuery?.data?.releaseDate &&\n                    `${releasePrefix} ${formatDateAbsoluteUTC(detailQuery?.data?.releaseDate)}`,\n            },\n            {\n                id: 'songCount',\n                value: `${detailQuery?.data?.songCount} ${t('entity.track_other', {\n                    count: detailQuery?.data?.songCount as number,\n                })}`,\n            },\n            {\n                id: 'duration',\n                value:\n                    detailQuery?.data?.duration && formatDurationString(detailQuery.data.duration),\n            },\n            {\n                id: 'playCount',\n                value: t('entity.play', {\n                    count: detailQuery?.data?.playCount as number,\n                }),\n            },\n        ];\n\n        if (originalDifferentFromRelease) {\n            const formatted = `♫ ${formatDateAbsoluteUTC(detailQuery!.data!.originalDate)}`;\n            metadataItems.splice(0, 0, {\n                id: 'originalDate',\n                value: formatted,\n            });\n        }\n\n        const updateRatingMutation = useSetRating({});\n\n        const handleUpdateRating = (rating: number) => {\n            if (!detailQuery?.data) return;\n\n            updateRatingMutation.mutate({\n                query: {\n                    item: [detailQuery.data],\n                    rating,\n                },\n                serverId: detailQuery.data.serverId,\n            });\n        };\n\n        return (\n            <Stack ref={cq.ref}>\n                <LibraryHeader\n                    imageUrl={detailQuery?.data?.imageUrl}\n                    item={{ route: AppRoute.LIBRARY_ALBUMS, type: LibraryItem.ALBUM }}\n                    ref={ref}\n                    title={detailQuery?.data?.name || ''}\n                    {...background}\n                >\n                    <Stack spacing=\"sm\">\n                        <Group spacing=\"sm\">\n                            {metadataItems.map((item, index) => (\n                                <Fragment key={`item-${item.id}-${index}`}>\n                                    {index > 0 && <Text $noSelect>•</Text>}\n                                    <Text>{item.value}</Text>\n                                </Fragment>\n                            ))}\n                            {showRating && (\n                                <>\n                                    <Text $noSelect>•</Text>\n                                    <Rating\n                                        onChange={handleUpdateRating}\n                                        readOnly={\n                                            detailQuery?.isFetching ||\n                                            updateRatingMutation.isLoading\n                                        }\n                                        value={detailQuery?.data?.userRating || 0}\n                                    />\n                                </>\n                            )}\n                        </Group>\n                        <Group\n                            mah=\"4rem\"\n                            spacing=\"md\"\n                            sx={{\n                                overflow: 'hidden',\n                                WebkitBoxOrient: 'vertical',\n                                WebkitLineClamp: 2,\n                            }}\n                        >\n                            {detailQuery?.data?.albumArtists.map((artist) => (\n                                <Text\n                                    $link\n                                    component={Link}\n                                    fw={600}\n                                    key={`artist-${artist.id}`}\n                                    to={generatePath(AppRoute.LIBRARY_ALBUM_ARTISTS_DETAIL, {\n                                        albumArtistId: artist.id,\n                                    })}\n                                    variant=\"subtle\"\n                                >\n                                    {artist.name}\n                                </Text>\n                            ))}\n                        </Group>\n                    </Stack>\n                </LibraryHeader>\n            </Stack>\n        );\n    },\n);\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { useRef } from 'react';\nimport { useParams } from 'react-router';\n\nimport { NativeScrollArea, Spinner } from '/@/renderer/components';\nimport { AlbumDetailContent } from '/@/renderer/features/albums/components/album-detail-content';\nimport { AlbumDetailHeader } from '/@/renderer/features/albums/components/album-detail-header';\nimport { useAlbumDetail } from '/@/renderer/features/albums/queries/album-detail-query';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { AnimatedPage, LibraryHeaderBar } from '/@/renderer/features/shared';\nimport { useFastAverageColor } from '/@/renderer/hooks';\nimport { useCurrentServer, useGeneralSettings } from '/@/renderer/store';\nimport { usePlayButtonBehavior } from '/@/renderer/store/settings.store';\nimport { LibraryItem } from '/@/shared/types/domain-types';\n\nconst AlbumDetailRoute = () => {\n    const tableRef = useRef<AgGridReactType | null>(null);\n    const scrollAreaRef = useRef<HTMLDivElement>(null);\n    const headerRef = useRef<HTMLDivElement>(null);\n    const { albumBackground, albumBackgroundBlur } = useGeneralSettings();\n\n    const { albumId } = useParams() as { albumId: string };\n    const server = useCurrentServer();\n    const detailQuery = useAlbumDetail({ query: { id: albumId }, serverId: server?.id });\n    const { color: backgroundColor, colorId } = useFastAverageColor({\n        id: albumId,\n        src: detailQuery.data?.imageUrl,\n        srcLoaded: !detailQuery.isLoading,\n    });\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const playButtonBehavior = usePlayButtonBehavior();\n\n    const handlePlay = () => {\n        handlePlayQueueAdd?.({\n            byItemType: {\n                id: [albumId],\n                type: LibraryItem.ALBUM,\n            },\n            playType: playButtonBehavior,\n        });\n    };\n\n    if (!backgroundColor || colorId !== albumId) {\n        return <Spinner container />;\n    }\n\n    const backgroundUrl = detailQuery.data?.imageUrl || '';\n    const background = (albumBackground && `url(${backgroundUrl})`) || backgroundColor;\n\n    return (\n        <AnimatedPage key={`album-detail-${albumId}`}>\n            <NativeScrollArea\n                pageHeaderProps={{\n                    backgroundColor: backgroundColor || undefined,\n                    children: (\n                        <LibraryHeaderBar>\n                            <LibraryHeaderBar.PlayButton onClick={handlePlay} />\n                            <LibraryHeaderBar.Title>\n                                {detailQuery?.data?.name}\n                            </LibraryHeaderBar.Title>\n                        </LibraryHeaderBar>\n                    ),\n                    offset: 200,\n                    target: headerRef,\n                }}\n                ref={scrollAreaRef}\n            >\n                <AlbumDetailHeader\n                    background={{\n                        background,\n                        blur: (albumBackground && albumBackgroundBlur) || 0,\n                    }}\n                    ref={headerRef}\n                />\n                <AlbumDetailContent\n                    background={background}\n                    tableRef={tableRef}\n                />\n            </NativeScrollArea>\n        </AnimatedPage>\n    );\n};\n\nexport default AlbumDetailRoute;\n"],"names":["getNodesByDiscNumber","args","api","discNumber","subtitle","nodes","node","setNodeSelection","isSelected","useAlbumDetail","options","query","serverId","server","getServerById","useQuery","signal","controller","queryKeys","Container","styled","Paper","FullWidthDiscCell","data","setIsSelected","useState","handleToggleDiscNodes","split","prev","jsx","Group","Button","RiCheckboxLine","RiCheckboxBlankLine","isFullWidthRow","_a","ContentContainer","DetailContainer","AlbumDetailContent","background","tableRef","t","useTranslation","albumId","useParams","useCurrentServer","detailQuery","cq","useContainerQuery","handlePlayQueueAdd","usePlayQueueAdd","tableConfig","useTableSettings","setTable","useSettingsStoreActions","status","useCurrentStatus","isFocused","useAppFocus","currentSong","useCurrentSong","externalLinks","lastFM","musicBrainz","useGeneralSettings","genreRoute","useGenreRoute","columnDefs","useMemo","getColumnDefs","getRowHeight","useCallback","params","songsRowData","discSubtitle","rowData","discTranslated","song","id","name","pagination","setPagination","useSetState","handleNextPage","key","handlePreviousPage","artistQuery","useAlbumList","_c","_b","_d","_e","_f","AlbumListSort","SortOrder","relatedAlbumGenresRequest","_g","relatedAlbumGenresQuery","_i","_h","carousels","_j","_k","_l","_m","_p","_o","_n","playButtonBehavior","usePlayButtonBehavior","handlePlay","playType","onCellContextMenu","useHandleTableContextMenu","LibraryItem","SONG_CONTEXT_MENU_ITEMS","handleRowDoubleClick","e","createFavoriteMutation","useCreateFavorite","deleteFavoriteMutation","useDeleteFavorite","handleFavorite","showGenres","_q","_r","comment","_s","handleGeneralContextMenu","useHandleGeneralContextMenu","ALBUM_CONTEXT_MENU_ITEMS","onColumnMoved","columnApi","columnsOrder","columnsInSettings","updatedColumns","column","columnInSettings","c","rowClassRules","useCurrentSongRowStyles","mbzId","_t","LibraryBackgroundOverlay","Box","jsxs","PlayButton","_u","RiHeartFill","RiHeartLine","RiMoreFill","Popover","RiSettings2Fill","TableConfigDropdown","_w","_v","genre","Link","generatePath","_x","_y","FaLastfmSquare","SiMusicbrainz","Spoiler","replaceURLWithHTMLLinks","VirtualTable","Stack","Fragment","carousel","index","MemoizedSwiperGridCarousel","AppRoute","AlbumDetailHeader","forwardRef","ref","showRating","ServerType","originalDifferentFromRelease","releasePrefix","songIds","handleSongChange","queryKey","queryClient","previous","useSongChange","ids","event","metadataItems","formatDateAbsoluteUTC","formatDurationString","formatted","updateRatingMutation","useSetRating","handleUpdateRating","rating","LibraryHeader","item","Text","Rating","artist","AlbumDetailRoute","useRef","scrollAreaRef","headerRef","albumBackground","albumBackgroundBlur","backgroundColor","colorId","useFastAverageColor","Spinner","backgroundUrl","AnimatedPage","NativeScrollArea","LibraryHeaderBar"],"mappings":"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"}