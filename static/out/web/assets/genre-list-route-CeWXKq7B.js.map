{"version":3,"mappings":"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","names":["GenreListGridView","lazy","module","GenreListTableView","GenreListContent","gridRef","itemCount","tableRef","pageKey","useListContext","display","useListStoreByKey","jsx","Suspense","Spinner","ListDisplayType","FILTERS","SortOrder","i18n","GenreListSort","GenreListHeaderFilters","t","useTranslation","queryClient","useQueryClient","customFilters","server","useCurrentServer","setDisplayType","setFilter","setGrid","setTable","useListStoreActions","filter","grid","table","cq","useContainerQuery","genreTarget","useGeneralSettings","setGenreBehavior","useSettingsStoreActions","handleRefreshGrid","handleRefreshTable","useListFilterRefresh","LibraryItem","musicFoldersQuery","useMusicFolders","sortByLabel","_a","f","isGrid","onFilterChange","useCallback","handleRefresh","queryKeys","handleSetSortBy","e","sortOrder","_b","updatedFilters","handleSetMusicFolder","handleToggleSortOrder","newSortOrder","handleItemSize","handleItemGap","handleSetViewType","handleTableColumns","values","existingColumns","newColumn","removed","column","newColumns","handleAutoFitColumns","isFolderFilterApplied","useMemo","handleGenreToggle","newState","GenreTarget","jsxs","Flex","Group","DropdownMenu","Button","Divider","OrderToggleButton","ServerType","Fragment","RiFolder2Fill","folder","RiRefreshLine","RiMoreFill","RiAlbumLine","RiMusic2Line","RiSettings3Fill","Slider","Stack","MultiSelect","GENRE_TABLE_COLUMNS","Text","Switch","GenreListHeader","refresh","search","useDisplayRefresh","handleSearch","debounce","PageHeader","LibraryHeaderBar","SearchInput","FilterBar","GenreListRoute","useRef","itemCountCheck","useGenreList","providerValue","AnimatedPage","ListContext"],"ignoreList":[],"sources":["../../../src/renderer/features/genres/components/genre-list-content.tsx","../../../src/renderer/features/genres/components/genre-list-header-filters.tsx","../../../src/renderer/features/genres/components/genre-list-header.tsx","../../../src/renderer/features/genres/routes/genre-list-route.tsx"],"sourcesContent":["import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { lazy, MutableRefObject, Suspense } from 'react';\n\nimport { Spinner } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { useListStoreByKey } from '/@/renderer/store';\nimport { ListDisplayType } from '/@/shared/types/types';\n\nconst GenreListGridView = lazy(() =>\n    import('/@/renderer/features/genres/components/genre-list-grid-view').then((module) => ({\n        default: module.GenreListGridView,\n    })),\n);\n\nconst GenreListTableView = lazy(() =>\n    import('/@/renderer/features/genres/components/genre-list-table-view').then((module) => ({\n        default: module.GenreListTableView,\n    })),\n);\n\ninterface AlbumListContentProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const GenreListContent = ({ gridRef, itemCount, tableRef }: AlbumListContentProps) => {\n    const { pageKey } = useListContext();\n    const { display } = useListStoreByKey({ key: pageKey });\n\n    return (\n        <Suspense fallback={<Spinner container />}>\n            {display === ListDisplayType.CARD || display === ListDisplayType.POSTER ? (\n                <GenreListGridView\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                />\n            ) : (\n                <GenreListTableView\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            )}\n        </Suspense>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { Divider, Flex, Group, Stack } from '@mantine/core';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { ChangeEvent, MouseEvent, MutableRefObject, useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    RiAlbumLine,\n    RiFolder2Fill,\n    RiMoreFill,\n    RiMusic2Line,\n    RiRefreshLine,\n    RiSettings3Fill,\n} from 'react-icons/ri';\n\nimport i18n from '/@/i18n/i18n';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { Button, DropdownMenu, MultiSelect, Slider, Switch, Text } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { GENRE_TABLE_COLUMNS } from '/@/renderer/components/virtual-table';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { OrderToggleButton, useMusicFolders } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useListFilterRefresh } from '/@/renderer/hooks/use-list-filter-refresh';\nimport {\n    GenreListFilter,\n    GenreTarget,\n    useCurrentServer,\n    useGeneralSettings,\n    useListStoreActions,\n    useListStoreByKey,\n    useSettingsStoreActions,\n} from '/@/renderer/store';\nimport {\n    GenreListQuery,\n    GenreListSort,\n    LibraryItem,\n    ServerType,\n    SortOrder,\n} from '/@/shared/types/domain-types';\nimport { ListDisplayType, TableColumn } from '/@/shared/types/types';\n\nconst FILTERS = {\n    jellyfin: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: GenreListSort.NAME,\n        },\n    ],\n    navidrome: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: GenreListSort.NAME,\n        },\n    ],\n    subsonic: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: GenreListSort.NAME,\n        },\n    ],\n};\n\ninterface GenreListHeaderFiltersProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount: number | undefined;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const GenreListHeaderFilters = ({\n    gridRef,\n    itemCount,\n    tableRef,\n}: GenreListHeaderFiltersProps) => {\n    const { t } = useTranslation();\n    const queryClient = useQueryClient();\n    const { customFilters, pageKey } = useListContext();\n    const server = useCurrentServer();\n    const { setDisplayType, setFilter, setGrid, setTable } = useListStoreActions();\n    const { display, filter, grid, table } = useListStoreByKey<GenreListQuery>({ key: pageKey });\n    const cq = useContainerQuery();\n    const { genreTarget } = useGeneralSettings();\n    const { setGenreBehavior } = useSettingsStoreActions();\n\n    const { handleRefreshGrid, handleRefreshTable } = useListFilterRefresh({\n        itemCount,\n        itemType: LibraryItem.GENRE,\n        server,\n    });\n\n    const musicFoldersQuery = useMusicFolders({ query: null, serverId: server?.id });\n\n    const sortByLabel =\n        (server?.type &&\n            FILTERS[server.type as keyof typeof FILTERS].find((f) => f.value === filter.sortBy)\n                ?.name) ||\n        'Unknown';\n\n    const isGrid = display === ListDisplayType.CARD || display === ListDisplayType.POSTER;\n\n    const onFilterChange = useCallback(\n        (filter: GenreListFilter) => {\n            if (isGrid) {\n                handleRefreshGrid(gridRef, {\n                    ...filter,\n                    ...customFilters,\n                });\n            } else {\n                handleRefreshTable(tableRef, {\n                    ...filter,\n                    ...customFilters,\n                });\n            }\n        },\n        [customFilters, gridRef, handleRefreshGrid, handleRefreshTable, isGrid, tableRef],\n    );\n\n    const handleRefresh = useCallback(() => {\n        queryClient.invalidateQueries(queryKeys.genres.list(server?.id || ''));\n        onFilterChange(filter);\n    }, [filter, onFilterChange, queryClient, server?.id]);\n\n    const handleSetSortBy = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value || !server?.type) return;\n\n            const sortOrder = FILTERS[server.type as keyof typeof FILTERS].find(\n                (f) => f.value === e.currentTarget.value,\n            )?.defaultOrder;\n\n            const updatedFilters = setFilter({\n                customFilters,\n                data: {\n                    sortBy: e.currentTarget.value as GenreListSort,\n                    sortOrder: sortOrder || SortOrder.ASC,\n                },\n                itemType: LibraryItem.GENRE,\n                key: pageKey,\n            }) as GenreListFilter;\n\n            onFilterChange(updatedFilters);\n        },\n        [customFilters, onFilterChange, pageKey, server?.type, setFilter],\n    );\n\n    const handleSetMusicFolder = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value) return;\n\n            let updatedFilters: GenreListFilter | null = null;\n            if (e.currentTarget.value === String(filter.musicFolderId)) {\n                updatedFilters = setFilter({\n                    customFilters,\n                    data: { musicFolderId: undefined },\n                    itemType: LibraryItem.GENRE,\n                    key: pageKey,\n                }) as GenreListFilter;\n            } else {\n                updatedFilters = setFilter({\n                    customFilters,\n                    data: { musicFolderId: e.currentTarget.value },\n                    itemType: LibraryItem.GENRE,\n                    key: pageKey,\n                }) as GenreListFilter;\n            }\n\n            onFilterChange(updatedFilters);\n        },\n        [filter.musicFolderId, onFilterChange, setFilter, customFilters, pageKey],\n    );\n\n    const handleToggleSortOrder = useCallback(() => {\n        const newSortOrder = filter.sortOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n        const updatedFilters = setFilter({\n            customFilters,\n            data: { sortOrder: newSortOrder },\n            itemType: LibraryItem.GENRE,\n            key: pageKey,\n        }) as GenreListFilter;\n        onFilterChange(updatedFilters);\n    }, [customFilters, filter.sortOrder, onFilterChange, pageKey, setFilter]);\n\n    const handleItemSize = (e: number) => {\n        if (isGrid) {\n            setGrid({ data: { itemSize: e }, key: pageKey });\n        } else {\n            setTable({ data: { rowHeight: e }, key: pageKey });\n        }\n    };\n\n    const handleItemGap = (e: number) => {\n        setGrid({ data: { itemGap: e }, key: pageKey });\n    };\n\n    const handleSetViewType = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value) return;\n            setDisplayType({ data: e.currentTarget.value as ListDisplayType, key: pageKey });\n        },\n        [pageKey, setDisplayType],\n    );\n\n    const handleTableColumns = (values: TableColumn[]) => {\n        const existingColumns = table.columns;\n\n        if (values.length === 0) {\n            return setTable({\n                data: { columns: [] },\n                key: pageKey,\n            });\n        }\n\n        // If adding a column\n        if (values.length > existingColumns.length) {\n            const newColumn = { column: values[values.length - 1], width: 100 };\n\n            setTable({ data: { columns: [...existingColumns, newColumn] }, key: pageKey });\n        } else {\n            // If removing a column\n            const removed = existingColumns.filter((column) => !values.includes(column.column));\n            const newColumns = existingColumns.filter((column) => !removed.includes(column));\n\n            setTable({ data: { columns: newColumns }, key: pageKey });\n        }\n\n        return tableRef.current?.api.sizeColumnsToFit();\n    };\n\n    const handleAutoFitColumns = (e: ChangeEvent<HTMLInputElement>) => {\n        setTable({ data: { autoFit: e.currentTarget.checked }, key: pageKey });\n\n        if (e.currentTarget.checked) {\n            tableRef.current?.api.sizeColumnsToFit();\n        }\n    };\n\n    const isFolderFilterApplied = useMemo(() => {\n        return filter.musicFolderId !== undefined;\n    }, [filter.musicFolderId]);\n\n    const handleGenreToggle = useCallback(() => {\n        const newState = genreTarget === GenreTarget.ALBUM ? GenreTarget.TRACK : GenreTarget.ALBUM;\n        setGenreBehavior(newState);\n    }, [genreTarget, setGenreBehavior]);\n\n    return (\n        <Flex justify=\"space-between\">\n            <Group\n                ref={cq.ref}\n                spacing=\"sm\"\n                w=\"100%\"\n            >\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            fw={600}\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            {sortByLabel}\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        {FILTERS[server?.type as keyof typeof FILTERS].map((f) => (\n                            <DropdownMenu.Item\n                                $isActive={f.value === filter.sortBy}\n                                key={`filter-${f.name}`}\n                                onClick={handleSetSortBy}\n                                value={f.value}\n                            >\n                                {f.name}\n                            </DropdownMenu.Item>\n                        ))}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n                <Divider orientation=\"vertical\" />\n                <OrderToggleButton\n                    onToggle={handleToggleSortOrder}\n                    sortOrder={filter.sortOrder}\n                />\n                {server?.type === ServerType.JELLYFIN && (\n                    <>\n                        <Divider orientation=\"vertical\" />\n                        <DropdownMenu position=\"bottom-start\">\n                            <DropdownMenu.Target>\n                                <Button\n                                    compact\n                                    fw={600}\n                                    size=\"md\"\n                                    sx={{\n                                        svg: {\n                                            fill: isFolderFilterApplied\n                                                ? 'var(--primary-color) !important'\n                                                : undefined,\n                                        },\n                                    }}\n                                    variant=\"subtle\"\n                                >\n                                    <RiFolder2Fill size=\"1.3rem\" />\n                                </Button>\n                            </DropdownMenu.Target>\n                            <DropdownMenu.Dropdown>\n                                {musicFoldersQuery.data?.items.map((folder) => (\n                                    <DropdownMenu.Item\n                                        $isActive={filter.musicFolderId === folder.id}\n                                        key={`musicFolder-${folder.id}`}\n                                        onClick={handleSetMusicFolder}\n                                        value={folder.id}\n                                    >\n                                        {folder.name}\n                                    </DropdownMenu.Item>\n                                ))}\n                            </DropdownMenu.Dropdown>\n                        </DropdownMenu>\n                    </>\n                )}\n                <Divider orientation=\"vertical\" />\n                <Button\n                    compact\n                    onClick={handleRefresh}\n                    size=\"md\"\n                    tooltip={{ label: t('common.refresh', { postProcess: 'titleCase' }) }}\n                    variant=\"subtle\"\n                >\n                    <RiRefreshLine size=\"1.3rem\" />\n                </Button>\n                <Divider orientation=\"vertical\" />\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            <RiMoreFill size={15} />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Item\n                            icon={<RiRefreshLine />}\n                            onClick={handleRefresh}\n                        >\n                            {t('common.refresh', { postProcess: 'titleCase' })}\n                        </DropdownMenu.Item>\n                    </DropdownMenu.Dropdown>\n                    <Divider orientation=\"vertical\" />\n                    <Button\n                        compact\n                        onClick={handleGenreToggle}\n                        size=\"md\"\n                        tooltip={{\n                            label: t(\n                                genreTarget === GenreTarget.ALBUM\n                                    ? 'page.genreList.showAlbums'\n                                    : 'page.genreList.showTracks',\n                                { postProcess: 'sentenceCase' },\n                            ),\n                        }}\n                        variant=\"subtle\"\n                    >\n                        {genreTarget === GenreTarget.ALBUM ? <RiAlbumLine /> : <RiMusic2Line />}\n                    </Button>\n                </DropdownMenu>\n            </Group>\n            <Group\n                noWrap\n                spacing=\"sm\"\n            >\n                <DropdownMenu\n                    position=\"bottom-end\"\n                    width={425}\n                >\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            size=\"md\"\n                            tooltip={{\n                                label: t('common.configure', { postProcess: 'titleCase' }),\n                            }}\n                            variant=\"subtle\"\n                        >\n                            <RiSettings3Fill size=\"1.3rem\" />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Label>\n                            {t('table.config.general.displayType', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.CARD}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.CARD}\n                        >\n                            {t('table.config.view.card', { postProcess: 'titleCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.POSTER}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.POSTER}\n                        >\n                            {t('table.config.view.poster', { postProcess: 'titleCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.TABLE}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.TABLE}\n                        >\n                            {t('table.config.view.table', { postProcess: 'titleCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Divider />\n                        <DropdownMenu.Label>\n                            {t('table.config.general.size', { postProcess: 'titleCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item closeMenuOnClick={false}>\n                            <Slider\n                                defaultValue={isGrid ? grid?.itemSize || 0 : table.rowHeight}\n                                max={isGrid ? 300 : 100}\n                                min={isGrid ? 100 : 25}\n                                onChangeEnd={handleItemSize}\n                            />\n                        </DropdownMenu.Item>\n                        {isGrid && (\n                            <>\n                                <DropdownMenu.Label>\n                                    {t('table.config.general.itemGap', {\n                                        postProcess: 'sentenceCase',\n                                    })}\n                                </DropdownMenu.Label>\n                                <DropdownMenu.Item closeMenuOnClick={false}>\n                                    <Slider\n                                        defaultValue={grid?.itemGap || 0}\n                                        max={30}\n                                        min={0}\n                                        onChangeEnd={handleItemGap}\n                                    />\n                                </DropdownMenu.Item>\n                            </>\n                        )}\n                        {(display === ListDisplayType.TABLE ||\n                            display === ListDisplayType.TABLE_PAGINATED) && (\n                            <>\n                                <DropdownMenu.Label>\n                                    {t('table.config.general.tableColumns', {\n                                        postProcess: 'titleCase',\n                                    })}\n                                </DropdownMenu.Label>\n                                <DropdownMenu.Item\n                                    closeMenuOnClick={false}\n                                    component=\"div\"\n                                    sx={{ cursor: 'default' }}\n                                >\n                                    <Stack>\n                                        <MultiSelect\n                                            clearable\n                                            data={GENRE_TABLE_COLUMNS}\n                                            defaultValue={table?.columns.map(\n                                                (column) => column.column,\n                                            )}\n                                            onChange={handleTableColumns}\n                                            width={300}\n                                        />\n                                        <Group position=\"apart\">\n                                            <Text>\n                                                {t('table.config.general.autoFitColumns', {\n                                                    postProcess: 'titleCase',\n                                                })}\n                                            </Text>\n                                            <Switch\n                                                defaultChecked={table.autoFit}\n                                                onChange={handleAutoFitColumns}\n                                            />\n                                        </Group>\n                                    </Stack>\n                                </DropdownMenu.Item>\n                            </>\n                        )}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </Group>\n        </Flex>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { Flex, Group, Stack } from '@mantine/core';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, MutableRefObject } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { PageHeader, SearchInput } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { GenreListHeaderFilters } from '/@/renderer/features/genres/components/genre-list-header-filters';\nimport { FilterBar, LibraryHeaderBar } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useDisplayRefresh } from '/@/renderer/hooks/use-display-refresh';\nimport { GenreListFilter, useCurrentServer } from '/@/renderer/store';\nimport { GenreListQuery, LibraryItem } from '/@/shared/types/domain-types';\n\ninterface GenreListHeaderProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const GenreListHeader = ({ gridRef, itemCount, tableRef }: GenreListHeaderProps) => {\n    const { t } = useTranslation();\n    const cq = useContainerQuery();\n    const server = useCurrentServer();\n    const { filter, refresh, search } = useDisplayRefresh<GenreListQuery>({\n        gridRef,\n        itemType: LibraryItem.GENRE,\n        server,\n        tableRef,\n    });\n\n    const handleSearch = debounce((e: ChangeEvent<HTMLInputElement>) => {\n        const updatedFilters = search(e) as GenreListFilter;\n        refresh(updatedFilters);\n    }, 500);\n\n    return (\n        <Stack\n            ref={cq.ref}\n            spacing={0}\n        >\n            <PageHeader backgroundColor=\"var(--titlebar-bg)\">\n                <Flex\n                    justify=\"space-between\"\n                    w=\"100%\"\n                >\n                    <LibraryHeaderBar>\n                        <LibraryHeaderBar.Title>\n                            {t('page.genreList.title', { postProcess: 'titleCase' })}\n                        </LibraryHeaderBar.Title>\n                        <LibraryHeaderBar.Badge\n                            isLoading={itemCount === null || itemCount === undefined}\n                        >\n                            {itemCount}\n                        </LibraryHeaderBar.Badge>\n                    </LibraryHeaderBar>\n                    <Group>\n                        <SearchInput\n                            defaultValue={filter.searchTerm}\n                            onChange={handleSearch}\n                            openedWidth={cq.isMd ? 250 : cq.isSm ? 200 : 150}\n                        />\n                    </Group>\n                </Flex>\n            </PageHeader>\n            <FilterBar>\n                <GenreListHeaderFilters\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            </FilterBar>\n        </Stack>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { useMemo, useRef } from 'react';\n\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { ListContext } from '/@/renderer/context/list-context';\nimport { GenreListContent } from '/@/renderer/features/genres/components/genre-list-content';\nimport { GenreListHeader } from '/@/renderer/features/genres/components/genre-list-header';\nimport { useGenreList } from '/@/renderer/features/genres/queries/genre-list-query';\nimport { AnimatedPage } from '/@/renderer/features/shared';\nimport { useCurrentServer } from '/@/renderer/store';\nimport { useListStoreByKey } from '/@/renderer/store/list.store';\nimport { GenreListQuery } from '/@/shared/types/domain-types';\n\nconst GenreListRoute = () => {\n    const gridRef = useRef<null | VirtualInfiniteGridRef>(null);\n    const tableRef = useRef<AgGridReactType | null>(null);\n    const server = useCurrentServer();\n    const pageKey = 'genre';\n    const { filter } = useListStoreByKey<GenreListQuery>({ key: pageKey });\n\n    const itemCountCheck = useGenreList({\n        query: {\n            ...filter,\n            limit: 1,\n            startIndex: 0,\n        },\n        serverId: server?.id,\n    });\n\n    const itemCount =\n        itemCountCheck.data?.totalRecordCount === null\n            ? undefined\n            : itemCountCheck.data?.totalRecordCount;\n\n    const providerValue = useMemo(() => {\n        return {\n            pageKey,\n        };\n    }, []);\n\n    return (\n        <AnimatedPage>\n            <ListContext.Provider value={providerValue}>\n                <GenreListHeader\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n                <GenreListContent\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            </ListContext.Provider>\n        </AnimatedPage>\n    );\n};\n\nexport default GenreListRoute;\n"],"file":"assets/genre-list-route-CeWXKq7B.js"}