{"version":3,"file":"playlist-detail-song-list-route-DMEjyaHg.js","sources":["../../../src/renderer/features/playlists/mutations/update-playlist-mutation.ts","../../../src/renderer/features/playlists/queries/playlist-detail-query.ts","../../../src/renderer/features/playlists/queries/playlist-song-list-query.ts","../../../src/renderer/features/playlists/components/playlist-detail-song-list-content.tsx","../../../src/renderer/features/playlists/components/update-playlist-form.tsx","../../../src/renderer/features/playlists/components/playlist-detail-song-list-header-filters.tsx","../../../src/renderer/features/playlists/components/playlist-detail-song-list-header.tsx","../../../src/renderer/features/playlists/components/save-as-playlist-form.tsx","../../../src/renderer/features/playlists/routes/playlist-detail-song-list-route.tsx"],"sourcesContent":["import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { AxiosError } from 'axios';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { MutationHookArgs } from '/@/renderer/lib/react-query';\nimport { getServerById } from '/@/renderer/store';\nimport { UpdatePlaylistArgs, UpdatePlaylistResponse } from '/@/shared/types/domain-types';\n\nexport const useUpdatePlaylist = (args: MutationHookArgs) => {\n    const { options } = args || {};\n    const queryClient = useQueryClient();\n\n    return useMutation<\n        UpdatePlaylistResponse,\n        AxiosError,\n        Omit<UpdatePlaylistArgs, 'apiClientProps' | 'server'>,\n        null\n    >({\n        mutationFn: (args) => {\n            const server = getServerById(args.serverId);\n            if (!server) throw new Error('Server not found');\n            return api.controller.updatePlaylist({ ...args, apiClientProps: { server } });\n        },\n        onSuccess: (_data, variables) => {\n            const { query, serverId } = variables;\n\n            if (!serverId) return;\n\n            queryClient.invalidateQueries(queryKeys.playlists.list(serverId));\n\n            if (query?.id) {\n                queryClient.invalidateQueries(queryKeys.playlists.detail(serverId, query.id));\n            }\n        },\n        ...options,\n    });\n};\n","import type { QueryHookArgs } from '/@/renderer/lib/react-query';\nimport type { PlaylistDetailQuery } from '/@/shared/types/domain-types';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { getServerById } from '/@/renderer/store';\n\nexport const usePlaylistDetail = (args: QueryHookArgs<PlaylistDetailQuery>) => {\n    const { options, query, serverId } = args || {};\n    const server = getServerById(serverId);\n\n    return useQuery({\n        enabled: !!server?.id,\n        queryFn: ({ signal }) => {\n            if (!server) throw new Error('Server not found');\n            return api.controller.getPlaylistDetail({ apiClientProps: { server, signal }, query });\n        },\n        queryKey: queryKeys.playlists.detail(server?.id || '', query.id, query),\n        ...options,\n    });\n};\n","import type { QueryHookArgs } from '/@/renderer/lib/react-query';\nimport type { PlaylistSongListQuery } from '/@/shared/types/domain-types';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { getServerById } from '/@/renderer/store';\n\nexport const usePlaylistSongList = (args: QueryHookArgs<PlaylistSongListQuery>) => {\n    const { options, query, serverId } = args || {};\n    const server = getServerById(serverId);\n\n    return useQuery({\n        enabled: !!server,\n        queryFn: ({ signal }) => {\n            if (!server) throw new Error('Server not found');\n            return api.controller.getPlaylistSongList({\n                apiClientProps: { server, signal },\n                query,\n            });\n        },\n        queryKey: queryKeys.playlists.songList(server?.id || '', query.id, query),\n        ...options,\n    });\n};\n","import type {\n    BodyScrollEvent,\n    ColDef,\n    GridReadyEvent,\n    IDatasource,\n    PaginationChangedEvent,\n    RowDoubleClickedEvent,\n    RowDragEvent,\n} from '@ag-grid-community/core';\nimport type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { useQueryClient } from '@tanstack/react-query';\nimport { AnimatePresence } from 'framer-motion';\nimport debounce from 'lodash/debounce';\nimport { MutableRefObject, useCallback, useMemo } from 'react';\nimport { useParams } from 'react-router';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { toast } from '/@/renderer/components';\nimport { VirtualGridAutoSizerContainer } from '/@/renderer/components/virtual-grid';\nimport { getColumnDefs, TablePagination, VirtualTable } from '/@/renderer/components/virtual-table';\nimport { useCurrentSongRowStyles } from '/@/renderer/components/virtual-table/hooks/use-current-song-row-styles';\nimport { useHandleTableContextMenu } from '/@/renderer/features/context-menu';\nimport {\n    PLAYLIST_SONG_CONTEXT_MENU_ITEMS,\n    SMART_PLAYLIST_SONG_CONTEXT_MENU_ITEMS,\n} from '/@/renderer/features/context-menu/context-menu-items';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { usePlaylistDetail } from '/@/renderer/features/playlists/queries/playlist-detail-query';\nimport { usePlaylistSongList } from '/@/renderer/features/playlists/queries/playlist-song-list-query';\nimport { useAppFocus } from '/@/renderer/hooks';\nimport {\n    useCurrentServer,\n    useCurrentSong,\n    useCurrentStatus,\n    usePlaylistDetailStore,\n    usePlaylistDetailTablePagination,\n    useSetPlaylistDetailTable,\n    useSetPlaylistDetailTablePagination,\n} from '/@/renderer/store';\nimport { PersistedTableColumn, usePlayButtonBehavior } from '/@/renderer/store/settings.store';\nimport {\n    LibraryItem,\n    PlaylistSongListQuery,\n    QueueSong,\n    Song,\n    SongListSort,\n    SortOrder,\n} from '/@/shared/types/domain-types';\nimport { ListDisplayType, ServerType } from '/@/shared/types/types';\n\ninterface PlaylistDetailContentProps {\n    songs?: Song[];\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const PlaylistDetailSongListContent = ({ songs, tableRef }: PlaylistDetailContentProps) => {\n    const { playlistId } = useParams() as { playlistId: string };\n    const queryClient = useQueryClient();\n    const status = useCurrentStatus();\n    const isFocused = useAppFocus();\n    const currentSong = useCurrentSong();\n    const server = useCurrentServer();\n    const page = usePlaylistDetailStore();\n    const filters: Partial<PlaylistSongListQuery> = useMemo(() => {\n        return {\n            sortBy: page?.table.id[playlistId]?.filter?.sortBy || SongListSort.ID,\n            sortOrder: page?.table.id[playlistId]?.filter?.sortOrder || SortOrder.ASC,\n        };\n    }, [page?.table.id, playlistId]);\n\n    const detailQuery = usePlaylistDetail({ query: { id: playlistId }, serverId: server?.id });\n\n    const p = usePlaylistDetailTablePagination(playlistId);\n    const pagination = {\n        currentPage: p?.currentPage || 0,\n        itemsPerPage: p?.itemsPerPage || 100,\n        scrollOffset: p?.scrollOffset || 0,\n        totalItems: p?.totalItems || 1,\n        totalPages: p?.totalPages || 1,\n    };\n\n    const setPagination = useSetPlaylistDetailTablePagination();\n    const setTable = useSetPlaylistDetailTable();\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const playButtonBehavior = usePlayButtonBehavior();\n\n    const isPaginationEnabled = page.display === ListDisplayType.TABLE_PAGINATED;\n\n    const iSClientSide = server?.type === ServerType.SUBSONIC;\n\n    const checkPlaylistList = usePlaylistSongList({\n        options: {\n            enabled: !iSClientSide,\n        },\n        query: {\n            id: playlistId,\n            limit: 1,\n            startIndex: 0,\n        },\n        serverId: server?.id,\n    });\n\n    const columnDefs: ColDef[] = useMemo(\n        () => getColumnDefs(page.table.columns, false, 'generic'),\n        [page.table.columns],\n    );\n\n    const onGridReady = useCallback(\n        (params: GridReadyEvent) => {\n            if (!iSClientSide) {\n                const dataSource: IDatasource = {\n                    getRows: async (params) => {\n                        const limit = params.endRow - params.startRow;\n                        const startIndex = params.startRow;\n\n                        const query: PlaylistSongListQuery = {\n                            id: playlistId,\n                            limit,\n                            startIndex,\n                            ...filters,\n                        };\n\n                        const queryKey = queryKeys.playlists.songList(\n                            server?.id || '',\n                            playlistId,\n                            query,\n                        );\n\n                        if (!server) return;\n\n                        const songsRes = await queryClient.fetchQuery(\n                            queryKey,\n                            async ({ signal }) =>\n                                api.controller.getPlaylistSongList({\n                                    apiClientProps: {\n                                        server,\n                                        signal,\n                                    },\n                                    query,\n                                }),\n                        );\n\n                        params.successCallback(\n                            songsRes?.items || [],\n                            songsRes?.totalRecordCount || 0,\n                        );\n                    },\n                    rowCount: undefined,\n                };\n                params.api.setDatasource(dataSource);\n            }\n            params.api?.ensureIndexVisible(pagination.scrollOffset, 'top');\n        },\n        [filters, iSClientSide, pagination.scrollOffset, playlistId, queryClient, server],\n    );\n\n    const handleDragEnd = useCallback(\n        async (e: RowDragEvent<Song>) => {\n            if (!e.nodes.length) return;\n\n            const trackId = e.node.data?.playlistItemId;\n            if (trackId && e.node.rowIndex !== null && e.overIndex !== e.node.rowIndex) {\n                try {\n                    await api.controller.movePlaylistItem({\n                        apiClientProps: {\n                            server,\n                        },\n                        query: {\n                            endingIndex: e.overIndex,\n                            playlistId,\n                            startingIndex: e.node.rowIndex + 1,\n                            trackId,\n                        },\n                    });\n\n                    setTimeout(() => {\n                        queryClient.invalidateQueries({\n                            queryKey: queryKeys.playlists.songList(server?.id || '', playlistId),\n                        });\n                        e.api.refreshInfiniteCache();\n                    }, 200);\n                } catch (error) {\n                    toast.error({\n                        message: (error as Error).message,\n                        title: `Failed to move song ${e.node.data?.name} to ${e.overIndex}`,\n                    });\n                }\n            }\n        },\n        [playlistId, queryClient, server],\n    );\n\n    const handleGridSizeChange = () => {\n        if (page.table.autoFit) {\n            tableRef?.current?.api?.sizeColumnsToFit();\n        }\n    };\n\n    const onPaginationChanged = useCallback(\n        (event: PaginationChangedEvent) => {\n            if (!isPaginationEnabled || !event.api) return;\n\n            try {\n                // Scroll to top of page on pagination change\n                const currentPageStartIndex = pagination.currentPage * pagination.itemsPerPage;\n                event.api?.ensureIndexVisible(currentPageStartIndex, 'top');\n            } catch (err) {\n                console.log(err);\n            }\n\n            setPagination(playlistId, {\n                itemsPerPage: event.api.paginationGetPageSize(),\n                totalItems: event.api.paginationGetRowCount(),\n                totalPages: event.api.paginationGetTotalPages() + 1,\n            });\n        },\n        [\n            isPaginationEnabled,\n            pagination.currentPage,\n            pagination.itemsPerPage,\n            playlistId,\n            setPagination,\n        ],\n    );\n\n    const handleColumnChange = useCallback(() => {\n        const { columnApi } = tableRef?.current || {};\n        const columnsOrder = columnApi?.getAllGridColumns();\n\n        if (!columnsOrder) return;\n\n        const columnsInSettings = page.table.columns;\n        const updatedColumns: PersistedTableColumn[] = [];\n        for (const column of columnsOrder) {\n            const columnInSettings = columnsInSettings.find(\n                (c) => c.column === column.getColDef().colId,\n            );\n\n            if (columnInSettings) {\n                updatedColumns.push({\n                    ...columnInSettings,\n                    ...(!page.table.autoFit && {\n                        width: column.getActualWidth(),\n                    }),\n                });\n            }\n        }\n\n        setTable({ columns: updatedColumns });\n    }, [page.table.autoFit, page.table.columns, setTable, tableRef]);\n\n    const debouncedColumnChange = debounce(handleColumnChange, 200);\n\n    const handleScroll = (e: BodyScrollEvent) => {\n        const scrollOffset = Number((e.top / page.table.rowHeight).toFixed(0));\n        setPagination(playlistId, { scrollOffset });\n    };\n\n    const contextMenuItems = useMemo(() => {\n        if (detailQuery?.data?.rules) {\n            return SMART_PLAYLIST_SONG_CONTEXT_MENU_ITEMS;\n        }\n\n        return PLAYLIST_SONG_CONTEXT_MENU_ITEMS;\n    }, [detailQuery?.data?.rules]);\n\n    const handleContextMenu = useHandleTableContextMenu(LibraryItem.SONG, contextMenuItems, {\n        playlistId,\n        tableRef,\n    });\n\n    const handleRowDoubleClick = (e: RowDoubleClickedEvent<QueueSong>) => {\n        if (!e.data) return;\n        handlePlayQueueAdd?.({\n            byItemType: {\n                id: [playlistId],\n                type: LibraryItem.PLAYLIST,\n            },\n            initialSongId: e.data.id,\n            playType: playButtonBehavior,\n        });\n    };\n\n    const { rowClassRules } = useCurrentSongRowStyles({ tableRef });\n\n    const canDrag =\n        filters.sortBy === SongListSort.ID && !detailQuery?.data?.rules && !iSClientSide;\n\n    return (\n        <>\n            <VirtualGridAutoSizerContainer>\n                <VirtualTable\n                    alwaysShowHorizontalScroll\n                    autoFitColumns={page.table.autoFit}\n                    columnDefs={columnDefs}\n                    context={{\n                        currentSong,\n                        isFocused,\n                        itemType: LibraryItem.SONG,\n                        onCellContextMenu: handleContextMenu,\n                        status,\n                    }}\n                    getRowId={(data) => data.data.uniqueId}\n                    infiniteInitialRowCount={\n                        iSClientSide ? undefined : checkPlaylistList.data?.totalRecordCount || 100\n                    }\n                    // https://github.com/ag-grid/ag-grid/issues/5284\n                    // Key is used to force remount of table when display, rowHeight, or server changes\n                    key={`table-${page.display}-${page.table.rowHeight}-${server?.id}`}\n                    onBodyScrollEnd={handleScroll}\n                    onCellContextMenu={handleContextMenu}\n                    onColumnMoved={handleColumnChange}\n                    onColumnResized={debouncedColumnChange}\n                    onGridReady={onGridReady}\n                    onGridSizeChanged={handleGridSizeChange}\n                    onPaginationChanged={onPaginationChanged}\n                    onRowDoubleClicked={handleRowDoubleClick}\n                    onRowDragEnd={handleDragEnd}\n                    pagination={isPaginationEnabled}\n                    paginationAutoPageSize={isPaginationEnabled}\n                    paginationPageSize={pagination.itemsPerPage || 100}\n                    ref={tableRef}\n                    rowClassRules={rowClassRules}\n                    rowData={songs}\n                    rowDragEntireRow={canDrag}\n                    rowHeight={page.table.rowHeight || 40}\n                    rowModelType={iSClientSide ? 'clientSide' : 'infinite'}\n                    shouldUpdateSong\n                />\n            </VirtualGridAutoSizerContainer>\n            {isPaginationEnabled && (\n                <AnimatePresence\n                    initial={false}\n                    mode=\"wait\"\n                    presenceAffectsLayout\n                >\n                    {page.display === ListDisplayType.TABLE_PAGINATED && (\n                        <TablePagination\n                            pageKey={playlistId}\n                            pagination={pagination}\n                            setIdPagination={setPagination}\n                            tableRef={tableRef}\n                        />\n                    )}\n                </AnimatePresence>\n            )}\n        </>\n    );\n};\n","import { Group, Stack } from '@mantine/core';\nimport { useForm } from '@mantine/form';\nimport { closeAllModals, openModal } from '@mantine/modals';\nimport { useTranslation } from 'react-i18next';\n\nimport i18n from '/@/i18n/i18n';\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { Button, Select, Switch, TextInput, toast } from '/@/renderer/components';\nimport { useUpdatePlaylist } from '/@/renderer/features/playlists/mutations/update-playlist-mutation';\nimport { queryClient } from '/@/renderer/lib/react-query';\nimport { useCurrentServer } from '/@/renderer/store';\nimport { hasFeature } from '/@/shared/api/utils';\nimport {\n    PlaylistDetailResponse,\n    ServerListItem,\n    ServerType,\n    SortOrder,\n    UpdatePlaylistBody,\n    UpdatePlaylistQuery,\n    User,\n    UserListQuery,\n    UserListSort,\n} from '/@/shared/types/domain-types';\nimport { ServerFeature } from '/@/shared/types/features-types';\n\ninterface UpdatePlaylistFormProps {\n    body: Partial<UpdatePlaylistBody>;\n    onCancel: () => void;\n    query: UpdatePlaylistQuery;\n    users?: User[];\n}\n\nexport const UpdatePlaylistForm = ({ body, onCancel, query, users }: UpdatePlaylistFormProps) => {\n    const { t } = useTranslation();\n    const mutation = useUpdatePlaylist({});\n    const server = useCurrentServer();\n\n    const userList = users?.map((user) => ({\n        label: user.name,\n        value: user.id,\n    }));\n\n    const form = useForm<UpdatePlaylistBody>({\n        initialValues: {\n            _custom: {\n                navidrome: {\n                    owner: body?._custom?.navidrome?.owner || '',\n                    ownerId: body?._custom?.navidrome?.ownerId || '',\n                    rules: undefined,\n                    sync: body?._custom?.navidrome?.sync || false,\n                },\n            },\n            comment: body?.comment || '',\n            name: body?.name || '',\n            public: body.public,\n        },\n    });\n\n    const handleSubmit = form.onSubmit((values) => {\n        mutation.mutate(\n            {\n                body: values,\n                query,\n                serverId: server?.id,\n            },\n            {\n                onError: (err) => {\n                    toast.error({\n                        message: err.message,\n                        title: t('error.genericError', { postProcess: 'sentenceCase' }),\n                    });\n                },\n                onSuccess: () => {\n                    toast.success({\n                        message: t('form.editPlaylist.success', { postProcess: 'sentenceCase' }),\n                    });\n                    onCancel();\n                },\n            },\n        );\n    });\n\n    const isPublicDisplayed = hasFeature(server, ServerFeature.PUBLIC_PLAYLIST);\n    const isOwnerDisplayed = server?.type === ServerType.NAVIDROME && userList;\n    const isSubmitDisabled = !form.values.name || mutation.isLoading;\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <Stack>\n                <TextInput\n                    data-autofocus\n                    label={t('form.createPlaylist.input', {\n                        context: 'name',\n                        postProcess: 'titleCase',\n                    })}\n                    required\n                    {...form.getInputProps('name')}\n                />\n                {server?.type === ServerType.NAVIDROME && (\n                    <TextInput\n                        label={t('form.createPlaylist.input', {\n                            context: 'description',\n                            postProcess: 'titleCase',\n                        })}\n                        {...form.getInputProps('comment')}\n                    />\n                )}\n                {isOwnerDisplayed && (\n                    <Select\n                        data={userList || []}\n                        {...form.getInputProps('_custom.navidrome.ownerId')}\n                        label={t('form.createPlaylist.input', {\n                            context: 'owner',\n                            postProcess: 'titleCase',\n                        })}\n                    />\n                )}\n                {isPublicDisplayed && (\n                    <>\n                        {server?.type === ServerType.JELLYFIN && (\n                            <div>\n                                {t('form.editPlaylist.publicJellyfinNote', {\n                                    postProcess: 'sentenceCase',\n                                })}\n                            </div>\n                        )}\n                        <Switch\n                            label={t('form.createPlaylist.input', {\n                                context: 'public',\n                                postProcess: 'titleCase',\n                            })}\n                            {...form.getInputProps('public', { type: 'checkbox' })}\n                        />\n                    </>\n                )}\n                <Group position=\"right\">\n                    <Button\n                        onClick={onCancel}\n                        variant=\"subtle\"\n                    >\n                        {t('common.cancel', { postProcess: 'titleCase' })}\n                    </Button>\n                    <Button\n                        disabled={isSubmitDisabled}\n                        loading={mutation.isLoading}\n                        type=\"submit\"\n                        variant=\"filled\"\n                    >\n                        {t('common.save', { postProcess: 'titleCase' })}\n                    </Button>\n                </Group>\n            </Stack>\n        </form>\n    );\n};\n\nexport const openUpdatePlaylistModal = async (args: {\n    playlist: PlaylistDetailResponse;\n    server: ServerListItem;\n}) => {\n    const { playlist, server } = args;\n\n    const query: UserListQuery = {\n        sortBy: UserListSort.NAME,\n        sortOrder: SortOrder.ASC,\n        startIndex: 0,\n    };\n\n    if (!server) return;\n\n    const users =\n        server?.type === ServerType.NAVIDROME\n            ? await queryClient\n                  .fetchQuery({\n                      queryFn: ({ signal }) =>\n                          api.controller.getUserList({ apiClientProps: { server, signal }, query }),\n                      queryKey: queryKeys.users.list(server?.id || '', query),\n                  })\n                  .catch((error) => {\n                      // This eror most likely happens if the user is not an admin\n                      console.error(error);\n                      return null;\n                  })\n            : null;\n\n    openModal({\n        children: (\n            <UpdatePlaylistForm\n                body={{\n                    _custom: {\n                        navidrome: {\n                            owner: playlist?.owner || undefined,\n                            ownerId: playlist?.ownerId || undefined,\n                            rules: playlist?.rules || undefined,\n                            sync: playlist?.sync || undefined,\n                        },\n                    },\n                    comment: playlist?.description || undefined,\n                    genres: playlist?.genres,\n                    name: playlist?.name,\n                    public: playlist?.public || false,\n                }}\n                onCancel={closeAllModals}\n                query={{ id: playlist?.id }}\n                users={users?.items}\n            />\n        ),\n        title: i18n.t('form.editPlaylist.title', { postProcess: 'titleCase' }) as string,\n    });\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { IDatasource } from '@ag-grid-community/core';\nimport { Divider, Flex, Group, Stack } from '@mantine/core';\nimport { closeAllModals, openModal } from '@mantine/modals';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { ChangeEvent, MouseEvent, MutableRefObject, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    RiAddBoxFill,\n    RiAddCircleFill,\n    RiDeleteBinFill,\n    RiEditFill,\n    RiMoreFill,\n    RiPlayFill,\n    RiRefreshLine,\n    RiSettings3Fill,\n} from 'react-icons/ri';\nimport { useNavigate, useParams } from 'react-router';\n\nimport i18n from '/@/i18n/i18n';\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport {\n    Button,\n    ConfirmModal,\n    DropdownMenu,\n    MultiSelect,\n    Slider,\n    Switch,\n    Text,\n    toast,\n} from '/@/renderer/components';\nimport { SONG_TABLE_COLUMNS } from '/@/renderer/components/virtual-table';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { openUpdatePlaylistModal } from '/@/renderer/features/playlists/components/update-playlist-form';\nimport { useDeletePlaylist } from '/@/renderer/features/playlists/mutations/delete-playlist-mutation';\nimport { usePlaylistDetail } from '/@/renderer/features/playlists/queries/playlist-detail-query';\nimport { OrderToggleButton } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport {\n    SongListFilter,\n    useCurrentServer,\n    usePlaylistDetailStore,\n    useSetPlaylistDetailFilters,\n    useSetPlaylistDetailTable,\n    useSetPlaylistStore,\n    useSetPlaylistTablePagination,\n} from '/@/renderer/store';\nimport {\n    LibraryItem,\n    PlaylistSongListQuery,\n    ServerType,\n    SongListSort,\n    SortOrder,\n} from '/@/shared/types/domain-types';\nimport { ListDisplayType, Play, TableColumn } from '/@/shared/types/types';\n\nconst FILTERS = {\n    jellyfin: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.id', { postProcess: 'titleCase' }),\n            value: SongListSort.ID,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.album', { postProcess: 'titleCase' }),\n            value: SongListSort.ALBUM,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.albumArtist', { postProcess: 'titleCase' }),\n            value: SongListSort.ALBUM_ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.artist', { postProcess: 'titleCase' }),\n            value: SongListSort.ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.duration', { postProcess: 'titleCase' }),\n            value: SongListSort.DURATION,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.playCount', { postProcess: 'titleCase' }),\n            value: SongListSort.PLAY_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: SongListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.random', { postProcess: 'titleCase' }),\n            value: SongListSort.RANDOM,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.recentlyAdded', { postProcess: 'titleCase' }),\n            value: SongListSort.RECENTLY_ADDED,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.recentlyPlayed', { postProcess: 'titleCase' }),\n            value: SongListSort.RECENTLY_PLAYED,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.releaseDate', { postProcess: 'titleCase' }),\n            value: SongListSort.RELEASE_DATE,\n        },\n    ],\n    navidrome: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.id', { postProcess: 'titleCase' }),\n            value: SongListSort.ID,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.album', { postProcess: 'titleCase' }),\n            value: SongListSort.ALBUM,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.albumArtist', { postProcess: 'titleCase' }),\n            value: SongListSort.ALBUM_ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.artist', { postProcess: 'titleCase' }),\n            value: SongListSort.ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.bpm', { postProcess: 'titleCase' }),\n            value: SongListSort.BPM,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('common.channel', { count: 2, postProcess: 'titleCase' }),\n            value: SongListSort.CHANNELS,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.comment', { postProcess: 'titleCase' }),\n            value: SongListSort.COMMENT,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.duration', { postProcess: 'titleCase' }),\n            value: SongListSort.DURATION,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.isFavorited', { postProcess: 'titleCase' }),\n            value: SongListSort.FAVORITED,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.playCount', { postProcess: 'titleCase' }),\n            value: SongListSort.GENRE,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: SongListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.playCount', { postProcess: 'titleCase' }),\n            value: SongListSort.PLAY_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.rating', { postProcess: 'titleCase' }),\n            value: SongListSort.RATING,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyAdded', { postProcess: 'titleCase' }),\n            value: SongListSort.RECENTLY_ADDED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyPlayed', { postProcess: 'titleCase' }),\n            value: SongListSort.RECENTLY_PLAYED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.releaseYear', { postProcess: 'titleCase' }),\n            value: SongListSort.YEAR,\n        },\n    ],\n    subsonic: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.id', { postProcess: 'titleCase' }),\n            value: SongListSort.ID,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.album', { postProcess: 'titleCase' }),\n            value: SongListSort.ALBUM,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.albumArtist', { postProcess: 'titleCase' }),\n            value: SongListSort.ALBUM_ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.artist', { postProcess: 'titleCase' }),\n            value: SongListSort.ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.duration', { postProcess: 'titleCase' }),\n            value: SongListSort.DURATION,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.isFavorited', { postProcess: 'titleCase' }),\n            value: SongListSort.FAVORITED,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.genre', { postProcess: 'titleCase' }),\n            value: SongListSort.GENRE,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: SongListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.rating', { postProcess: 'titleCase' }),\n            value: SongListSort.RATING,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyAdded', { postProcess: 'titleCase' }),\n            value: SongListSort.RECENTLY_ADDED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyPlayed', { postProcess: 'titleCase' }),\n            value: SongListSort.RECENTLY_PLAYED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.releaseYear', { postProcess: 'titleCase' }),\n            value: SongListSort.YEAR,\n        },\n    ],\n};\n\ninterface PlaylistDetailSongListHeaderFiltersProps {\n    handleToggleShowQueryBuilder: () => void;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const PlaylistDetailSongListHeaderFilters = ({\n    handleToggleShowQueryBuilder,\n    tableRef,\n}: PlaylistDetailSongListHeaderFiltersProps) => {\n    const { t } = useTranslation();\n    const { playlistId } = useParams() as { playlistId: string };\n    const navigate = useNavigate();\n    const queryClient = useQueryClient();\n    const server = useCurrentServer();\n    const setPage = useSetPlaylistStore();\n    const setFilter = useSetPlaylistDetailFilters();\n    const page = usePlaylistDetailStore();\n    const filters: Partial<PlaylistSongListQuery> = {\n        sortBy: page?.table.id[playlistId]?.filter?.sortBy || SongListSort.ID,\n        sortOrder: page?.table.id[playlistId]?.filter?.sortOrder || SortOrder.ASC,\n    };\n\n    const detailQuery = usePlaylistDetail({ query: { id: playlistId }, serverId: server?.id });\n    const isSmartPlaylist = detailQuery.data?.rules;\n\n    const handlePlayQueueAdd = usePlayQueueAdd();\n\n    const cq = useContainerQuery();\n\n    const setPagination = useSetPlaylistTablePagination();\n    const setTable = useSetPlaylistDetailTable();\n\n    const sortByLabel =\n        (server?.type &&\n            FILTERS[server.type as keyof typeof FILTERS].find((f) => f.value === filters.sortBy)\n                ?.name) ||\n        'Unknown';\n\n    const handleItemSize = (e: number) => {\n        setTable({ rowHeight: e });\n    };\n\n    const handleFilterChange = useCallback(\n        async (filters: SongListFilter) => {\n            if (server?.type !== ServerType.SUBSONIC) {\n                const dataSource: IDatasource = {\n                    getRows: async (params) => {\n                        const limit = params.endRow - params.startRow;\n                        const startIndex = params.startRow;\n\n                        const queryKey = queryKeys.playlists.songList(\n                            server?.id || '',\n                            playlistId,\n                            {\n                                id: playlistId,\n                                limit,\n                                startIndex,\n                                ...filters,\n                            },\n                        );\n\n                        const songsRes = await queryClient.fetchQuery(\n                            queryKey,\n                            async ({ signal }) =>\n                                api.controller.getPlaylistSongList({\n                                    apiClientProps: {\n                                        server,\n                                        signal,\n                                    },\n                                    query: {\n                                        id: playlistId,\n                                        limit,\n                                        startIndex,\n                                        ...filters,\n                                    },\n                                }),\n                            { cacheTime: 1000 * 60 * 1 },\n                        );\n\n                        params.successCallback(\n                            songsRes?.items || [],\n                            songsRes?.totalRecordCount || 0,\n                        );\n                    },\n                    rowCount: undefined,\n                };\n                tableRef.current?.api.setDatasource(dataSource);\n                tableRef.current?.api.purgeInfiniteCache();\n                tableRef.current?.api.ensureIndexVisible(0, 'top');\n            } else {\n                tableRef.current?.api.redrawRows();\n                tableRef.current?.api.ensureIndexVisible(0, 'top');\n            }\n\n            if (page.display === ListDisplayType.TABLE_PAGINATED) {\n                setPagination({ data: { currentPage: 0 } });\n            }\n        },\n        [tableRef, page.display, server, playlistId, queryClient, setPagination],\n    );\n\n    const handleRefresh = () => {\n        queryClient.invalidateQueries(queryKeys.albums.list(server?.id || ''));\n        handleFilterChange({ ...page?.table.id[playlistId].filter, ...filters });\n    };\n\n    const handleSetSortBy = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value || !server?.type) return;\n\n            const sortOrder = FILTERS[server.type as keyof typeof FILTERS].find(\n                (f) => f.value === e.currentTarget.value,\n            )?.defaultOrder;\n\n            const updatedFilters = setFilter(playlistId, {\n                sortBy: e.currentTarget.value as SongListSort,\n                sortOrder: sortOrder || SortOrder.ASC,\n            });\n\n            handleFilterChange(updatedFilters);\n        },\n        [handleFilterChange, playlistId, server?.type, setFilter],\n    );\n\n    const handleToggleSortOrder = useCallback(() => {\n        const newSortOrder = filters.sortOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n        const updatedFilters = setFilter(playlistId, { sortOrder: newSortOrder });\n        handleFilterChange(updatedFilters);\n    }, [filters.sortOrder, handleFilterChange, playlistId, setFilter]);\n\n    const handleSetViewType = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value) return;\n            setPage({ detail: { ...page, display: e.currentTarget.value as ListDisplayType } });\n        },\n        [page, setPage],\n    );\n\n    const handleTableColumns = (values: TableColumn[]) => {\n        const existingColumns = page.table.columns;\n\n        if (values.length === 0) {\n            return setTable({\n                columns: [],\n            });\n        }\n\n        // If adding a column\n        if (values.length > existingColumns.length) {\n            const newColumn = { column: values[values.length - 1], width: 100 };\n\n            setTable({ columns: [...existingColumns, newColumn] });\n        } else {\n            // If removing a column\n            const removed = existingColumns.filter((column) => !values.includes(column.column));\n            const newColumns = existingColumns.filter((column) => !removed.includes(column));\n\n            setTable({ columns: newColumns });\n        }\n\n        return tableRef.current?.api.sizeColumnsToFit();\n    };\n\n    const handleAutoFitColumns = (e: ChangeEvent<HTMLInputElement>) => {\n        setTable({ autoFit: e.currentTarget.checked });\n\n        if (e.currentTarget.checked) {\n            tableRef.current?.api.sizeColumnsToFit();\n        }\n    };\n\n    const handlePlay = async (playType: Play) => {\n        handlePlayQueueAdd?.({\n            byItemType: { id: [playlistId], type: LibraryItem.PLAYLIST },\n            playType,\n        });\n    };\n\n    const deletePlaylistMutation = useDeletePlaylist({});\n\n    const handleDeletePlaylist = useCallback(() => {\n        if (!detailQuery.data) return;\n        deletePlaylistMutation?.mutate(\n            { query: { id: detailQuery.data.id }, serverId: detailQuery.data.serverId },\n            {\n                onError: (err) => {\n                    toast.error({\n                        message: err.message,\n                        title: t('error.genericError', { postProcess: 'sentenceCase' }),\n                    });\n                },\n                onSuccess: () => {\n                    navigate(AppRoute.PLAYLISTS, { replace: true });\n                },\n            },\n        );\n        closeAllModals();\n    }, [deletePlaylistMutation, detailQuery.data, navigate, t]);\n\n    const openDeletePlaylistModal = () => {\n        openModal({\n            children: (\n                <ConfirmModal onConfirm={handleDeletePlaylist}>\n                    <Text>Are you sure you want to delete this playlist?</Text>\n                </ConfirmModal>\n            ),\n            title: t('form.deletePlaylist.title', { postProcess: 'sentenceCase' }),\n        });\n    };\n\n    return (\n        <Flex justify=\"space-between\">\n            <Group\n                ref={cq.ref}\n                spacing=\"sm\"\n                w=\"100%\"\n            >\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            fw=\"600\"\n                            size=\"md\"\n                            tooltip={{\n                                label: t('page.playlist.reorder', { postProcess: 'sentenceCase' }),\n                            }}\n                            variant=\"subtle\"\n                        >\n                            {sortByLabel}\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        {FILTERS[server?.type as keyof typeof FILTERS].map((filter) => (\n                            <DropdownMenu.Item\n                                $isActive={filter.value === filters.sortBy}\n                                key={`filter-${filter.name}`}\n                                onClick={handleSetSortBy}\n                                value={filter.value}\n                            >\n                                {filter.name}\n                            </DropdownMenu.Item>\n                        ))}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n\n                <Divider orientation=\"vertical\" />\n                <OrderToggleButton\n                    onToggle={handleToggleSortOrder}\n                    sortOrder={filters.sortOrder || SortOrder.ASC}\n                />\n                <Divider orientation=\"vertical\" />\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            fw=\"600\"\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            <RiMoreFill size=\"1.3rem\" />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Item\n                            icon={<RiPlayFill />}\n                            onClick={() => handlePlay(Play.NOW)}\n                        >\n                            {t('player.play', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            icon={<RiAddBoxFill />}\n                            onClick={() => handlePlay(Play.LAST)}\n                        >\n                            {t('player.addLast', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            icon={<RiAddCircleFill />}\n                            onClick={() => handlePlay(Play.NEXT)}\n                        >\n                            {t('player.addNext', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Divider />\n                        <DropdownMenu.Item\n                            icon={<RiEditFill />}\n                            onClick={() =>\n                                openUpdatePlaylistModal({\n                                    playlist: detailQuery.data!,\n                                    server: server!,\n                                })\n                            }\n                        >\n                            {t('action.editPlaylist', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            icon={<RiDeleteBinFill />}\n                            onClick={openDeletePlaylistModal}\n                        >\n                            {t('action.deletePlaylist', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Divider />\n                        <DropdownMenu.Item\n                            icon={<RiRefreshLine />}\n                            onClick={handleRefresh}\n                        >\n                            {t('action.refresh', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        {server?.type === ServerType.NAVIDROME && !isSmartPlaylist && (\n                            <>\n                                <DropdownMenu.Divider />\n                                <DropdownMenu.Item\n                                    $danger\n                                    onClick={handleToggleShowQueryBuilder}\n                                >\n                                    {t('action.toggleSmartPlaylistEditor', {\n                                        postProcess: 'sentenceCase',\n                                    })}\n                                </DropdownMenu.Item>\n                            </>\n                        )}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </Group>\n            <Group>\n                <DropdownMenu\n                    position=\"bottom-end\"\n                    width={425}\n                >\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            <RiSettings3Fill size=\"1.3rem\" />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Label>\n                            {t('table.config.general.displayType', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item\n                            $isActive={page.display === ListDisplayType.TABLE}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.TABLE}\n                        >\n                            Table\n                        </DropdownMenu.Item>\n                        {/* <DropdownMenu.Item\n                            $isActive={page.display === ListDisplayType.TABLE_PAGINATED}\n                            value={ListDisplayType.TABLE_PAGINATED}\n                            onClick={handleSetViewType}\n                        >\n                            Table (paginated)\n                        </DropdownMenu.Item> */}\n                        <DropdownMenu.Divider />\n                        <DropdownMenu.Label>\n                            {t('table.config.general.itemSize', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item closeMenuOnClick={false}>\n                            <Slider\n                                defaultValue={page.table.rowHeight}\n                                label={null}\n                                max={100}\n                                min={25}\n                                onChangeEnd={handleItemSize}\n                            />\n                        </DropdownMenu.Item>\n                        {(page.display === ListDisplayType.TABLE ||\n                            page.display === ListDisplayType.TABLE_PAGINATED) && (\n                            <>\n                                <DropdownMenu.Label>Table Columns</DropdownMenu.Label>\n                                <DropdownMenu.Item\n                                    closeMenuOnClick={false}\n                                    component=\"div\"\n                                    sx={{ cursor: 'default' }}\n                                >\n                                    <Stack>\n                                        <MultiSelect\n                                            clearable\n                                            data={SONG_TABLE_COLUMNS}\n                                            defaultValue={page.table?.columns.map(\n                                                (column) => column.column,\n                                            )}\n                                            onChange={handleTableColumns}\n                                            width={300}\n                                        />\n                                        <Group position=\"apart\">\n                                            <Text>Auto Fit Columns</Text>\n                                            <Switch\n                                                defaultChecked={page.table.autoFit}\n                                                onChange={handleAutoFitColumns}\n                                            />\n                                        </Group>\n                                    </Stack>\n                                </DropdownMenu.Item>\n                            </>\n                        )}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </Group>\n        </Flex>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { Stack } from '@mantine/core';\nimport { MutableRefObject } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams } from 'react-router';\n\nimport { Badge, PageHeader, Paper, SpinnerIcon } from '/@/renderer/components';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { PlaylistDetailSongListHeaderFilters } from '/@/renderer/features/playlists/components/playlist-detail-song-list-header-filters';\nimport { usePlaylistDetail } from '/@/renderer/features/playlists/queries/playlist-detail-query';\nimport { LibraryHeaderBar } from '/@/renderer/features/shared';\nimport { useCurrentServer } from '/@/renderer/store';\nimport { usePlayButtonBehavior } from '/@/renderer/store/settings.store';\nimport { LibraryItem } from '/@/shared/types/domain-types';\nimport { Play } from '/@/shared/types/types';\n\ninterface PlaylistDetailHeaderProps {\n    handleToggleShowQueryBuilder: () => void;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const PlaylistDetailSongListHeader = ({\n    handleToggleShowQueryBuilder,\n    itemCount,\n    tableRef,\n}: PlaylistDetailHeaderProps) => {\n    const { t } = useTranslation();\n    const { playlistId } = useParams() as { playlistId: string };\n    const server = useCurrentServer();\n    const detailQuery = usePlaylistDetail({ query: { id: playlistId }, serverId: server?.id });\n    const handlePlayQueueAdd = usePlayQueueAdd();\n\n    const handlePlay = async (playType: Play) => {\n        handlePlayQueueAdd?.({\n            byItemType: { id: [playlistId], type: LibraryItem.PLAYLIST },\n            playType,\n        });\n    };\n\n    const playButtonBehavior = usePlayButtonBehavior();\n\n    if (detailQuery.isLoading) return null;\n    const isSmartPlaylist = detailQuery?.data?.rules;\n\n    return (\n        <Stack spacing={0}>\n            <PageHeader backgroundColor=\"var(--titlebar-bg)\">\n                <LibraryHeaderBar>\n                    <LibraryHeaderBar.PlayButton onClick={() => handlePlay(playButtonBehavior)} />\n                    <LibraryHeaderBar.Title>{detailQuery?.data?.name}</LibraryHeaderBar.Title>\n                    <Paper\n                        fw=\"600\"\n                        px=\"1rem\"\n                        py=\"0.3rem\"\n                        radius=\"sm\"\n                    >\n                        {itemCount === null || itemCount === undefined ? (\n                            <SpinnerIcon />\n                        ) : (\n                            itemCount\n                        )}\n                    </Paper>\n                    {isSmartPlaylist && <Badge size=\"lg\">{t('entity.smartPlaylist')}</Badge>}\n                </LibraryHeaderBar>\n            </PageHeader>\n            <Paper p=\"1rem\">\n                <PlaylistDetailSongListHeaderFilters\n                    handleToggleShowQueryBuilder={handleToggleShowQueryBuilder}\n                    tableRef={tableRef}\n                />\n            </Paper>\n        </Stack>\n    );\n};\n","import { Group, Stack } from '@mantine/core';\nimport { useForm } from '@mantine/form';\nimport { useTranslation } from 'react-i18next';\n\nimport { Button, Switch, TextInput, toast } from '/@/renderer/components';\nimport { useCreatePlaylist } from '/@/renderer/features/playlists/mutations/create-playlist-mutation';\nimport { useCurrentServer } from '/@/renderer/store';\nimport { hasFeature } from '/@/shared/api/utils';\nimport {\n    CreatePlaylistBody,\n    CreatePlaylistResponse,\n    ServerType,\n} from '/@/shared/types/domain-types';\nimport { ServerFeature } from '/@/shared/types/features-types';\n\ninterface SaveAsPlaylistFormProps {\n    body: Partial<CreatePlaylistBody>;\n    onCancel: () => void;\n    onSuccess: (data: CreatePlaylistResponse) => void;\n    serverId: string | undefined;\n}\n\nexport const SaveAsPlaylistForm = ({\n    body,\n    onCancel,\n    onSuccess,\n    serverId,\n}: SaveAsPlaylistFormProps) => {\n    const { t } = useTranslation();\n    const mutation = useCreatePlaylist({});\n    const server = useCurrentServer();\n\n    const form = useForm<CreatePlaylistBody>({\n        initialValues: {\n            _custom: {\n                navidrome: {\n                    rules: undefined,\n                    ...body?._custom?.navidrome,\n                },\n            },\n            comment: body.comment || '',\n            name: body.name || '',\n            public: body.public,\n        },\n    });\n\n    const handleSubmit = form.onSubmit((values) => {\n        mutation.mutate(\n            { body: values, serverId },\n            {\n                onError: (err) => {\n                    toast.error({\n                        message: err.message,\n                        title: t('error.genericError', { postProcess: 'sentenceCase' }),\n                    });\n                },\n                onSuccess: (data) => {\n                    toast.success({\n                        message: t('form.createPlaylist.success', { postProcess: 'sentenceCase' }),\n                    });\n                    onSuccess(data);\n                    onCancel();\n                },\n            },\n        );\n    });\n\n    const isPublicDisplayed = hasFeature(server, ServerFeature.PUBLIC_PLAYLIST);\n    const isSubmitDisabled = !form.values.name || mutation.isLoading;\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <Stack>\n                <TextInput\n                    data-autofocus\n                    label={t('form.createPlaylist.input', {\n                        context: 'name',\n                        postProcess: 'titleCase',\n                    })}\n                    required\n                    {...form.getInputProps('name')}\n                />\n                {server?.type === ServerType.NAVIDROME && (\n                    <TextInput\n                        label={t('form.createPlaylist.input', {\n                            context: 'description',\n                            postProcess: 'titleCase',\n                        })}\n                        {...form.getInputProps('comment')}\n                    />\n                )}\n                {isPublicDisplayed && (\n                    <Switch\n                        label={t('form.createPlaylist.input', {\n                            context: 'public',\n                            postProcess: 'titleCase',\n                        })}\n                        {...form.getInputProps('public', { type: 'checkbox' })}\n                    />\n                )}\n                <Group position=\"right\">\n                    <Button\n                        onClick={onCancel}\n                        variant=\"subtle\"\n                    >\n                        {t('common.cancel', { postProcess: 'titleCase' })}\n                    </Button>\n                    <Button\n                        disabled={isSubmitDisabled}\n                        loading={mutation.isLoading}\n                        type=\"submit\"\n                        variant=\"filled\"\n                    >\n                        {t('common.save', { postProcess: 'titleCase' })}\n                    </Button>\n                </Group>\n            </Stack>\n        </form>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { Box, Group } from '@mantine/core';\nimport { closeAllModals, openModal } from '@mantine/modals';\nimport { useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { RiArrowDownSLine, RiArrowUpSLine } from 'react-icons/ri';\nimport { generatePath, useNavigate, useParams } from 'react-router';\n\nimport { Button, Paper, Text, toast } from '/@/renderer/components';\nimport { PlaylistDetailSongListContent } from '/@/renderer/features/playlists/components/playlist-detail-song-list-content';\nimport { PlaylistDetailSongListHeader } from '/@/renderer/features/playlists/components/playlist-detail-song-list-header';\nimport { PlaylistQueryBuilder } from '/@/renderer/features/playlists/components/playlist-query-builder';\nimport { SaveAsPlaylistForm } from '/@/renderer/features/playlists/components/save-as-playlist-form';\nimport { useCreatePlaylist } from '/@/renderer/features/playlists/mutations/create-playlist-mutation';\nimport { useDeletePlaylist } from '/@/renderer/features/playlists/mutations/delete-playlist-mutation';\nimport { usePlaylistDetail } from '/@/renderer/features/playlists/queries/playlist-detail-query';\nimport { usePlaylistSongList } from '/@/renderer/features/playlists/queries/playlist-song-list-query';\nimport { AnimatedPage } from '/@/renderer/features/shared';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer, usePlaylistDetailStore } from '/@/renderer/store';\nimport {\n    PlaylistSongListQuery,\n    ServerType,\n    SongListSort,\n    SortOrder,\n} from '/@/shared/types/domain-types';\n\nconst PlaylistDetailSongListRoute = () => {\n    const { t } = useTranslation();\n    const navigate = useNavigate();\n    const tableRef = useRef<AgGridReactType | null>(null);\n    const { playlistId } = useParams() as { playlistId: string };\n    const server = useCurrentServer();\n\n    const detailQuery = usePlaylistDetail({ query: { id: playlistId }, serverId: server?.id });\n    const createPlaylistMutation = useCreatePlaylist({});\n    const deletePlaylistMutation = useDeletePlaylist({});\n\n    const handleSave = (\n        filter: Record<string, any>,\n        extraFilters: { limit?: number; sortBy?: string; sortOrder?: string },\n    ) => {\n        const rules = {\n            ...filter,\n            limit: extraFilters.limit || undefined,\n            order: extraFilters.sortOrder || 'desc',\n            sort: extraFilters.sortBy || 'dateAdded',\n        };\n\n        if (!detailQuery?.data) return;\n\n        createPlaylistMutation.mutate(\n            {\n                body: {\n                    _custom: {\n                        navidrome: {\n                            owner: detailQuery?.data?.owner || '',\n                            ownerId: detailQuery?.data?.ownerId || '',\n                            rules,\n                            sync: detailQuery?.data?.sync || false,\n                        },\n                    },\n                    comment: detailQuery?.data?.description || '',\n                    name: detailQuery?.data?.name,\n                    public: detailQuery?.data?.public || false,\n                },\n                serverId: detailQuery?.data?.serverId,\n            },\n            {\n                onSuccess: (data) => {\n                    toast.success({ message: 'Playlist has been saved' });\n                    navigate(\n                        generatePath(AppRoute.PLAYLISTS_DETAIL_SONGS, {\n                            playlistId: data?.id || '',\n                        }),\n                        {\n                            replace: true,\n                        },\n                    );\n                    deletePlaylistMutation.mutate({\n                        query: { id: playlistId },\n                        serverId: detailQuery?.data?.serverId,\n                    });\n                },\n            },\n        );\n    };\n\n    const handleSaveAs = (\n        filter: Record<string, any>,\n        extraFilters: { limit?: number; sortBy?: string; sortOrder?: string },\n    ) => {\n        openModal({\n            children: (\n                <SaveAsPlaylistForm\n                    body={{\n                        _custom: {\n                            navidrome: {\n                                owner: detailQuery?.data?.owner || '',\n                                ownerId: detailQuery?.data?.ownerId || '',\n                                rules: {\n                                    ...filter,\n                                    limit: extraFilters.limit || undefined,\n                                    order: extraFilters.sortOrder || 'desc',\n                                    sort: extraFilters.sortBy || 'dateAdded',\n                                },\n                                sync: detailQuery?.data?.sync || false,\n                            },\n                        },\n                        comment: detailQuery?.data?.description || '',\n                        name: detailQuery?.data?.name,\n                        public: detailQuery?.data?.public || false,\n                    }}\n                    onCancel={closeAllModals}\n                    onSuccess={(data) =>\n                        navigate(\n                            generatePath(AppRoute.PLAYLISTS_DETAIL_SONGS, {\n                                playlistId: data?.id || '',\n                            }),\n                        )\n                    }\n                    serverId={detailQuery?.data?.serverId}\n                />\n            ),\n            title: t('common.saveAs', { postProcess: 'sentenceCase' }),\n        });\n    };\n\n    const isSmartPlaylist =\n        !detailQuery?.isLoading &&\n        detailQuery?.data?.rules &&\n        server?.type === ServerType.NAVIDROME;\n\n    const [showQueryBuilder, setShowQueryBuilder] = useState(false);\n    const [isQueryBuilderExpanded, setIsQueryBuilderExpanded] = useState(false);\n\n    const handleToggleExpand = () => {\n        setIsQueryBuilderExpanded((prev) => !prev);\n    };\n\n    const handleToggleShowQueryBuilder = () => {\n        setShowQueryBuilder((prev) => !prev);\n        setIsQueryBuilderExpanded(true);\n    };\n\n    const page = usePlaylistDetailStore();\n    const filters: Partial<PlaylistSongListQuery> = {\n        sortBy: page?.table.id[playlistId]?.filter?.sortBy || SongListSort.ID,\n        sortOrder: page?.table.id[playlistId]?.filter?.sortOrder || SortOrder.ASC,\n    };\n\n    const itemCountCheck = usePlaylistSongList({\n        query: {\n            id: playlistId,\n            limit: 1,\n            startIndex: 0,\n            ...filters,\n        },\n        serverId: server?.id,\n    });\n\n    const itemCount = itemCountCheck.data?.totalRecordCount || itemCountCheck.data?.items.length;\n\n    return (\n        <AnimatedPage key={`playlist-detail-songList-${playlistId}`}>\n            <PlaylistDetailSongListHeader\n                handleToggleShowQueryBuilder={handleToggleShowQueryBuilder}\n                itemCount={itemCount}\n                tableRef={tableRef}\n            />\n\n            {(isSmartPlaylist || showQueryBuilder) && (\n                <Box>\n                    <Paper\n                        h=\"100%\"\n                        mah=\"35vh\"\n                        w=\"100%\"\n                    >\n                        <Group p=\"1rem\">\n                            <Button\n                                compact\n                                onClick={handleToggleExpand}\n                                variant=\"default\"\n                            >\n                                {isQueryBuilderExpanded ? (\n                                    <RiArrowUpSLine size={20} />\n                                ) : (\n                                    <RiArrowDownSLine size={20} />\n                                )}\n                            </Button>\n                            <Text>Query Editor</Text>\n                        </Group>\n                        {isQueryBuilderExpanded && (\n                            <PlaylistQueryBuilder\n                                isSaving={createPlaylistMutation?.isLoading}\n                                key={JSON.stringify(detailQuery?.data?.rules)}\n                                limit={detailQuery?.data?.rules?.limit}\n                                onSave={handleSave}\n                                onSaveAs={handleSaveAs}\n                                playlistId={playlistId}\n                                query={detailQuery?.data?.rules}\n                                sortBy={detailQuery?.data?.rules?.sort || SongListSort.ALBUM}\n                                sortOrder={detailQuery?.data?.rules?.order || 'asc'}\n                            />\n                        )}\n                    </Paper>\n                </Box>\n            )}\n            <PlaylistDetailSongListContent\n                songs={\n                    server?.type === ServerType.SUBSONIC ? itemCountCheck.data?.items : undefined\n                }\n                tableRef={tableRef}\n            />\n        </AnimatedPage>\n    );\n};\n\nexport default PlaylistDetailSongListRoute;\n"],"names":["useUpdatePlaylist","args","options","queryClient","useQueryClient","useMutation","server","getServerById","api","_data","variables","query","serverId","queryKeys","usePlaylistDetail","useQuery","signal","usePlaylistSongList","PlaylistDetailSongListContent","songs","tableRef","playlistId","useParams","status","useCurrentStatus","isFocused","useAppFocus","currentSong","useCurrentSong","useCurrentServer","page","usePlaylistDetailStore","filters","useMemo","_b","_a","SongListSort","_d","_c","SortOrder","detailQuery","p","usePlaylistDetailTablePagination","pagination","setPagination","useSetPlaylistDetailTablePagination","setTable","useSetPlaylistDetailTable","handlePlayQueueAdd","usePlayQueueAdd","playButtonBehavior","usePlayButtonBehavior","isPaginationEnabled","ListDisplayType","iSClientSide","ServerType","checkPlaylistList","columnDefs","getColumnDefs","onGridReady","useCallback","params","dataSource","limit","startIndex","queryKey","songsRes","handleDragEnd","e","trackId","error","toast","handleGridSizeChange","onPaginationChanged","event","currentPageStartIndex","err","handleColumnChange","columnApi","columnsOrder","columnsInSettings","updatedColumns","column","columnInSettings","c","debouncedColumnChange","debounce","handleScroll","scrollOffset","contextMenuItems","SMART_PLAYLIST_SONG_CONTEXT_MENU_ITEMS","PLAYLIST_SONG_CONTEXT_MENU_ITEMS","handleContextMenu","useHandleTableContextMenu","LibraryItem","handleRowDoubleClick","rowClassRules","useCurrentSongRowStyles","canDrag","jsxs","Fragment","jsx","VirtualGridAutoSizerContainer","VirtualTable","data","AnimatePresence","TablePagination","UpdatePlaylistForm","body","onCancel","users","t","useTranslation","mutation","userList","user","form","useForm","_f","_e","handleSubmit","values","isPublicDisplayed","hasFeature","ServerFeature","isOwnerDisplayed","isSubmitDisabled","Stack","TextInput","Select","Switch","Group","Button","openUpdatePlaylistModal","playlist","UserListSort","openModal","closeAllModals","i18n","FILTERS","PlaylistDetailSongListHeaderFilters","handleToggleShowQueryBuilder","navigate","useNavigate","setPage","useSetPlaylistStore","setFilter","useSetPlaylistDetailFilters","isSmartPlaylist","cq","useContainerQuery","useSetPlaylistTablePagination","sortByLabel","f","handleItemSize","handleFilterChange","handleRefresh","handleSetSortBy","sortOrder","updatedFilters","handleToggleSortOrder","newSortOrder","handleSetViewType","handleTableColumns","existingColumns","newColumn","removed","newColumns","handleAutoFitColumns","handlePlay","playType","deletePlaylistMutation","useDeletePlaylist","handleDeletePlaylist","AppRoute","openDeletePlaylistModal","ConfirmModal","Text","Flex","DropdownMenu","filter","Divider","OrderToggleButton","RiMoreFill","RiPlayFill","Play","RiAddBoxFill","RiAddCircleFill","RiEditFill","RiDeleteBinFill","RiRefreshLine","RiSettings3Fill","Slider","MultiSelect","SONG_TABLE_COLUMNS","_g","PlaylistDetailSongListHeader","itemCount","PageHeader","LibraryHeaderBar","Paper","SpinnerIcon","Badge","SaveAsPlaylistForm","onSuccess","useCreatePlaylist","PlaylistDetailSongListRoute","useRef","createPlaylistMutation","handleSave","extraFilters","rules","generatePath","handleSaveAs","showQueryBuilder","setShowQueryBuilder","useState","isQueryBuilderExpanded","setIsQueryBuilderExpanded","handleToggleExpand","prev","itemCountCheck","AnimatedPage","Box","RiArrowUpSLine","RiArrowDownSLine","PlaylistQueryBuilder","_i","_h","_j","_l","_k","_n","_m","_o","_p"],"mappings":"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"}