{"version":3,"file":"song-list-grid-view-CeTQTyB6.js","sources":["../../../src/renderer/features/songs/components/song-list-grid-view.tsx"],"sourcesContent":["import { QueryKey, useQueryClient } from '@tanstack/react-query';\nimport { MutableRefObject, useCallback, useEffect, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport AutoSizer, { Size } from 'react-virtualized-auto-sizer';\nimport { ListOnScrollProps } from 'react-window';\n\nimport { controller } from '/@/renderer/api/controller';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { SONG_CARD_ROWS } from '/@/renderer/components';\nimport {\n    VirtualGridAutoSizerContainer,\n    VirtualInfiniteGrid,\n    VirtualInfiniteGridRef,\n} from '/@/renderer/components/virtual-grid';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { useHandleFavorite } from '/@/renderer/features/shared/hooks/use-handle-favorite';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer, useListStoreActions, useListStoreByKey } from '/@/renderer/store';\nimport { useEventStore } from '/@/renderer/store/event.store';\nimport {\n    LibraryItem,\n    Song,\n    SongListQuery,\n    SongListResponse,\n    SongListSort,\n} from '/@/shared/types/domain-types';\nimport { CardRow, ListDisplayType } from '/@/shared/types/types';\n\ninterface SongListGridViewProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n}\n\nexport const SongListGridView = ({ gridRef, itemCount }: SongListGridViewProps) => {\n    const queryClient = useQueryClient();\n    const server = useCurrentServer();\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const { customFilters, id, pageKey } = useListContext();\n    const { display, filter, grid } = useListStoreByKey<SongListQuery>({ key: pageKey });\n    const { setGrid } = useListStoreActions();\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const scrollOffset = searchParams.get('scrollOffset');\n    const initialScrollOffset = Number(id ? scrollOffset : grid?.scrollOffset) || 0;\n\n    const handleFavorite = useHandleFavorite({ gridRef, server });\n\n    useEffect(() => {\n        const unSub = useEventStore.subscribe((state) => {\n            const event = state.event;\n            if (event && event.event === 'favorite') {\n                const idSet = new Set(state.ids);\n                const userFavorite = event.favorite;\n\n                gridRef.current?.updateItemData((data) => {\n                    if (idSet.has(data.id)) {\n                        return {\n                            ...data,\n                            userFavorite,\n                        };\n                    }\n                    return data;\n                });\n            }\n        });\n\n        return () => {\n            unSub();\n        };\n    }, [gridRef]);\n\n    const cardRows = useMemo(() => {\n        const rows: CardRow<Song>[] = [\n            SONG_CARD_ROWS.name,\n            SONG_CARD_ROWS.album,\n            SONG_CARD_ROWS.albumArtists,\n        ];\n\n        switch (filter.sortBy) {\n            case SongListSort.ALBUM:\n                break;\n            case SongListSort.ARTIST:\n                break;\n            case SongListSort.DURATION:\n                rows.push(SONG_CARD_ROWS.duration);\n                break;\n            case SongListSort.FAVORITED:\n                break;\n            case SongListSort.NAME:\n                break;\n            case SongListSort.PLAY_COUNT:\n                rows.push(SONG_CARD_ROWS.playCount);\n                break;\n            case SongListSort.RANDOM:\n                break;\n            case SongListSort.RATING:\n                rows.push(SONG_CARD_ROWS.rating);\n                break;\n            case SongListSort.RECENTLY_ADDED:\n                rows.push(SONG_CARD_ROWS.createdAt);\n                break;\n            case SongListSort.RECENTLY_PLAYED:\n                rows.push(SONG_CARD_ROWS.lastPlayedAt);\n                break;\n            case SongListSort.YEAR:\n                rows.push(SONG_CARD_ROWS.releaseYear);\n                break;\n            case SongListSort.RELEASE_DATE:\n                rows.push(SONG_CARD_ROWS.releaseDate);\n        }\n\n        return rows;\n    }, [filter.sortBy]);\n\n    const handleGridScroll = useCallback(\n        (e: ListOnScrollProps) => {\n            if (id) {\n                setSearchParams(\n                    (params) => {\n                        params.set('scrollOffset', String(e.scrollOffset));\n                        return params;\n                    },\n                    { replace: true },\n                );\n            } else {\n                setGrid({ data: { scrollOffset: e.scrollOffset }, key: pageKey });\n            }\n        },\n        [id, pageKey, setGrid, setSearchParams],\n    );\n\n    const fetchInitialData = useCallback(() => {\n        const query: SongListQuery = {\n            ...filter,\n            ...customFilters,\n        };\n\n        const queryKey = queryKeys.songs.list(server?.id || '', query, id);\n\n        const queriesFromCache: [QueryKey, SongListResponse][] = queryClient.getQueriesData({\n            exact: false,\n            fetchStatus: 'idle',\n            queryKey,\n            stale: false,\n        });\n\n        const itemData: Song[] = [];\n\n        for (const [, data] of queriesFromCache) {\n            const { items, startIndex } = data || {};\n\n            if (items && items.length !== 1 && startIndex !== undefined) {\n                let itemIndex = 0;\n                for (\n                    let rowIndex = startIndex;\n                    rowIndex < startIndex + items.length;\n                    rowIndex += 1\n                ) {\n                    itemData[rowIndex] = items[itemIndex];\n                    itemIndex += 1;\n                }\n            }\n        }\n\n        return itemData;\n    }, [customFilters, filter, id, queryClient, server?.id]);\n\n    const fetch = useCallback(\n        async ({ skip, take }: { skip: number; take: number }) => {\n            if (!server) {\n                return [];\n            }\n\n            const query: SongListQuery = {\n                imageSize: 250,\n                limit: take,\n                ...filter,\n                ...customFilters,\n                startIndex: skip,\n            };\n\n            const queryKey = queryKeys.songs.list(server?.id || '', query, id);\n\n            const songs = await queryClient.fetchQuery(queryKey, async ({ signal }) =>\n                controller.getSongList({\n                    apiClientProps: {\n                        server,\n                        signal,\n                    },\n                    query,\n                }),\n            );\n\n            return songs;\n        },\n        [customFilters, filter, id, queryClient, server],\n    );\n\n    return (\n        <VirtualGridAutoSizerContainer>\n            <AutoSizer>\n                {({ height, width }: Size) => (\n                    <VirtualInfiniteGrid\n                        cardRows={cardRows}\n                        display={display || ListDisplayType.CARD}\n                        fetchFn={fetch}\n                        fetchInitialData={fetchInitialData}\n                        handleFavorite={handleFavorite}\n                        handlePlayQueueAdd={handlePlayQueueAdd}\n                        height={height}\n                        initialScrollOffset={initialScrollOffset}\n                        itemCount={itemCount || 0}\n                        itemGap={grid?.itemGap ?? 10}\n                        itemSize={grid?.itemSize || 200}\n                        itemType={LibraryItem.SONG}\n                        key={`song-list-${server?.id}-${display}`}\n                        loading={itemCount === undefined || itemCount === null}\n                        minimumBatchSize={40}\n                        onScroll={handleGridScroll}\n                        ref={gridRef}\n                        route={{\n                            route: AppRoute.LIBRARY_ALBUMS_DETAIL,\n                            slugs: [{ idProperty: 'albumId', slugProperty: 'albumId' }],\n                        }}\n                        width={width}\n                    />\n                )}\n            </AutoSizer>\n        </VirtualGridAutoSizerContainer>\n    );\n};\n"],"names":["SongListGridView","gridRef","itemCount","queryClient","useQueryClient","server","useCurrentServer","handlePlayQueueAdd","usePlayQueueAdd","customFilters","id","pageKey","useListContext","display","filter","grid","useListStoreByKey","setGrid","useListStoreActions","searchParams","setSearchParams","useSearchParams","scrollOffset","initialScrollOffset","handleFavorite","useHandleFavorite","useEffect","unSub","useEventStore","state","event","idSet","userFavorite","_a","data","cardRows","useMemo","rows","SONG_CARD_ROWS","SongListSort","handleGridScroll","useCallback","params","fetchInitialData","query","queryKey","queryKeys","queriesFromCache","itemData","items","startIndex","itemIndex","rowIndex","fetch","skip","take","signal","controller","jsx","VirtualGridAutoSizerContainer","AutoSizer","height","width","VirtualInfiniteGrid","ListDisplayType","LibraryItem","AppRoute"],"mappings":"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"}