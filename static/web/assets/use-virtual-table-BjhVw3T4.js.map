{"version":3,"file":"use-virtual-table-BjhVw3T4.js","sources":["../../../src/renderer/components/virtual-table/hooks/use-virtual-table.ts"],"sourcesContent":["import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport {\n    BodyScrollEvent,\n    ColDef,\n    GetRowIdParams,\n    GridReadyEvent,\n    IDatasource,\n    PaginationChangedEvent,\n    RowDoubleClickedEvent,\n} from '@ag-grid-community/core';\nimport { QueryKey, useQueryClient } from '@tanstack/react-query';\nimport debounce from 'lodash/debounce';\nimport orderBy from 'lodash/orderBy';\nimport { MutableRefObject, useCallback, useMemo } from 'react';\nimport { generatePath, useNavigate } from 'react-router';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys, QueryPagination } from '/@/renderer/api/query-keys';\nimport { getColumnDefs, VirtualTableProps } from '/@/renderer/components/virtual-table';\nimport { SetContextMenuItems, useHandleTableContextMenu } from '/@/renderer/features/context-menu';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { PersistedTableColumn, useListStoreActions } from '/@/renderer/store';\nimport { ListKey, useListStoreByKey } from '/@/renderer/store/list.store';\nimport {\n    BasePaginatedResponse,\n    BaseQuery,\n    LibraryItem,\n    ServerListItem,\n} from '/@/shared/types/domain-types';\nimport { ListDisplayType, TablePagination } from '/@/shared/types/types';\n\nexport type AgGridFetchFn<TResponse, TFilter> = (\n    args: { filter: TFilter; limit: number; startIndex: number },\n    signal?: AbortSignal,\n) => Promise<TResponse>;\n\ninterface UseAgGridProps<TFilter> {\n    columnType?: 'albumDetail' | 'generic';\n    contextMenu: SetContextMenuItems;\n    customFilters?: Partial<TFilter>;\n    isClientSide?: boolean;\n    isClientSideSort?: boolean;\n    isSearchParams?: boolean;\n    itemCount?: number;\n    itemType: LibraryItem;\n    pageKey: string;\n    server: null | ServerListItem;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nconst BLOCK_SIZE = 500;\n\nexport const useVirtualTable = <TFilter extends BaseQuery<any>>({\n    columnType,\n    contextMenu,\n    customFilters,\n    isClientSide,\n    isClientSideSort,\n    isSearchParams,\n    itemCount,\n    itemType,\n    pageKey,\n    server,\n    tableRef,\n}: UseAgGridProps<TFilter>) => {\n    const queryClient = useQueryClient();\n    const navigate = useNavigate();\n    const { setTable, setTablePagination } = useListStoreActions();\n    const properties = useListStoreByKey<TFilter>({ filter: customFilters, key: pageKey });\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const scrollOffset = searchParams.get('scrollOffset');\n    const pagination = useMemo(() => {\n        return {\n            currentPage: Number(searchParams.get('currentPage')),\n            itemsPerPage: Number(searchParams.get('itemsPerPage')),\n            totalItems: Number(searchParams.get('totalItems')),\n            totalPages: Number(searchParams.get('totalPages')),\n        };\n    }, [searchParams]);\n\n    const initialTableIndex =\n        Number(isSearchParams ? scrollOffset : properties.table.scrollOffset) || 0;\n\n    const isPaginationEnabled = properties.display === ListDisplayType.TABLE_PAGINATED;\n\n    const columnDefs: ColDef[] = useMemo(() => {\n        return getColumnDefs(properties.table.columns, true, columnType);\n    }, [columnType, properties.table.columns]);\n\n    const defaultColumnDefs: ColDef = useMemo(() => {\n        return {\n            lockPinned: true,\n            lockVisible: true,\n            resizable: true,\n        };\n    }, []);\n\n    const onGridSizeChange = () => {\n        if (properties.table.autoFit) {\n            tableRef?.current?.api.sizeColumnsToFit();\n        }\n    };\n\n    const queryKeyFn:\n        | ((serverId: string, query: Record<any, any>, pagination: QueryPagination) => QueryKey)\n        | null = useMemo(() => {\n        switch (itemType) {\n            case LibraryItem.ALBUM:\n                return queryKeys.albums.list;\n            case LibraryItem.ALBUM_ARTIST:\n                return queryKeys.albumArtists.list;\n            case LibraryItem.ARTIST:\n                return queryKeys.artists.list;\n            case LibraryItem.GENRE:\n                return queryKeys.genres.list;\n            case LibraryItem.PLAYLIST:\n                return queryKeys.playlists.list;\n            case LibraryItem.SONG:\n                return queryKeys.songs.list;\n            default:\n                return null;\n        }\n    }, [itemType]);\n\n    const queryFn: ((args: any) => Promise<BasePaginatedResponse<any> | null | undefined>) | null =\n        useMemo(() => {\n            switch (itemType) {\n                case LibraryItem.ALBUM:\n                    return api.controller.getAlbumList;\n                case LibraryItem.ALBUM_ARTIST:\n                    return api.controller.getAlbumArtistList;\n                case LibraryItem.ARTIST:\n                    return api.controller.getArtistList;\n                case LibraryItem.GENRE:\n                    return api.controller.getGenreList;\n                case LibraryItem.PLAYLIST:\n                    return api.controller.getPlaylistList;\n                case LibraryItem.SONG:\n                    return api.controller.getSongList;\n                default:\n                    return null;\n            }\n        }, [itemType]);\n\n    const onGridReady = useCallback(\n        (params: GridReadyEvent) => {\n            const dataSource: IDatasource = {\n                getRows: async (params) => {\n                    const limit = params.endRow - params.startRow;\n                    const startIndex = params.startRow;\n\n                    const queryKey = queryKeyFn!(\n                        server?.id || '',\n                        {\n                            ...(properties.filter as any),\n                        },\n                        {\n                            limit,\n                            startIndex,\n                        },\n                    );\n\n                    const results = (await queryClient.fetchQuery(queryKey, async ({ signal }) => {\n                        const res = await queryFn!({\n                            apiClientProps: {\n                                server,\n                                signal,\n                            },\n                            query: {\n                                ...properties.filter,\n                                limit,\n                                startIndex,\n                            },\n                        });\n\n                        return res;\n                    })) as BasePaginatedResponse<any>;\n\n                    if (isClientSideSort && results?.items) {\n                        const sortedResults = orderBy(\n                            results.items,\n                            [(item) => String(item[properties.filter.sortBy]).toLowerCase()],\n                            properties.filter.sortOrder === 'DESC' ? ['desc'] : ['asc'],\n                        );\n\n                        params.successCallback(sortedResults || [], results?.totalRecordCount || 0);\n                        return;\n                    }\n\n                    if (results.totalRecordCount === null) {\n                        const hasMoreRows = results?.items?.length === BLOCK_SIZE;\n                        const lastRowIndex = hasMoreRows\n                            ? undefined\n                            : params.startRow + results.items.length;\n\n                        params.successCallback(\n                            results?.items || [],\n                            hasMoreRows ? undefined : lastRowIndex,\n                        );\n                        return;\n                    }\n\n                    params.successCallback(results?.items || [], results?.totalRecordCount || 0);\n                },\n                rowCount: undefined,\n            };\n\n            params.api.setDatasource(dataSource);\n            params.api.ensureIndexVisible(initialTableIndex, 'top');\n        },\n        [\n            initialTableIndex,\n            queryKeyFn,\n            server,\n            properties.filter,\n            queryClient,\n            isClientSideSort,\n            queryFn,\n        ],\n    );\n\n    const setParamsTablePagination = useCallback(\n        (args: { data: Partial<TablePagination>; key: ListKey }) => {\n            const { data } = args;\n\n            setSearchParams(\n                (params) => {\n                    if (data.currentPage) params.set('currentPage', String(data.currentPage));\n                    if (data.itemsPerPage) params.set('itemsPerPage', String(data.itemsPerPage));\n                    if (data.totalItems) params.set('totalItems', String(data.totalItems));\n                    if (data.totalPages) params.set('totalPages', String(data.totalPages));\n                    return params;\n                },\n                { replace: true },\n            );\n        },\n        [setSearchParams],\n    );\n\n    const onPaginationChanged = useCallback(\n        (event: PaginationChangedEvent) => {\n            if (!isPaginationEnabled || !event.api) return;\n\n            try {\n                // Scroll to top of page on pagination change\n                const currentPageStartIndex =\n                    properties.table.pagination.currentPage *\n                    properties.table.pagination.itemsPerPage;\n                event.api?.ensureIndexVisible(currentPageStartIndex, 'top');\n            } catch (err) {\n                console.log(err);\n            }\n\n            if (isSearchParams) {\n                setSearchParams(\n                    (params) => {\n                        params.set('currentPage', String(event.api.paginationGetCurrentPage()));\n                        params.set('itemsPerPage', String(event.api.paginationGetPageSize()));\n                        params.set('totalItems', String(event.api.paginationGetRowCount()));\n                        params.set('totalPages', String(event.api.paginationGetTotalPages() + 1));\n                        return params;\n                    },\n                    { replace: true },\n                );\n            } else {\n                setTablePagination({\n                    data: {\n                        itemsPerPage: event.api.paginationGetPageSize(),\n                        totalItems: event.api.paginationGetRowCount(),\n                        totalPages: event.api.paginationGetTotalPages() + 1,\n                    },\n                    key: pageKey,\n                });\n            }\n        },\n        [\n            isPaginationEnabled,\n            isSearchParams,\n            properties.table.pagination.currentPage,\n            properties.table.pagination.itemsPerPage,\n            setSearchParams,\n            setTablePagination,\n            pageKey,\n        ],\n    );\n\n    const onColumnMoved = useCallback(() => {\n        const { columnApi } = tableRef?.current || {};\n        const columnsOrder = columnApi?.getAllGridColumns();\n\n        if (!columnsOrder) return;\n\n        const columnsInSettings = properties.table.columns;\n        const updatedColumns: PersistedTableColumn[] = [];\n        for (const column of columnsOrder) {\n            const columnInSettings = columnsInSettings.find(\n                (c) => c.column === column.getColDef().colId,\n            );\n\n            if (columnInSettings) {\n                updatedColumns.push({\n                    ...columnInSettings,\n                    ...(!properties.table.autoFit && {\n                        width: column.getActualWidth(),\n                    }),\n                });\n            }\n        }\n\n        setTable({ data: { columns: updatedColumns }, key: pageKey });\n    }, [pageKey, properties.table.autoFit, properties.table.columns, setTable, tableRef]);\n\n    const onColumnResized = debounce(onColumnMoved, 200);\n\n    const onBodyScrollEnd = (e: BodyScrollEvent) => {\n        const scrollOffset = Number((e.top / properties.table.rowHeight).toFixed(0));\n\n        if (isSearchParams) {\n            setSearchParams(\n                (params) => {\n                    params.set('scrollOffset', String(scrollOffset));\n                    return params;\n                },\n                { replace: true },\n            );\n        } else {\n            setTable({ data: { scrollOffset }, key: pageKey });\n        }\n    };\n\n    const onCellContextMenu = useHandleTableContextMenu(itemType, contextMenu);\n\n    const context = {\n        itemType,\n        onCellContextMenu,\n    };\n\n    const defaultTableProps: Partial<VirtualTableProps> = useMemo(() => {\n        return {\n            alwaysShowHorizontalScroll: true,\n            autoFitColumns: properties.table.autoFit,\n            blockLoadDebounceMillis: 200,\n            cacheBlockSize: BLOCK_SIZE,\n            getRowId: (data: GetRowIdParams<any>) => data.data.id,\n            infiniteInitialRowCount: itemCount || 100,\n            pagination: isPaginationEnabled,\n            paginationAutoPageSize: isPaginationEnabled,\n            paginationPageSize: properties.table.pagination.itemsPerPage || 100,\n            paginationProps: isPaginationEnabled\n                ? {\n                      pageKey,\n                      pagination: isSearchParams ? pagination : properties.table.pagination,\n                      setPagination: isSearchParams ? setParamsTablePagination : setTablePagination,\n                  }\n                : undefined,\n            rowBuffer: 20,\n            rowHeight: properties.table.rowHeight || 40,\n            rowModelType: isClientSide ? 'clientSide' : 'infinite',\n            suppressRowDrag: true,\n        };\n    }, [\n        isClientSide,\n        isPaginationEnabled,\n        isSearchParams,\n        itemCount,\n        pageKey,\n        pagination,\n        properties.table.autoFit,\n        properties.table.pagination,\n        properties.table.rowHeight,\n        setParamsTablePagination,\n        setTablePagination,\n    ]);\n\n    const onRowDoubleClicked = useCallback(\n        (e: RowDoubleClickedEvent) => {\n            switch (itemType) {\n                case LibraryItem.ALBUM:\n                    navigate(generatePath(AppRoute.LIBRARY_ALBUMS_DETAIL, { albumId: e.data.id }));\n                    break;\n                case LibraryItem.ALBUM_ARTIST:\n                    navigate(\n                        generatePath(AppRoute.LIBRARY_ALBUM_ARTISTS_DETAIL, {\n                            albumArtistId: e.data.id,\n                        }),\n                    );\n                    break;\n                case LibraryItem.ARTIST:\n                    navigate(\n                        generatePath(AppRoute.LIBRARY_ARTISTS_DETAIL, {\n                            artistId: e.data.id,\n                        }),\n                    );\n                    break;\n                case LibraryItem.PLAYLIST:\n                    navigate(\n                        generatePath(AppRoute.PLAYLISTS_DETAIL_SONGS, { playlistId: e.data.id }),\n                    );\n                    break;\n                default:\n                    break;\n            }\n        },\n        [itemType, navigate],\n    );\n\n    return {\n        columnDefs,\n        context,\n        defaultColumnDefs,\n        onBodyScrollEnd,\n        onCellContextMenu,\n        onColumnMoved,\n        onColumnResized,\n        onGridReady,\n        onGridSizeChange,\n        onPaginationChanged,\n        onRowDoubleClicked,\n        ...defaultTableProps,\n    };\n};\n"],"names":["BLOCK_SIZE","useVirtualTable","columnType","contextMenu","customFilters","isClientSide","isClientSideSort","isSearchParams","itemCount","itemType","pageKey","server","tableRef","queryClient","useQueryClient","navigate","useNavigate","setTable","setTablePagination","useListStoreActions","properties","useListStoreByKey","searchParams","setSearchParams","useSearchParams","scrollOffset","pagination","useMemo","initialTableIndex","isPaginationEnabled","ListDisplayType","columnDefs","getColumnDefs","defaultColumnDefs","onGridSizeChange","_a","queryKeyFn","LibraryItem","queryKeys","queryFn","api","onGridReady","useCallback","params","dataSource","limit","startIndex","queryKey","results","signal","sortedResults","orderBy","item","hasMoreRows","lastRowIndex","setParamsTablePagination","args","data","onPaginationChanged","event","currentPageStartIndex","err","onColumnMoved","columnApi","columnsOrder","columnsInSettings","updatedColumns","column","columnInSettings","c","onColumnResized","debounce","onBodyScrollEnd","e","onCellContextMenu","useHandleTableContextMenu","context","defaultTableProps","onRowDoubleClicked","generatePath","AppRoute"],"mappings":"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"}