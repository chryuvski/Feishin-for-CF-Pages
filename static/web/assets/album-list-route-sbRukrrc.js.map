{"version":3,"mappings":"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","names":["AlbumListGridView","lazy","module","AlbumListTableView","AlbumListContent","gridRef","itemCount","tableRef","pageKey","useListContext","display","useListStoreByKey","jsx","Suspense","Spinner","ListDisplayType","useAlbumArtistList","args","options","query","serverId","server","getServerById","useQuery","signal","api","queryKeys","JellyfinAlbumFilters","customFilters","disableArtistFilter","onFilterChange","t","useTranslation","filter","useListFilterByKey","setFilter","useListStoreActions","genreListQuery","useGenreList","GenreListSort","SortOrder","genreList","useMemo","genre","tagsQuery","useTagList","LibraryItem","selectedTags","_c","_b","_a","toggleFilters","e","updatedFilters","handleMinYearFilter","debounce","handleMaxYearFilter","handleGenresFilter","albumArtistSearchTerm","setAlbumArtistSearchTerm","useState","albumArtistListQuery","AlbumArtistListSort","selectableAlbumArtists","artist","handleAlbumArtistFilter","handleTagFilter","jsxs","Stack","Group","Text","Switch","Divider","NumberInput","MultiSelectWithInvalidData","_f","_e","_d","SpinnerIcon","_h","_g","NavidromeAlbumFilters","handleYearFilter","tag","SelectWithInvalidData","_i","_k","_j","value","SubsonicAlbumFilters","type","data","Select","FILTERS","i18n","AlbumListSort","AlbumListHeaderFilters","queryClient","useQueryClient","handlePlay","useCurrentServer","setDisplayType","setGrid","setTable","grid","table","cq","useContainerQuery","handleRefreshGrid","handleRefreshTable","useListFilterRefresh","musicFoldersQuery","useMusicFolders","sortByLabel","f","isGrid","useCallback","handleOpenFiltersModal","FilterComponent","ServerType","openModal","handleRefresh","handleSetSortBy","sortOrder","handleSetMusicFolder","handleToggleSortOrder","newSortOrder","handleItemSize","handleItemGap","handleSetViewType","handleTableColumns","values","existingColumns","newColumn","removed","column","newColumns","handleAutoFitColumns","isFilterApplied","isNavidromeFilterApplied","isJellyfinFilterApplied","isSubsonicFilterApplied","isFolderFilterApplied","Flex","DropdownMenu","Button","OrderToggleButton","Fragment","RiFolder2Fill","folder","RiFilterFill","RiRefreshLine","RiMoreFill","RiPlayFill","Play","RiAddBoxFill","RiAddCircleFill","RiSettings3Fill","Slider","MultiSelect","ALBUM_TABLE_COLUMNS","AlbumListHeader","genreId","title","playButtonBehavior","usePlayButtonBehavior","genreRef","useRef","refresh","search","useDisplayRefresh","handleSearch","useEffect","PageHeader","LibraryHeaderBar","titleCase","SearchInput","FilterBar","useAlbumListCount","AlbumListRoute","searchParams","useSearchParams","albumArtistId","useParams","handlePlayQueueAdd","usePlayQueueAdd","isEmpty","albumListFilter","genreTitle","g","itemCountCheck","playType","queryKey","albumListRes","albumIds","a","providerValue","sentenceCase","AnimatedPage","ListContext"],"ignoreList":[],"sources":["../../../src/renderer/features/albums/components/album-list-content.tsx","../../../src/renderer/features/artists/queries/album-artist-list-query.ts","../../../src/renderer/features/albums/components/jellyfin-album-filters.tsx","../../../src/renderer/features/albums/components/navidrome-album-filters.tsx","../../../src/renderer/features/albums/components/subsonic-album-filters.tsx","../../../src/renderer/features/albums/components/album-list-header-filters.tsx","../../../src/renderer/features/albums/components/album-list-header.tsx","../../../src/renderer/features/albums/queries/album-list-count-query.ts","../../../src/renderer/features/albums/routes/album-list-route.tsx"],"sourcesContent":["import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { lazy, MutableRefObject, Suspense } from 'react';\n\nimport { Spinner } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { useListStoreByKey } from '/@/renderer/store';\nimport { ListDisplayType } from '/@/shared/types/types';\n\nconst AlbumListGridView = lazy(() =>\n    import('/@/renderer/features/albums/components/album-list-grid-view').then((module) => ({\n        default: module.AlbumListGridView,\n    })),\n);\n\nconst AlbumListTableView = lazy(() =>\n    import('/@/renderer/features/albums/components/album-list-table-view').then((module) => ({\n        default: module.AlbumListTableView,\n    })),\n);\n\ninterface AlbumListContentProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const AlbumListContent = ({ gridRef, itemCount, tableRef }: AlbumListContentProps) => {\n    const { pageKey } = useListContext();\n    const { display } = useListStoreByKey({ key: pageKey });\n\n    return (\n        <Suspense fallback={<Spinner container />}>\n            {display === ListDisplayType.CARD || display === ListDisplayType.POSTER ? (\n                <AlbumListGridView\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                />\n            ) : (\n                <AlbumListTableView\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            )}\n        </Suspense>\n    );\n};\n","import type { AlbumArtistListQuery } from '/@/shared/types/domain-types';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { QueryHookArgs } from '/@/renderer/lib/react-query';\nimport { getServerById } from '/@/renderer/store';\n\nexport const useAlbumArtistList = (args: QueryHookArgs<AlbumArtistListQuery>) => {\n    const { options, query, serverId } = args || {};\n    const server = getServerById(serverId);\n\n    return useQuery({\n        enabled: !!server?.id,\n        queryFn: ({ signal }) => {\n            if (!server) throw new Error('Server not found');\n            return api.controller.getAlbumArtistList({ apiClientProps: { server, signal }, query });\n        },\n        queryKey: queryKeys.albumArtists.list(server?.id || '', query),\n        ...options,\n    });\n};\n","import { Divider, Group, Stack } from '@mantine/core';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { NumberInput, SpinnerIcon, Switch, Text } from '/@/renderer/components';\nimport { MultiSelectWithInvalidData } from '/@/renderer/components/select-with-invalid-data';\nimport { useAlbumArtistList } from '/@/renderer/features/artists/queries/album-artist-list-query';\nimport { useGenreList } from '/@/renderer/features/genres';\nimport { useTagList } from '/@/renderer/features/tag/queries/use-tag-list';\nimport { AlbumListFilter, useListFilterByKey, useListStoreActions } from '/@/renderer/store';\nimport {\n    AlbumArtistListSort,\n    AlbumListQuery,\n    GenreListSort,\n    LibraryItem,\n    SortOrder,\n} from '/@/shared/types/domain-types';\n\ninterface JellyfinAlbumFiltersProps {\n    customFilters?: Partial<AlbumListFilter>;\n    disableArtistFilter?: boolean;\n    onFilterChange: (filters: AlbumListFilter) => void;\n    pageKey: string;\n    serverId?: string;\n}\n\nexport const JellyfinAlbumFilters = ({\n    customFilters,\n    disableArtistFilter,\n    onFilterChange,\n    pageKey,\n    serverId,\n}: JellyfinAlbumFiltersProps) => {\n    const { t } = useTranslation();\n    const filter = useListFilterByKey<AlbumListQuery>({ key: pageKey });\n    const { setFilter } = useListStoreActions();\n\n    // TODO - eventually replace with /items/filters endpoint to fetch genres and tags specific to the selected library\n    const genreListQuery = useGenreList({\n        query: {\n            musicFolderId: filter?.musicFolderId,\n            sortBy: GenreListSort.NAME,\n            sortOrder: SortOrder.ASC,\n            startIndex: 0,\n        },\n        serverId,\n    });\n\n    const genreList = useMemo(() => {\n        if (!genreListQuery?.data) return [];\n        return genreListQuery.data.items.map((genre) => ({\n            label: genre.name,\n            value: genre.id,\n        }));\n    }, [genreListQuery.data]);\n\n    const tagsQuery = useTagList({\n        query: {\n            folder: filter?.musicFolderId,\n            type: LibraryItem.ALBUM,\n        },\n        serverId,\n    });\n\n    const selectedTags = useMemo(() => {\n        return filter?._custom?.jellyfin?.Tags?.split('|');\n    }, [filter?._custom?.jellyfin?.Tags]);\n\n    const toggleFilters = [\n        {\n            label: t('filter.isFavorited', { postProcess: 'sentenceCase' }),\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n                const updatedFilters = setFilter({\n                    customFilters,\n                    data: {\n                        _custom: filter?._custom,\n                        favorite: e.currentTarget.checked ? true : undefined,\n                    },\n                    itemType: LibraryItem.ALBUM,\n                    key: pageKey,\n                }) as AlbumListFilter;\n                onFilterChange(updatedFilters);\n            },\n            value: filter?.favorite,\n        },\n    ];\n\n    const handleMinYearFilter = debounce((e: number | string) => {\n        if (typeof e === 'number' && (e < 1700 || e > 2300)) return;\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: filter?._custom,\n                minYear: e === '' ? undefined : (e as number),\n            },\n            itemType: LibraryItem.ALBUM,\n            key: pageKey,\n        }) as AlbumListFilter;\n        onFilterChange(updatedFilters);\n    }, 500);\n\n    const handleMaxYearFilter = debounce((e: number | string) => {\n        if (typeof e === 'number' && (e < 1700 || e > 2300)) return;\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: filter?._custom,\n                maxYear: e === '' ? undefined : (e as number),\n            },\n            itemType: LibraryItem.ALBUM,\n            key: pageKey,\n        }) as AlbumListFilter;\n        onFilterChange(updatedFilters);\n    }, 500);\n\n    const handleGenresFilter = debounce((e: string[] | undefined) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: filter?._custom,\n                genres: e,\n            },\n            itemType: LibraryItem.ALBUM,\n            key: pageKey,\n        }) as AlbumListFilter;\n        onFilterChange(updatedFilters);\n    }, 250);\n\n    const [albumArtistSearchTerm, setAlbumArtistSearchTerm] = useState<string>('');\n\n    const albumArtistListQuery = useAlbumArtistList({\n        options: {\n            cacheTime: 1000 * 60 * 2,\n            staleTime: 1000 * 60 * 1,\n        },\n        query: {\n            sortBy: AlbumArtistListSort.NAME,\n            sortOrder: SortOrder.ASC,\n            startIndex: 0,\n        },\n        serverId,\n    });\n\n    const selectableAlbumArtists = useMemo(() => {\n        if (!albumArtistListQuery?.data?.items) return [];\n\n        return albumArtistListQuery?.data?.items?.map((artist) => ({\n            label: artist.name,\n            value: artist.id,\n        }));\n    }, [albumArtistListQuery?.data?.items]);\n\n    const handleAlbumArtistFilter = (e: null | string[]) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: filter?._custom,\n                artistIds: e || undefined,\n            },\n            itemType: LibraryItem.ALBUM,\n            key: pageKey,\n        }) as AlbumListFilter;\n        onFilterChange(updatedFilters);\n    };\n\n    const handleTagFilter = debounce((e: string[] | undefined) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: {\n                    ...filter?._custom,\n                    jellyfin: {\n                        ...filter?._custom?.jellyfin,\n                        Tags: e?.join('|') || undefined,\n                    },\n                },\n            },\n            itemType: LibraryItem.SONG,\n            key: pageKey,\n        }) as AlbumListFilter;\n        onFilterChange(updatedFilters);\n    }, 250);\n\n    return (\n        <Stack p=\"0.8rem\">\n            {toggleFilters.map((filter) => (\n                <Group\n                    key={`nd-filter-${filter.label}`}\n                    position=\"apart\"\n                >\n                    <Text>{filter.label}</Text>\n                    <Switch\n                        checked={filter?.value || false}\n                        onChange={filter.onChange}\n                        size=\"xs\"\n                    />\n                </Group>\n            ))}\n            <Divider my=\"0.5rem\" />\n            <Group grow>\n                <NumberInput\n                    defaultValue={filter?.minYear}\n                    hideControls={false}\n                    label={t('filter.fromYear', { postProcess: 'sentenceCase' })}\n                    max={2300}\n                    min={1700}\n                    onChange={(e) => handleMinYearFilter(e)}\n                    required={!!filter?.maxYear}\n                />\n                <NumberInput\n                    defaultValue={filter?.maxYear}\n                    hideControls={false}\n                    label={t('filter.toYear', { postProcess: 'sentenceCase' })}\n                    max={2300}\n                    min={1700}\n                    onChange={(e) => handleMaxYearFilter(e)}\n                    required={!!filter?.minYear}\n                />\n            </Group>\n            <Group grow>\n                <MultiSelectWithInvalidData\n                    clearable\n                    data={genreList}\n                    defaultValue={filter.genres}\n                    label={t('entity.genre', { count: 2, postProcess: 'sentenceCase' })}\n                    onChange={handleGenresFilter}\n                    searchable\n                />\n            </Group>\n\n            <Group grow>\n                <MultiSelectWithInvalidData\n                    clearable\n                    data={selectableAlbumArtists}\n                    defaultValue={filter?._custom?.jellyfin?.AlbumArtistIds?.split(',')}\n                    disabled={disableArtistFilter}\n                    label={t('entity.artist', { count: 2, postProcess: 'sentenceCase' })}\n                    limit={300}\n                    onChange={handleAlbumArtistFilter}\n                    onSearchChange={setAlbumArtistSearchTerm}\n                    placeholder=\"Type to search for an artist\"\n                    rightSection={albumArtistListQuery.isFetching ? <SpinnerIcon /> : undefined}\n                    searchable\n                    searchValue={albumArtistSearchTerm}\n                />\n            </Group>\n            {tagsQuery.data?.boolTags?.length && (\n                <Group grow>\n                    <MultiSelectWithInvalidData\n                        clearable\n                        data={tagsQuery.data.boolTags}\n                        defaultValue={selectedTags}\n                        label={t('common.tags', { postProcess: 'sentenceCase' })}\n                        onChange={handleTagFilter}\n                        searchable\n                        width={250}\n                    />\n                </Group>\n            )}\n        </Stack>\n    );\n};\n","import { Divider, Group, Stack } from '@mantine/core';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { NumberInput, SpinnerIcon, Switch, Text } from '/@/renderer/components';\nimport { SelectWithInvalidData } from '/@/renderer/components/select-with-invalid-data';\nimport { useAlbumArtistList } from '/@/renderer/features/artists/queries/album-artist-list-query';\nimport { useGenreList } from '/@/renderer/features/genres';\nimport { useTagList } from '/@/renderer/features/tag/queries/use-tag-list';\nimport { AlbumListFilter, useListStoreActions, useListStoreByKey } from '/@/renderer/store';\nimport {\n    AlbumArtistListSort,\n    AlbumListQuery,\n    GenreListSort,\n    LibraryItem,\n    SortOrder,\n} from '/@/shared/types/domain-types';\n\ninterface NavidromeAlbumFiltersProps {\n    customFilters?: Partial<AlbumListFilter>;\n    disableArtistFilter?: boolean;\n    onFilterChange: (filters: AlbumListFilter) => void;\n    pageKey: string;\n    serverId?: string;\n}\n\nexport const NavidromeAlbumFilters = ({\n    customFilters,\n    disableArtistFilter,\n    onFilterChange,\n    pageKey,\n    serverId,\n}: NavidromeAlbumFiltersProps) => {\n    const { t } = useTranslation();\n    const { filter } = useListStoreByKey<AlbumListQuery>({ key: pageKey });\n    const { setFilter } = useListStoreActions();\n\n    const genreListQuery = useGenreList({\n        query: {\n            sortBy: GenreListSort.NAME,\n            sortOrder: SortOrder.ASC,\n            startIndex: 0,\n        },\n        serverId,\n    });\n\n    const genreList = useMemo(() => {\n        if (!genreListQuery?.data) return [];\n        return genreListQuery.data.items.map((genre) => ({\n            label: genre.name,\n            value: genre.id,\n        }));\n    }, [genreListQuery.data]);\n\n    const handleGenresFilter = debounce((e: null | string) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: filter._custom,\n                genres: e ? [e] : undefined,\n            },\n            itemType: LibraryItem.ALBUM,\n            key: pageKey,\n        }) as AlbumListFilter;\n        onFilterChange(updatedFilters);\n    }, 250);\n\n    const tagsQuery = useTagList({\n        query: {\n            type: LibraryItem.ALBUM,\n        },\n        serverId,\n    });\n\n    const toggleFilters = [\n        {\n            label: t('filter.isRated', { postProcess: 'sentenceCase' }),\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n                const updatedFilters = setFilter({\n                    customFilters,\n                    data: {\n                        _custom: {\n                            ...filter._custom,\n                            navidrome: {\n                                ...filter._custom?.navidrome,\n                                has_rating: e.currentTarget.checked ? true : undefined,\n                            },\n                        },\n                    },\n                    itemType: LibraryItem.ALBUM,\n                    key: pageKey,\n                }) as AlbumListFilter;\n                onFilterChange(updatedFilters);\n            },\n            value: filter._custom?.navidrome?.has_rating,\n        },\n        {\n            label: t('filter.isFavorited', { postProcess: 'sentenceCase' }),\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n                const updatedFilters = setFilter({\n                    customFilters,\n                    data: {\n                        _custom: filter._custom,\n                        favorite: e.currentTarget.checked ? true : undefined,\n                    },\n                    itemType: LibraryItem.ALBUM,\n                    key: pageKey,\n                }) as AlbumListFilter;\n                onFilterChange(updatedFilters);\n            },\n            value: filter.favorite,\n        },\n        {\n            label: t('filter.isCompilation', { postProcess: 'sentenceCase' }),\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n                const updatedFilters = setFilter({\n                    customFilters,\n                    data: {\n                        _custom: filter._custom,\n                        compilation: e.currentTarget.checked ? true : undefined,\n                    },\n                    itemType: LibraryItem.ALBUM,\n                    key: pageKey,\n                }) as AlbumListFilter;\n                onFilterChange(updatedFilters);\n            },\n            value: filter.compilation,\n        },\n        {\n            label: t('filter.isRecentlyPlayed', { postProcess: 'sentenceCase' }),\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n                const updatedFilters = setFilter({\n                    customFilters,\n                    data: {\n                        _custom: {\n                            ...filter._custom,\n                            navidrome: {\n                                ...filter._custom?.navidrome,\n                                recently_played: e.currentTarget.checked ? true : undefined,\n                            },\n                        },\n                    },\n                    itemType: LibraryItem.ALBUM,\n                    key: pageKey,\n                }) as AlbumListFilter;\n                onFilterChange(updatedFilters);\n            },\n            value: filter._custom?.navidrome?.recently_played,\n        },\n    ];\n\n    const handleYearFilter = debounce((e: number | string) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: {\n                    ...filter._custom,\n                    navidrome: {\n                        ...filter._custom?.navidrome,\n                        year: e === '' ? undefined : (e as number),\n                    },\n                },\n            },\n            itemType: LibraryItem.ALBUM,\n            key: pageKey,\n        }) as AlbumListFilter;\n        onFilterChange(updatedFilters);\n    }, 500);\n\n    const [albumArtistSearchTerm, setAlbumArtistSearchTerm] = useState<string>('');\n\n    const albumArtistListQuery = useAlbumArtistList({\n        options: {\n            cacheTime: 1000 * 60 * 2,\n            staleTime: 1000 * 60 * 1,\n        },\n        query: {\n            // searchTerm: debouncedSearchTerm,\n            sortBy: AlbumArtistListSort.NAME,\n            sortOrder: SortOrder.ASC,\n            startIndex: 0,\n        },\n        serverId,\n    });\n\n    const selectableAlbumArtists = useMemo(() => {\n        if (!albumArtistListQuery?.data?.items) return [];\n\n        return albumArtistListQuery?.data?.items?.map((artist) => ({\n            label: artist.name,\n            value: artist.id,\n        }));\n    }, [albumArtistListQuery?.data?.items]);\n\n    const handleAlbumArtistFilter = (e: null | string) => {\n        const updatedFilters = setFilter({\n            data: {\n                _custom: {\n                    ...filter._custom,\n                    navidrome: {\n                        ...filter._custom?.navidrome,\n                        artist_id: e || undefined,\n                    },\n                },\n            },\n            itemType: LibraryItem.ALBUM,\n            key: pageKey,\n        }) as AlbumListFilter;\n        onFilterChange(updatedFilters);\n    };\n\n    const handleTagFilter = debounce((tag: string, e: null | string) => {\n        const updatedFilters = setFilter({\n            customFilters,\n            data: {\n                _custom: {\n                    ...filter._custom,\n                    navidrome: {\n                        ...filter._custom?.navidrome,\n                        [tag]: e || undefined,\n                    },\n                },\n            },\n            itemType: LibraryItem.SONG,\n            key: pageKey,\n        }) as AlbumListFilter;\n\n        onFilterChange(updatedFilters);\n    }, 250);\n\n    return (\n        <Stack p=\"0.8rem\">\n            {toggleFilters.map((filter) => (\n                <Group\n                    key={`nd-filter-${filter.label}`}\n                    position=\"apart\"\n                >\n                    <Text>{filter.label}</Text>\n                    <Switch\n                        checked={filter?.value || false}\n                        onChange={filter.onChange}\n                    />\n                </Group>\n            ))}\n            <Divider my=\"0.5rem\" />\n            <Group grow>\n                <NumberInput\n                    defaultValue={filter._custom?.navidrome?.year}\n                    hideControls={false}\n                    label={t('common.year', { postProcess: 'titleCase' })}\n                    max={5000}\n                    min={0}\n                    onChange={(e) => handleYearFilter(e)}\n                />\n                <SelectWithInvalidData\n                    clearable\n                    data={genreList}\n                    defaultValue={filter.genres && filter.genres[0]}\n                    label={t('entity.genre', { count: 1, postProcess: 'titleCase' })}\n                    onChange={handleGenresFilter}\n                    searchable\n                />\n            </Group>\n            <Group grow>\n                <SelectWithInvalidData\n                    clearable\n                    data={selectableAlbumArtists}\n                    defaultValue={filter._custom?.navidrome?.artist_id}\n                    disabled={disableArtistFilter}\n                    label={t('entity.artist', { count: 1, postProcess: 'titleCase' })}\n                    limit={300}\n                    onChange={handleAlbumArtistFilter}\n                    onSearchChange={setAlbumArtistSearchTerm}\n                    rightSection={albumArtistListQuery.isFetching ? <SpinnerIcon /> : undefined}\n                    searchable\n                    searchValue={albumArtistSearchTerm}\n                />\n            </Group>\n            {tagsQuery.data?.enumTags?.length &&\n                tagsQuery.data.enumTags.map((tag) => (\n                    <Group\n                        grow\n                        key={tag.name}\n                    >\n                        <SelectWithInvalidData\n                            clearable\n                            data={tag.options}\n                            defaultValue={\n                                filter._custom?.navidrome?.[tag.name] as string | undefined\n                            }\n                            label={tag.name}\n                            onChange={(value) => handleTagFilter(tag.name, value)}\n                            searchable\n                            width={150}\n                        />\n                    </Group>\n                ))}\n        </Stack>\n    );\n};\n","import { Divider, Group, Stack } from '@mantine/core';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { NumberInput, Select, Switch, Text } from '/@/renderer/components';\nimport { useGenreList } from '/@/renderer/features/genres';\nimport { AlbumListFilter, useListStoreActions, useListStoreByKey } from '/@/renderer/store';\nimport {\n    AlbumListQuery,\n    GenreListSort,\n    LibraryItem,\n    SortOrder,\n} from '/@/shared/types/domain-types';\n\ninterface SubsonicAlbumFiltersProps {\n    onFilterChange: (filters: AlbumListFilter) => void;\n    pageKey: string;\n    serverId?: string;\n}\n\nexport const SubsonicAlbumFilters = ({\n    onFilterChange,\n    pageKey,\n    serverId,\n}: SubsonicAlbumFiltersProps) => {\n    const { t } = useTranslation();\n    const { filter } = useListStoreByKey<AlbumListQuery>({ key: pageKey });\n    const { setFilter } = useListStoreActions();\n\n    const genreListQuery = useGenreList({\n        query: {\n            sortBy: GenreListSort.NAME,\n            sortOrder: SortOrder.ASC,\n            startIndex: 0,\n        },\n        serverId,\n    });\n\n    const genreList = useMemo(() => {\n        if (!genreListQuery?.data) return [];\n        return genreListQuery.data.items.map((genre) => ({\n            label: genre.name,\n            value: genre.id,\n        }));\n    }, [genreListQuery.data]);\n\n    const handleGenresFilter = debounce((e: null | string) => {\n        const updatedFilters = setFilter({\n            data: {\n                genres: e ? [e] : undefined,\n            },\n            itemType: LibraryItem.ALBUM,\n            key: pageKey,\n        }) as AlbumListFilter;\n\n        onFilterChange(updatedFilters);\n    }, 250);\n\n    const toggleFilters = [\n        {\n            label: t('filter.isFavorited', { postProcess: 'sentenceCase' }),\n            onChange: (e: ChangeEvent<HTMLInputElement>) => {\n                const updatedFilters = setFilter({\n                    data: {\n                        favorite: e.target.checked ? true : undefined,\n                    },\n                    itemType: LibraryItem.ALBUM,\n                    key: pageKey,\n                }) as AlbumListFilter;\n                onFilterChange(updatedFilters);\n            },\n            value: filter.favorite,\n        },\n    ];\n\n    const handleYearFilter = debounce((e: number | string, type: 'max' | 'min') => {\n        let data: Partial<AlbumListQuery> = {};\n\n        if (type === 'min') {\n            data = {\n                minYear: e ? Number(e) : undefined,\n            };\n        } else {\n            data = {\n                maxYear: e ? Number(e) : undefined,\n            };\n        }\n\n        const updatedFilters = setFilter({\n            data,\n            itemType: LibraryItem.ALBUM,\n            key: pageKey,\n        }) as AlbumListFilter;\n\n        onFilterChange(updatedFilters);\n    }, 500);\n\n    return (\n        <Stack p=\"0.8rem\">\n            {toggleFilters.map((filter) => (\n                <Group\n                    key={`nd-filter-${filter.label}`}\n                    position=\"apart\"\n                >\n                    <Text>{filter.label}</Text>\n                    <Switch\n                        checked={filter?.value || false}\n                        onChange={filter.onChange}\n                    />\n                </Group>\n            ))}\n            <Divider my=\"0.5rem\" />\n            <Group grow>\n                <NumberInput\n                    defaultValue={filter.minYear}\n                    disabled={filter.genres?.length !== undefined}\n                    hideControls={false}\n                    label={t('filter.fromYear', { postProcess: 'sentenceCase' })}\n                    max={5000}\n                    min={0}\n                    onChange={(e) => handleYearFilter(e, 'min')}\n                />\n                <NumberInput\n                    defaultValue={filter.maxYear}\n                    disabled={filter.genres?.length !== undefined}\n                    hideControls={false}\n                    label={t('filter.toYear', { postProcess: 'sentenceCase' })}\n                    max={5000}\n                    min={0}\n                    onChange={(e) => handleYearFilter(e, 'max')}\n                />\n            </Group>\n            <Group grow>\n                <Select\n                    clearable\n                    data={genreList}\n                    defaultValue={filter.genres?.length ? filter.genres[0] : undefined}\n                    disabled={Boolean(filter.minYear || filter.maxYear)}\n                    label={t('entity.genre', { count: 1, postProcess: 'titleCase' })}\n                    onChange={handleGenresFilter}\n                    searchable\n                />\n            </Group>\n        </Stack>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { Divider, Flex, Group, Stack } from '@mantine/core';\nimport { openModal } from '@mantine/modals';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { ChangeEvent, MouseEvent, MutableRefObject, useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    RiAddBoxFill,\n    RiAddCircleFill,\n    RiFilterFill,\n    RiFolder2Fill,\n    RiMoreFill,\n    RiPlayFill,\n    RiRefreshLine,\n    RiSettings3Fill,\n} from 'react-icons/ri';\n\nimport i18n from '/@/i18n/i18n';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { Button, DropdownMenu, MultiSelect, Slider, Switch, Text } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { ALBUM_TABLE_COLUMNS } from '/@/renderer/components/virtual-table';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { JellyfinAlbumFilters } from '/@/renderer/features/albums/components/jellyfin-album-filters';\nimport { NavidromeAlbumFilters } from '/@/renderer/features/albums/components/navidrome-album-filters';\nimport { SubsonicAlbumFilters } from '/@/renderer/features/albums/components/subsonic-album-filters';\nimport { OrderToggleButton, useMusicFolders } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useListFilterRefresh } from '/@/renderer/hooks/use-list-filter-refresh';\nimport {\n    AlbumListFilter,\n    useCurrentServer,\n    useListStoreActions,\n    useListStoreByKey,\n} from '/@/renderer/store';\nimport {\n    AlbumListQuery,\n    AlbumListSort,\n    LibraryItem,\n    ServerType,\n    SortOrder,\n} from '/@/shared/types/domain-types';\nimport { ListDisplayType, Play, TableColumn } from '/@/shared/types/types';\n\nconst FILTERS = {\n    jellyfin: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.albumArtist', { postProcess: 'titleCase' }),\n            value: AlbumListSort.ALBUM_ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.communityRating', { postProcess: 'titleCase' }),\n            value: AlbumListSort.COMMUNITY_RATING,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.criticRating', { postProcess: 'titleCase' }),\n            value: AlbumListSort.CRITIC_RATING,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: AlbumListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.playCount', { postProcess: 'titleCase' }),\n            value: AlbumListSort.PLAY_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.random', { postProcess: 'titleCase' }),\n            value: AlbumListSort.RANDOM,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyAdded', { postProcess: 'titleCase' }),\n            value: AlbumListSort.RECENTLY_ADDED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.releaseDate', { postProcess: 'titleCase' }),\n            value: AlbumListSort.RELEASE_DATE,\n        },\n    ],\n    navidrome: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.albumArtist', { postProcess: 'titleCase' }),\n            value: AlbumListSort.ALBUM_ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.artist', { postProcess: 'titleCase' }),\n            value: AlbumListSort.ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.duration', { postProcess: 'titleCase' }),\n            value: AlbumListSort.DURATION,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.mostPlayed', { postProcess: 'titleCase' }),\n            value: AlbumListSort.PLAY_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: AlbumListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.random', { postProcess: 'titleCase' }),\n            value: AlbumListSort.RANDOM,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.rating', { postProcess: 'titleCase' }),\n            value: AlbumListSort.RATING,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyAdded', { postProcess: 'titleCase' }),\n            value: AlbumListSort.RECENTLY_ADDED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyPlayed', { postProcess: 'titleCase' }),\n            value: AlbumListSort.RECENTLY_PLAYED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.songCount', { postProcess: 'titleCase' }),\n            value: AlbumListSort.SONG_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.favorited', { postProcess: 'titleCase' }),\n            value: AlbumListSort.FAVORITED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.releaseYear', { postProcess: 'titleCase' }),\n            value: AlbumListSort.YEAR,\n        },\n    ],\n    subsonic: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.albumArtist', { postProcess: 'titleCase' }),\n            value: AlbumListSort.ALBUM_ARTIST,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.mostPlayed', { postProcess: 'titleCase' }),\n            value: AlbumListSort.PLAY_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: AlbumListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.random', { postProcess: 'titleCase' }),\n            value: AlbumListSort.RANDOM,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyAdded', { postProcess: 'titleCase' }),\n            value: AlbumListSort.RECENTLY_ADDED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyPlayed', { postProcess: 'titleCase' }),\n            value: AlbumListSort.RECENTLY_PLAYED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.favorited', { postProcess: 'titleCase' }),\n            value: AlbumListSort.FAVORITED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.releaseYear', { postProcess: 'titleCase' }),\n            value: AlbumListSort.YEAR,\n        },\n    ],\n};\n\ninterface AlbumListHeaderFiltersProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount: number | undefined;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const AlbumListHeaderFilters = ({\n    gridRef,\n    itemCount,\n    tableRef,\n}: AlbumListHeaderFiltersProps) => {\n    const { t } = useTranslation();\n    const queryClient = useQueryClient();\n    const { customFilters, handlePlay, pageKey } = useListContext();\n    const server = useCurrentServer();\n    const { setDisplayType, setFilter, setGrid, setTable } = useListStoreActions();\n    const { display, filter, grid, table } = useListStoreByKey<AlbumListQuery>({\n        filter: customFilters,\n        key: pageKey,\n    });\n    const cq = useContainerQuery();\n\n    const { handleRefreshGrid, handleRefreshTable } = useListFilterRefresh({\n        itemCount,\n        itemType: LibraryItem.ALBUM,\n        server,\n    });\n\n    const musicFoldersQuery = useMusicFolders({ query: null, serverId: server?.id });\n\n    const sortByLabel =\n        (server?.type &&\n            FILTERS[server.type as keyof typeof FILTERS].find((f) => f.value === filter.sortBy)\n                ?.name) ||\n        'Unknown';\n\n    const isGrid = display === ListDisplayType.CARD || display === ListDisplayType.POSTER;\n\n    const onFilterChange = useCallback(\n        (filter: AlbumListFilter) => {\n            if (isGrid) {\n                handleRefreshGrid(gridRef, {\n                    ...filter,\n                    ...customFilters,\n                });\n            } else {\n                handleRefreshTable(tableRef, {\n                    ...filter,\n                    ...customFilters,\n                });\n            }\n        },\n        [customFilters, gridRef, handleRefreshGrid, handleRefreshTable, isGrid, tableRef],\n    );\n\n    const handleOpenFiltersModal = () => {\n        let FilterComponent;\n\n        switch (server?.type) {\n            case ServerType.JELLYFIN:\n                FilterComponent = JellyfinAlbumFilters;\n                break;\n            case ServerType.NAVIDROME:\n                FilterComponent = NavidromeAlbumFilters;\n                break;\n            case ServerType.SUBSONIC:\n                FilterComponent = SubsonicAlbumFilters;\n                break;\n            default:\n                break;\n        }\n\n        if (!FilterComponent) {\n            return;\n        }\n\n        openModal({\n            children: (\n                <FilterComponent\n                    customFilters={customFilters}\n                    disableArtistFilter={!!customFilters}\n                    onFilterChange={onFilterChange}\n                    pageKey={pageKey}\n                    serverId={server?.id}\n                />\n            ),\n            title: 'Album Filters',\n        });\n    };\n\n    const handleRefresh = useCallback(() => {\n        queryClient.invalidateQueries(queryKeys.albums.list(server?.id || ''));\n        onFilterChange(filter);\n    }, [filter, onFilterChange, queryClient, server?.id]);\n\n    const handleSetSortBy = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value || !server?.type) return;\n\n            const sortOrder = FILTERS[server.type as keyof typeof FILTERS].find(\n                (f) => f.value === e.currentTarget.value,\n            )?.defaultOrder;\n\n            const updatedFilters = setFilter({\n                customFilters,\n                data: {\n                    sortBy: e.currentTarget.value as AlbumListSort,\n                    sortOrder: sortOrder || SortOrder.ASC,\n                },\n                itemType: LibraryItem.ALBUM,\n                key: pageKey,\n            }) as AlbumListFilter;\n\n            onFilterChange(updatedFilters);\n        },\n        [customFilters, onFilterChange, pageKey, server?.type, setFilter],\n    );\n\n    const handleSetMusicFolder = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value) return;\n\n            let updatedFilters: AlbumListFilter | null = null;\n            if (e.currentTarget.value === String(filter.musicFolderId)) {\n                updatedFilters = setFilter({\n                    customFilters,\n                    data: { musicFolderId: undefined },\n                    itemType: LibraryItem.ALBUM,\n                    key: pageKey,\n                }) as AlbumListFilter;\n            } else {\n                updatedFilters = setFilter({\n                    customFilters,\n                    data: { musicFolderId: e.currentTarget.value },\n                    itemType: LibraryItem.ALBUM,\n                    key: pageKey,\n                }) as AlbumListFilter;\n            }\n\n            onFilterChange(updatedFilters);\n        },\n        [filter.musicFolderId, onFilterChange, setFilter, customFilters, pageKey],\n    );\n\n    const handleToggleSortOrder = useCallback(() => {\n        const newSortOrder = filter.sortOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n        const updatedFilters = setFilter({\n            customFilters,\n            data: { sortOrder: newSortOrder },\n            itemType: LibraryItem.ALBUM,\n            key: pageKey,\n        }) as AlbumListFilter;\n        onFilterChange(updatedFilters);\n    }, [customFilters, filter.sortOrder, onFilterChange, pageKey, setFilter]);\n\n    const handleItemSize = (e: number) => {\n        if (isGrid) {\n            setGrid({ data: { itemSize: e }, key: pageKey });\n        } else {\n            setTable({ data: { rowHeight: e }, key: pageKey });\n        }\n    };\n\n    const handleItemGap = (e: number) => {\n        setGrid({ data: { itemGap: e }, key: pageKey });\n    };\n\n    const handleSetViewType = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value) return;\n            setDisplayType({ data: e.currentTarget.value as ListDisplayType, key: pageKey });\n        },\n        [pageKey, setDisplayType],\n    );\n\n    const handleTableColumns = (values: TableColumn[]) => {\n        const existingColumns = table.columns;\n\n        if (values.length === 0) {\n            return setTable({\n                data: { columns: [] },\n                key: pageKey,\n            });\n        }\n\n        // If adding a column\n        if (values.length > existingColumns.length) {\n            const newColumn = { column: values[values.length - 1], width: 100 };\n\n            setTable({ data: { columns: [...existingColumns, newColumn] }, key: pageKey });\n        } else {\n            // If removing a column\n            const removed = existingColumns.filter((column) => !values.includes(column.column));\n            const newColumns = existingColumns.filter((column) => !removed.includes(column));\n\n            setTable({ data: { columns: newColumns }, key: pageKey });\n        }\n\n        return tableRef.current?.api.sizeColumnsToFit();\n    };\n\n    const handleAutoFitColumns = (e: ChangeEvent<HTMLInputElement>) => {\n        setTable({ data: { autoFit: e.currentTarget.checked }, key: pageKey });\n\n        if (e.currentTarget.checked) {\n            tableRef.current?.api.sizeColumnsToFit();\n        }\n    };\n\n    const isFilterApplied = useMemo(() => {\n        const isNavidromeFilterApplied =\n            server?.type === ServerType.NAVIDROME &&\n            filter?._custom?.navidrome &&\n            Object.values(filter?._custom?.navidrome).some((value) => value !== undefined);\n\n        const isJellyfinFilterApplied =\n            server?.type === ServerType.JELLYFIN &&\n            filter?._custom?.jellyfin &&\n            Object.values(filter?._custom?.jellyfin).some((value) => value !== undefined);\n\n        const isSubsonicFilterApplied =\n            server?.type === ServerType.SUBSONIC &&\n            (filter.maxYear || filter.minYear || filter.favorite);\n\n        return (\n            isNavidromeFilterApplied ||\n            isJellyfinFilterApplied ||\n            isSubsonicFilterApplied ||\n            filter.genres?.length\n        );\n    }, [\n        filter?._custom?.jellyfin,\n        filter?._custom?.navidrome,\n        filter.favorite,\n        filter.genres?.length,\n        filter.maxYear,\n        filter.minYear,\n        server?.type,\n    ]);\n\n    const isFolderFilterApplied = useMemo(() => {\n        return filter.musicFolderId !== undefined;\n    }, [filter.musicFolderId]);\n\n    return (\n        <Flex justify=\"space-between\">\n            <Group\n                ref={cq.ref}\n                spacing=\"sm\"\n                w=\"100%\"\n            >\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            fw={600}\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            {sortByLabel}\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        {FILTERS[server?.type as keyof typeof FILTERS].map((f) => (\n                            <DropdownMenu.Item\n                                $isActive={f.value === filter.sortBy}\n                                key={`filter-${f.name}`}\n                                onClick={handleSetSortBy}\n                                value={f.value}\n                            >\n                                {f.name}\n                            </DropdownMenu.Item>\n                        ))}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n                <Divider orientation=\"vertical\" />\n                <OrderToggleButton\n                    onToggle={handleToggleSortOrder}\n                    sortOrder={filter.sortOrder}\n                />\n                {server?.type === ServerType.JELLYFIN && (\n                    <>\n                        <Divider orientation=\"vertical\" />\n                        <DropdownMenu position=\"bottom-start\">\n                            <DropdownMenu.Target>\n                                <Button\n                                    compact\n                                    fw={600}\n                                    size=\"md\"\n                                    sx={{\n                                        svg: {\n                                            fill: isFolderFilterApplied\n                                                ? 'var(--primary-color) !important'\n                                                : undefined,\n                                        },\n                                    }}\n                                    variant=\"subtle\"\n                                >\n                                    <RiFolder2Fill size=\"1.3rem\" />\n                                </Button>\n                            </DropdownMenu.Target>\n                            <DropdownMenu.Dropdown>\n                                {musicFoldersQuery.data?.items.map((folder) => (\n                                    <DropdownMenu.Item\n                                        $isActive={filter.musicFolderId === folder.id}\n                                        key={`musicFolder-${folder.id}`}\n                                        onClick={handleSetMusicFolder}\n                                        value={folder.id}\n                                    >\n                                        {folder.name}\n                                    </DropdownMenu.Item>\n                                ))}\n                            </DropdownMenu.Dropdown>\n                        </DropdownMenu>\n                    </>\n                )}\n                <Divider orientation=\"vertical\" />\n                <Button\n                    compact\n                    onClick={handleOpenFiltersModal}\n                    size=\"md\"\n                    sx={{\n                        svg: {\n                            fill: isFilterApplied ? 'var(--primary-color) !important' : undefined,\n                        },\n                    }}\n                    tooltip={{\n                        label: t('common.filters', { count: 2, postProcess: 'sentenceCase' }),\n                    }}\n                    variant=\"subtle\"\n                >\n                    <RiFilterFill size=\"1.3rem\" />\n                </Button>\n                <Divider orientation=\"vertical\" />\n                <Button\n                    compact\n                    onClick={handleRefresh}\n                    size=\"md\"\n                    tooltip={{ label: t('common.refresh', { postProcess: 'sentenceCase' }) }}\n                    variant=\"subtle\"\n                >\n                    <RiRefreshLine size=\"1.3rem\" />\n                </Button>\n                <Divider orientation=\"vertical\" />\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            <RiMoreFill size={15} />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Item\n                            icon={<RiPlayFill />}\n                            onClick={() => handlePlay?.({ playType: Play.NOW })}\n                        >\n                            {t('player.play', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            icon={<RiAddBoxFill />}\n                            onClick={() => handlePlay?.({ playType: Play.LAST })}\n                        >\n                            {t('player.addLast', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            icon={<RiAddCircleFill />}\n                            onClick={() => handlePlay?.({ playType: Play.NEXT })}\n                        >\n                            {t('player.addNext', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Divider />\n                        <DropdownMenu.Item\n                            icon={<RiRefreshLine />}\n                            onClick={handleRefresh}\n                        >\n                            {t('common.refresh', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </Group>\n            <Group\n                noWrap\n                spacing=\"sm\"\n            >\n                <DropdownMenu\n                    position=\"bottom-end\"\n                    width={425}\n                >\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            size=\"md\"\n                            tooltip={{\n                                label: t('common.configure', { postProcess: 'sentenceCase' }),\n                            }}\n                            variant=\"subtle\"\n                        >\n                            <RiSettings3Fill size=\"1.3rem\" />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Label>\n                            {t('table.config.general.displayType', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.CARD}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.CARD}\n                        >\n                            {t('table.config.view.card', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.POSTER}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.POSTER}\n                        >\n                            {t('table.config.view.poster', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.TABLE}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.TABLE}\n                        >\n                            {t('table.config.view.table', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Item>\n                        {/* <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.TABLE_PAGINATED}\n                            value={ListDisplayType.TABLE_PAGINATED}\n                            onClick={handleSetViewType}\n                        >\n                            Table (paginated)\n                        </DropdownMenu.Item> */}\n                        <DropdownMenu.Divider />\n                        <DropdownMenu.Label>\n                            {t('table.config.general.itemSize', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item closeMenuOnClick={false}>\n                            <Slider\n                                defaultValue={isGrid ? grid?.itemSize || 0 : table.rowHeight}\n                                max={isGrid ? 300 : 100}\n                                min={isGrid ? 100 : 25}\n                                onChangeEnd={handleItemSize}\n                            />\n                        </DropdownMenu.Item>\n                        {isGrid && (\n                            <>\n                                <DropdownMenu.Label>\n                                    {t('table.config.general.itemGap', {\n                                        postProcess: 'sentenceCase',\n                                    })}\n                                </DropdownMenu.Label>\n                                <DropdownMenu.Item closeMenuOnClick={false}>\n                                    <Slider\n                                        defaultValue={grid?.itemGap || 0}\n                                        max={30}\n                                        min={0}\n                                        onChangeEnd={handleItemGap}\n                                    />\n                                </DropdownMenu.Item>\n                            </>\n                        )}\n                        {(display === ListDisplayType.TABLE ||\n                            display === ListDisplayType.TABLE_PAGINATED) && (\n                            <>\n                                <DropdownMenu.Label>Table Columns</DropdownMenu.Label>\n                                <DropdownMenu.Item\n                                    closeMenuOnClick={false}\n                                    component=\"div\"\n                                    sx={{ cursor: 'default' }}\n                                >\n                                    <Stack>\n                                        <MultiSelect\n                                            clearable\n                                            data={ALBUM_TABLE_COLUMNS}\n                                            defaultValue={table?.columns.map(\n                                                (column) => column.column,\n                                            )}\n                                            onChange={handleTableColumns}\n                                            width={300}\n                                        />\n                                        <Group position=\"apart\">\n                                            <Text>Auto Fit Columns</Text>\n                                            <Switch\n                                                defaultChecked={table.autoFit}\n                                                onChange={handleAutoFitColumns}\n                                            />\n                                        </Group>\n                                    </Stack>\n                                </DropdownMenu.Item>\n                            </>\n                        )}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </Group>\n        </Flex>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { Flex, Group, Stack } from '@mantine/core';\nimport debounce from 'lodash/debounce';\nimport { type ChangeEvent, type MutableRefObject, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { PageHeader, SearchInput } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { AlbumListHeaderFilters } from '/@/renderer/features/albums/components/album-list-header-filters';\nimport { FilterBar, LibraryHeaderBar } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useDisplayRefresh } from '/@/renderer/hooks/use-display-refresh';\nimport { AlbumListFilter, useCurrentServer, usePlayButtonBehavior } from '/@/renderer/store';\nimport { titleCase } from '/@/renderer/utils';\nimport { AlbumListQuery, LibraryItem } from '/@/shared/types/domain-types';\n\ninterface AlbumListHeaderProps {\n    genreId?: string;\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n    title?: string;\n}\n\nexport const AlbumListHeader = ({\n    genreId,\n    gridRef,\n    itemCount,\n    tableRef,\n    title,\n}: AlbumListHeaderProps) => {\n    const { t } = useTranslation();\n    const server = useCurrentServer();\n    const cq = useContainerQuery();\n    const playButtonBehavior = usePlayButtonBehavior();\n    const genreRef = useRef<string | undefined>(undefined);\n    const { filter, handlePlay, refresh, search } = useDisplayRefresh<AlbumListQuery>({\n        gridRef,\n        itemCount,\n        itemType: LibraryItem.ALBUM,\n        server,\n        tableRef,\n    });\n\n    const handleSearch = debounce((e: ChangeEvent<HTMLInputElement>) => {\n        const updatedFilters = search(e) as AlbumListFilter;\n\n        refresh(updatedFilters);\n    }, 500);\n\n    useEffect(() => {\n        if (genreRef.current && genreRef.current !== genreId) {\n            refresh(filter);\n        }\n\n        genreRef.current = genreId;\n    }, [filter, genreId, refresh, tableRef]);\n\n    return (\n        <Stack\n            ref={cq.ref}\n            spacing={0}\n        >\n            <PageHeader backgroundColor=\"var(--titlebar-bg)\">\n                <Flex\n                    justify=\"space-between\"\n                    w=\"100%\"\n                >\n                    <LibraryHeaderBar>\n                        <LibraryHeaderBar.PlayButton\n                            onClick={() => handlePlay?.({ playType: playButtonBehavior })}\n                        />\n                        <LibraryHeaderBar.Title>\n                            {title ||\n                                titleCase(t('page.albumList.title', { postProcess: 'titleCase' }))}\n                        </LibraryHeaderBar.Title>\n                        <LibraryHeaderBar.Badge\n                            isLoading={itemCount === null || itemCount === undefined}\n                        >\n                            {itemCount}\n                        </LibraryHeaderBar.Badge>\n                    </LibraryHeaderBar>\n                    <Group>\n                        <SearchInput\n                            defaultValue={filter.searchTerm}\n                            onChange={handleSearch}\n                            openedWidth={cq.isMd ? 250 : cq.isSm ? 200 : 150}\n                        />\n                    </Group>\n                </Flex>\n            </PageHeader>\n            <FilterBar>\n                <AlbumListHeaderFilters\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            </FilterBar>\n        </Stack>\n    );\n};\n","import type { QueryHookArgs } from '/@/renderer/lib/react-query';\nimport type { AlbumListQuery } from '/@/shared/types/domain-types';\n\nimport { useQuery } from '@tanstack/react-query';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { getServerById } from '/@/renderer/store';\n\nexport const useAlbumListCount = (args: QueryHookArgs<AlbumListQuery>) => {\n    const { options, query, serverId } = args;\n    const server = getServerById(serverId);\n\n    return useQuery({\n        enabled: !!serverId,\n        queryFn: ({ signal }) => {\n            if (!server) throw new Error('Server not found');\n            return api.controller.getAlbumListCount({\n                apiClientProps: {\n                    server,\n                    signal,\n                },\n                query,\n            });\n        },\n        queryKey: queryKeys.albums.count(\n            serverId || '',\n            Object.keys(query).length === 0 ? undefined : query,\n        ),\n        ...options,\n    });\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport isEmpty from 'lodash/isEmpty';\nimport { useCallback, useMemo, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { ListContext } from '/@/renderer/context/list-context';\nimport { AlbumListContent } from '/@/renderer/features/albums/components/album-list-content';\nimport { AlbumListHeader } from '/@/renderer/features/albums/components/album-list-header';\nimport { useAlbumListCount } from '/@/renderer/features/albums/queries/album-list-count-query';\nimport { useGenreList } from '/@/renderer/features/genres';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { AnimatedPage } from '/@/renderer/features/shared';\nimport { queryClient } from '/@/renderer/lib/react-query';\nimport { useCurrentServer, useListFilterByKey } from '/@/renderer/store';\nimport { sentenceCase, titleCase } from '/@/renderer/utils';\nimport {\n    AlbumListQuery,\n    GenreListSort,\n    LibraryItem,\n    SortOrder,\n} from '/@/shared/types/domain-types';\nimport { Play } from '/@/shared/types/types';\n\nconst AlbumListRoute = () => {\n    const { t } = useTranslation();\n    const gridRef = useRef<null | VirtualInfiniteGridRef>(null);\n    const tableRef = useRef<AgGridReactType | null>(null);\n    const server = useCurrentServer();\n    const [searchParams] = useSearchParams();\n    const { albumArtistId, genreId } = useParams();\n    const pageKey = albumArtistId ? `albumArtistAlbum` : 'album';\n    const handlePlayQueueAdd = usePlayQueueAdd();\n\n    const customFilters = useMemo(() => {\n        const value = {\n            ...(albumArtistId && { artistIds: [albumArtistId] }),\n            ...(genreId && {\n                genres: [genreId],\n            }),\n        };\n\n        if (isEmpty(value)) {\n            return undefined;\n        }\n\n        return value;\n    }, [albumArtistId, genreId]);\n\n    const albumListFilter = useListFilterByKey<AlbumListQuery>({\n        filter: customFilters,\n        key: pageKey,\n    });\n\n    const genreList = useGenreList({\n        options: {\n            cacheTime: 1000 * 60 * 60,\n            enabled: !!genreId,\n        },\n        query: {\n            sortBy: GenreListSort.NAME,\n            sortOrder: SortOrder.ASC,\n            startIndex: 0,\n        },\n        serverId: server?.id,\n    });\n\n    const genreTitle = useMemo(() => {\n        if (!genreList.data) return '';\n        const genre = genreList.data.items.find((g) => g.id === genreId);\n\n        if (!genre) return 'Unknown';\n\n        return genre?.name;\n    }, [genreId, genreList.data]);\n\n    const itemCountCheck = useAlbumListCount({\n        options: {\n            cacheTime: 1000 * 60,\n            staleTime: 1000 * 60,\n        },\n        query: {\n            ...albumListFilter,\n        },\n        serverId: server?.id,\n    });\n\n    const itemCount = itemCountCheck.data === null ? undefined : itemCountCheck.data;\n\n    const handlePlay = useCallback(\n        async (args: { initialSongId?: string; playType: Play }) => {\n            if (!itemCount || itemCount === 0) return;\n            const { playType } = args;\n            const query = {\n                ...albumListFilter,\n                ...customFilters,\n                startIndex: 0,\n            };\n            const queryKey = queryKeys.albums.list(server?.id || '', query);\n\n            const albumListRes = await queryClient.fetchQuery({\n                queryFn: ({ signal }) => {\n                    return api.controller.getAlbumList({\n                        apiClientProps: { server, signal },\n                        query,\n                    });\n                },\n                queryKey,\n            });\n\n            const albumIds = albumListRes?.items?.map((a) => a.id) || [];\n\n            handlePlayQueueAdd?.({\n                byItemType: {\n                    id: albumIds,\n                    type: LibraryItem.ALBUM,\n                },\n                playType,\n            });\n        },\n        [albumListFilter, customFilters, handlePlayQueueAdd, itemCount, server],\n    );\n\n    const providerValue = useMemo(() => {\n        return {\n            customFilters,\n            handlePlay,\n            id: albumArtistId ?? genreId,\n            pageKey,\n        };\n    }, [albumArtistId, customFilters, genreId, handlePlay, pageKey]);\n\n    const artist = searchParams.get('artistName');\n    const title = artist\n        ? sentenceCase(t('page.albumList.artistAlbums', { artist }))\n        : genreId\n          ? sentenceCase(t('page.albumList.genreAlbums', { genre: titleCase(genreTitle) }))\n          : undefined;\n\n    return (\n        <AnimatedPage>\n            <ListContext.Provider value={providerValue}>\n                <AlbumListHeader\n                    genreId={genreId}\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                    title={title}\n                />\n                <AlbumListContent\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            </ListContext.Provider>\n        </AnimatedPage>\n    );\n};\n\nexport default AlbumListRoute;\n"],"file":"assets/album-list-route-sbRukrrc.js"}