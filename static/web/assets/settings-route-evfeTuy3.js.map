{"version":3,"mappings":"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","names":["GeneralTab","lazy","__vitePreload","module","PlaybackTab","ApplicationTab","HotkeysTab","AdvancedTab","TabContainer","styled","SettingsContent","useTranslation","currentTab","useSettingsStore","state","setSettings","useSettingsStoreActions","jsxs","Tabs","e","jsx","isElectron","SettingsHeader","setSearch","t","reset","search","useSettingSearchContext","cq","useContainerQuery","handleResetToDefault","closeAllModals","openResetConfirmModal","openModal","ConfirmModal","Flex","PageHeader","LibraryHeaderBar","Group","RiSettings2Fill","SearchInput","event","Button","SettingsRoute","useState","AnimatedPage","SettingSearchContext"],"ignoreList":[],"sources":["../../../src/renderer/features/settings/components/settings-content.tsx","../../../src/renderer/features/settings/components/settings-header.tsx","../../../src/renderer/features/settings/routes/settings-route.tsx"],"sourcesContent":["import isElectron from 'is-electron';\nimport { lazy } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\n\nimport { Tabs } from '/@/renderer/components';\nimport { useSettingsStore, useSettingsStoreActions } from '/@/renderer/store/settings.store';\n\nconst GeneralTab = lazy(() =>\n    import('/@/renderer/features/settings/components/general/general-tab').then((module) => ({\n        default: module.GeneralTab,\n    })),\n);\n\nconst PlaybackTab = lazy(() =>\n    import('/@/renderer/features/settings/components/playback/playback-tab').then((module) => ({\n        default: module.PlaybackTab,\n    })),\n);\n\nconst ApplicationTab = lazy(() =>\n    import('/@/renderer/features/settings/components/window/window-tab').then((module) => ({\n        default: module.WindowTab,\n    })),\n);\n\nconst HotkeysTab = lazy(() =>\n    import('/@/renderer/features/settings/components/hotkeys/hotkeys-tab').then((module) => ({\n        default: module.HotkeysTab,\n    })),\n);\n\nconst AdvancedTab = lazy(() =>\n    import('/@/renderer/features/settings/components/advanced/advanced-tab').then((module) => ({\n        default: module.AdvancedTab,\n    })),\n);\n\nconst TabContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    padding: 1rem;\n    overflow: scroll;\n`;\n\nexport const SettingsContent = () => {\n    const { t } = useTranslation();\n    const currentTab = useSettingsStore((state) => state.tab);\n    const { setSettings } = useSettingsStoreActions();\n\n    return (\n        <TabContainer>\n            <Tabs\n                keepMounted={false}\n                onTabChange={(e) => e && setSettings({ tab: e })}\n                orientation=\"horizontal\"\n                value={currentTab}\n                variant=\"default\"\n            >\n                <Tabs.List>\n                    <Tabs.Tab value=\"general\">\n                        {t('page.setting.generalTab', { postProcess: 'sentenceCase' })}\n                    </Tabs.Tab>\n                    <Tabs.Tab value=\"playback\">\n                        {t('page.setting.playbackTab', { postProcess: 'sentenceCase' })}\n                    </Tabs.Tab>\n                    <Tabs.Tab value=\"hotkeys\">\n                        {t('page.setting.hotkeysTab', { postProcess: 'sentenceCase' })}\n                    </Tabs.Tab>\n                    {isElectron() && (\n                        <Tabs.Tab value=\"window\">\n                            {t('page.setting.windowTab', { postProcess: 'sentenceCase' })}\n                        </Tabs.Tab>\n                    )}\n                    <Tabs.Tab value=\"advanced\">\n                        {t('page.setting.advanced', { postProcess: 'sentenceCase' })}\n                    </Tabs.Tab>\n                </Tabs.List>\n                <Tabs.Panel value=\"general\">\n                    <GeneralTab />\n                </Tabs.Panel>\n                <Tabs.Panel value=\"playback\">\n                    <PlaybackTab />\n                </Tabs.Panel>\n                <Tabs.Panel value=\"hotkeys\">\n                    <HotkeysTab />\n                </Tabs.Panel>\n                {isElectron() && (\n                    <Tabs.Panel value=\"window\">\n                        <ApplicationTab />\n                    </Tabs.Panel>\n                )}\n                <Tabs.Panel value=\"advanced\">\n                    <AdvancedTab />\n                </Tabs.Panel>\n            </Tabs>\n        </TabContainer>\n    );\n};\n","import { Flex, Group } from '@mantine/core';\nimport { closeAllModals, openModal } from '@mantine/modals';\nimport { useTranslation } from 'react-i18next';\nimport { RiSettings2Fill } from 'react-icons/ri';\n\nimport { Button, ConfirmModal, PageHeader, SearchInput } from '/@/renderer/components';\nimport { useSettingSearchContext } from '/@/renderer/features/settings/context/search-context';\nimport { LibraryHeaderBar } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useSettingsStoreActions } from '/@/renderer/store/settings.store';\n\nexport type SettingsHeaderProps = {\n    setSearch: (search: string) => void;\n};\n\nexport const SettingsHeader = ({ setSearch }: SettingsHeaderProps) => {\n    const { t } = useTranslation();\n    const { reset } = useSettingsStoreActions();\n    const search = useSettingSearchContext();\n    const cq = useContainerQuery();\n\n    const handleResetToDefault = () => {\n        reset();\n        closeAllModals();\n    };\n\n    const openResetConfirmModal = () => {\n        openModal({\n            children: (\n                <ConfirmModal onConfirm={handleResetToDefault}>\n                    {t('common.areYouSure', { postProcess: 'sentenceCase' })}\n                </ConfirmModal>\n            ),\n            title: t('common.resetToDefault', { postProcess: 'sentenceCase' }),\n        });\n    };\n\n    return (\n        <Flex ref={cq.ref}>\n            <PageHeader>\n                <LibraryHeaderBar>\n                    <Flex\n                        align=\"center\"\n                        justify=\"space-between\"\n                        w=\"100%\"\n                    >\n                        <Group noWrap>\n                            <RiSettings2Fill size=\"2rem\" />\n                            <LibraryHeaderBar.Title>\n                                {t('common.setting', { count: 2, postProcess: 'titleCase' })}\n                            </LibraryHeaderBar.Title>\n                        </Group>\n                        <Group>\n                            <SearchInput\n                                defaultValue={search}\n                                onChange={(event) =>\n                                    setSearch(event.target.value.toLocaleLowerCase())\n                                }\n                                openedWidth={cq.isMd ? 250 : cq.isSm ? 200 : 150}\n                            />\n                            <Button\n                                compact\n                                onClick={openResetConfirmModal}\n                                variant=\"default\"\n                            >\n                                {t('common.resetToDefault', { postProcess: 'sentenceCase' })}\n                            </Button>\n                        </Group>\n                    </Flex>\n                </LibraryHeaderBar>\n            </PageHeader>\n        </Flex>\n    );\n};\n","import { Flex } from '@mantine/core';\nimport { useState } from 'react';\n\nimport { SettingsContent } from '/@/renderer/features/settings/components/settings-content';\nimport { SettingsHeader } from '/@/renderer/features/settings/components/settings-header';\nimport { SettingSearchContext } from '/@/renderer/features/settings/context/search-context';\nimport { AnimatedPage } from '/@/renderer/features/shared';\n\nconst SettingsRoute = () => {\n    const [search, setSearch] = useState('');\n\n    return (\n        <AnimatedPage>\n            <SettingSearchContext.Provider value={search}>\n                <Flex\n                    direction=\"column\"\n                    h=\"100%\"\n                    w=\"100%\"\n                >\n                    <SettingsHeader setSearch={setSearch} />\n                    <SettingsContent />\n                </Flex>\n            </SettingSearchContext.Provider>\n        </AnimatedPage>\n    );\n};\n\nexport default SettingsRoute;\n"],"file":"assets/settings-route-evfeTuy3.js"}