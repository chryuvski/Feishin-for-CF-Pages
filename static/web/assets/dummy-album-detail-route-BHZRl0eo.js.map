{"version":3,"file":"dummy-album-detail-route-BHZRl0eo.js","sources":["../../../src/renderer/features/albums/routes/dummy-album-detail-route.tsx"],"sourcesContent":["import { Box, Center, Group, Stack } from '@mantine/core';\nimport { useQuery } from '@tanstack/react-query';\nimport { Fragment } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { RiErrorWarningLine, RiHeartFill, RiHeartLine, RiMoreFill } from 'react-icons/ri';\nimport { generatePath, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { Button, Spinner, Spoiler, Text } from '/@/renderer/components';\nimport { useHandleGeneralContextMenu } from '/@/renderer/features/context-menu';\nimport { SONG_ALBUM_PAGE } from '/@/renderer/features/context-menu/context-menu-items';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport {\n    AnimatedPage,\n    LibraryHeader,\n    PlayButton,\n    useCreateFavorite,\n    useDeleteFavorite,\n} from '/@/renderer/features/shared';\nimport { useContainerQuery, useFastAverageColor } from '/@/renderer/hooks';\nimport { queryClient } from '/@/renderer/lib/react-query';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer } from '/@/renderer/store';\nimport { usePlayButtonBehavior } from '/@/renderer/store/settings.store';\nimport { formatDurationString } from '/@/renderer/utils';\nimport { replaceURLWithHTMLLinks } from '/@/renderer/utils/linkify';\nimport { LibraryItem, SongDetailResponse } from '/@/shared/types/domain-types';\n\nconst DetailContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 2rem;\n    padding: 1rem 2rem 5rem;\n    overflow: hidden;\n`;\n\nconst DummyAlbumDetailRoute = () => {\n    const cq = useContainerQuery();\n    const { t } = useTranslation();\n\n    const { albumId } = useParams() as { albumId: string };\n    const server = useCurrentServer();\n    const queryKey = queryKeys.songs.detail(server?.id || '', albumId);\n    const detailQuery = useQuery({\n        queryFn: ({ signal }) => {\n            if (!server) throw new Error('Server not found');\n            return api.controller.getSongDetail({\n                apiClientProps: { server, signal },\n                query: { id: albumId },\n            });\n        },\n        queryKey,\n    });\n\n    const { color: background, colorId } = useFastAverageColor({\n        id: albumId,\n        src: detailQuery.data?.imageUrl,\n        srcLoaded: !detailQuery.isLoading,\n    });\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const playButtonBehavior = usePlayButtonBehavior();\n\n    const createFavoriteMutation = useCreateFavorite({});\n    const deleteFavoriteMutation = useDeleteFavorite({});\n\n    const handleFavorite = async () => {\n        if (!detailQuery?.data) return;\n\n        const wasFavorite = detailQuery.data.userFavorite;\n\n        try {\n            if (wasFavorite) {\n                await deleteFavoriteMutation.mutateAsync({\n                    query: {\n                        id: [detailQuery.data.id],\n                        type: LibraryItem.SONG,\n                    },\n                    serverId: detailQuery.data.serverId,\n                });\n            } else {\n                await createFavoriteMutation.mutateAsync({\n                    query: {\n                        id: [detailQuery.data.id],\n                        type: LibraryItem.SONG,\n                    },\n                    serverId: detailQuery.data.serverId,\n                });\n            }\n\n            queryClient.setQueryData<SongDetailResponse>(queryKey, {\n                ...detailQuery.data,\n                userFavorite: !wasFavorite,\n            });\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    const showGenres = detailQuery?.data?.genres ? detailQuery?.data?.genres.length !== 0 : false;\n    const comment = detailQuery?.data?.comment;\n\n    const handleGeneralContextMenu = useHandleGeneralContextMenu(LibraryItem.SONG, SONG_ALBUM_PAGE);\n\n    const handlePlay = () => {\n        handlePlayQueueAdd?.({\n            byItemType: {\n                id: [albumId],\n                type: LibraryItem.SONG,\n            },\n            playType: playButtonBehavior,\n        });\n    };\n\n    if (!background || colorId !== albumId) {\n        return <Spinner container />;\n    }\n\n    const metadataItems = [\n        {\n            id: 'releaseYear',\n            secondary: false,\n            value: detailQuery?.data?.releaseYear,\n        },\n        {\n            id: 'duration',\n            secondary: false,\n            value: detailQuery?.data?.duration && formatDurationString(detailQuery.data.duration),\n        },\n    ];\n\n    return (\n        <AnimatedPage key={`dummy-album-detail-${albumId}`}>\n            <Stack ref={cq.ref}>\n                <LibraryHeader\n                    background={background}\n                    imageUrl={detailQuery?.data?.imageUrl}\n                    item={{ route: AppRoute.LIBRARY_SONGS, type: LibraryItem.SONG }}\n                    title={detailQuery?.data?.name || ''}\n                >\n                    <Stack spacing=\"sm\">\n                        <Group spacing=\"sm\">\n                            {metadataItems.map((item, index) => (\n                                <Fragment key={`item-${item.id}-${index}`}>\n                                    {index > 0 && <Text $noSelect>â€¢</Text>}\n                                    <Text $secondary={item.secondary}>{item.value}</Text>\n                                </Fragment>\n                            ))}\n                        </Group>\n                        <Group\n                            mah=\"4rem\"\n                            spacing=\"md\"\n                            sx={{\n                                overflow: 'hidden',\n                                WebkitBoxOrient: 'vertical',\n                                WebkitLineClamp: 2,\n                            }}\n                        >\n                            {detailQuery?.data?.albumArtists.map((artist) => (\n                                <Text\n                                    $link\n                                    component={Link}\n                                    fw={600}\n                                    key={`artist-${artist.id}`}\n                                    size=\"md\"\n                                    to={generatePath(AppRoute.LIBRARY_ALBUM_ARTISTS_DETAIL, {\n                                        albumArtistId: artist.id,\n                                    })}\n                                    variant=\"subtle\"\n                                >\n                                    {artist.name}\n                                </Text>\n                            ))}\n                        </Group>\n                    </Stack>\n                </LibraryHeader>\n            </Stack>\n            <DetailContainer>\n                <Box component=\"section\">\n                    <Group\n                        position=\"apart\"\n                        spacing=\"sm\"\n                    >\n                        <Group>\n                            <PlayButton onClick={() => handlePlay()} />\n                            <Button\n                                compact\n                                loading={\n                                    createFavoriteMutation.isLoading ||\n                                    deleteFavoriteMutation.isLoading\n                                }\n                                onClick={handleFavorite}\n                                variant=\"subtle\"\n                            >\n                                {detailQuery?.data?.userFavorite ? (\n                                    <RiHeartFill\n                                        color=\"red\"\n                                        size={20}\n                                    />\n                                ) : (\n                                    <RiHeartLine size={20} />\n                                )}\n                            </Button>\n                            <Button\n                                compact\n                                onClick={(e) => {\n                                    if (!detailQuery?.data) return;\n                                    handleGeneralContextMenu(e, [detailQuery.data!]);\n                                }}\n                                variant=\"subtle\"\n                            >\n                                <RiMoreFill size={20} />\n                            </Button>\n                        </Group>\n                    </Group>\n                </Box>\n                {showGenres && (\n                    <Box component=\"section\">\n                        <Group spacing=\"sm\">\n                            {detailQuery?.data?.genres?.map((genre) => (\n                                <Button\n                                    compact\n                                    component={Link}\n                                    key={`genre-${genre.id}`}\n                                    radius={0}\n                                    size=\"md\"\n                                    to={generatePath(AppRoute.LIBRARY_GENRES_SONGS, {\n                                        genreId: genre.id,\n                                    })}\n                                    variant=\"outline\"\n                                >\n                                    {genre.name}\n                                </Button>\n                            ))}\n                        </Group>\n                    </Box>\n                )}\n                {comment && (\n                    <Box component=\"section\">\n                        <Spoiler maxHeight={75}>{replaceURLWithHTMLLinks(comment)}</Spoiler>\n                    </Box>\n                )}\n                <Box component=\"section\">\n                    <Center>\n                        <Group mr={5}>\n                            <RiErrorWarningLine\n                                color=\"var(--danger-color)\"\n                                size={30}\n                            />\n                        </Group>\n                        <h2>{t('error.badAlbum', { postProcess: 'sentenceCase' })}</h2>\n                    </Center>\n                </Box>\n            </DetailContainer>\n        </AnimatedPage>\n    );\n};\n\nexport default DummyAlbumDetailRoute;\n"],"names":["DetailContainer","styled","DummyAlbumDetailRoute","cq","useContainerQuery","t","useTranslation","albumId","useParams","server","useCurrentServer","queryKey","queryKeys","detailQuery","useQuery","signal","api","background","colorId","useFastAverageColor","_a","handlePlayQueueAdd","usePlayQueueAdd","playButtonBehavior","usePlayButtonBehavior","createFavoriteMutation","useCreateFavorite","deleteFavoriteMutation","useDeleteFavorite","handleFavorite","wasFavorite","LibraryItem","queryClient","error","showGenres","_b","_c","comment","_d","handleGeneralContextMenu","useHandleGeneralContextMenu","SONG_ALBUM_PAGE","handlePlay","jsx","Spinner","metadataItems","_e","_f","formatDurationString","AnimatedPage","Stack","LibraryHeader","_g","AppRoute","_h","jsxs","Group","item","index","Fragment","Text","_i","artist","Link","generatePath","Box","PlayButton","Button","_j","RiHeartFill","RiHeartLine","e","RiMoreFill","_l","_k","genre","Spoiler","replaceURLWithHTMLLinks","Center","RiErrorWarningLine"],"mappings":"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"}