{"version":3,"file":"search-route-DLRKSfED.js","sources":["../../../src/renderer/features/search/components/search-content.tsx","../../../src/renderer/features/search/components/search-header.tsx","../../../src/renderer/features/search/routes/search-route.tsx"],"sourcesContent":["import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { RowDoubleClickedEvent } from '@ag-grid-community/core';\nimport { MutableRefObject } from 'react';\nimport { generatePath, useNavigate } from 'react-router';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport { VirtualGridAutoSizerContainer } from '/@/renderer/components/virtual-grid';\nimport { VirtualTable } from '/@/renderer/components/virtual-table';\nimport { useCurrentSongRowStyles } from '/@/renderer/components/virtual-table/hooks/use-current-song-row-styles';\nimport { useVirtualTable } from '/@/renderer/components/virtual-table/hooks/use-virtual-table';\nimport {\n    ALBUM_CONTEXT_MENU_ITEMS,\n    ARTIST_CONTEXT_MENU_ITEMS,\n    SONG_CONTEXT_MENU_ITEMS,\n} from '/@/renderer/features/context-menu/context-menu-items';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer, useListStoreByKey, usePlayButtonBehavior } from '/@/renderer/store';\nimport { LibraryItem, QueueSong, SongListQuery } from '/@/shared/types/domain-types';\n\ninterface SearchContentProps {\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const SearchContent = ({ tableRef }: SearchContentProps) => {\n    const navigate = useNavigate();\n    const server = useCurrentServer();\n    const { itemType } = useParams() as { itemType: LibraryItem };\n    const [searchParams] = useSearchParams();\n    const pageKey = itemType;\n    const { filter } = useListStoreByKey({\n        filter: { searchTerm: searchParams.get('query') || '' },\n        key: itemType,\n    });\n\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const playButtonBehavior = usePlayButtonBehavior();\n\n    const contextMenuItems = () => {\n        switch (itemType) {\n            case LibraryItem.ALBUM:\n                return ALBUM_CONTEXT_MENU_ITEMS;\n            case LibraryItem.ALBUM_ARTIST:\n                return ARTIST_CONTEXT_MENU_ITEMS;\n            case LibraryItem.SONG:\n                return SONG_CONTEXT_MENU_ITEMS;\n            default:\n                return [];\n        }\n    };\n\n    const handleRowDoubleClick = (e: RowDoubleClickedEvent<QueueSong>) => {\n        if (!e.data) return;\n        switch (itemType) {\n            case LibraryItem.ALBUM:\n                navigate(generatePath(AppRoute.LIBRARY_ALBUMS_DETAIL, { albumId: e.data.id }));\n                break;\n            case LibraryItem.ALBUM_ARTIST:\n                navigate(\n                    generatePath(AppRoute.LIBRARY_ALBUM_ARTISTS_DETAIL, {\n                        albumArtistId: e.data.id,\n                    }),\n                );\n                break;\n            case LibraryItem.SONG:\n                handlePlayQueueAdd?.({\n                    byItemType: {\n                        id: [],\n                        type: LibraryItem.SONG,\n                    },\n                    initialSongId: e.data.id,\n                    playType: playButtonBehavior,\n                    query: {\n                        startIndex: 0,\n                        ...filter,\n                    },\n                });\n                break;\n        }\n    };\n\n    const { rowClassRules } = useCurrentSongRowStyles({ tableRef });\n\n    const tableProps = useVirtualTable<SongListQuery>({\n        contextMenu: contextMenuItems(),\n        customFilters: filter,\n        itemType,\n        pageKey,\n        server,\n        tableRef,\n    });\n\n    return (\n        <VirtualGridAutoSizerContainer>\n            <VirtualTable\n                {...tableProps}\n                context={{\n                    itemType,\n                    query: searchParams.get('query'),\n                }}\n                getRowId={(data) => data.data.id}\n                infiniteInitialRowCount={25}\n                key={`table-${itemType}-${tableProps.rowHeight}-${server?.id}`}\n                onRowDoubleClicked={handleRowDoubleClick}\n                ref={tableRef}\n                rowClassRules={rowClassRules}\n                shouldUpdateSong={itemType === LibraryItem.SONG}\n            />\n        </VirtualGridAutoSizerContainer>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { Flex, Group, Stack } from '@mantine/core';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, MutableRefObject } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { generatePath, Link, useParams, useSearchParams } from 'react-router-dom';\n\nimport { Button, PageHeader, SearchInput } from '/@/renderer/components';\nimport { FilterBar, LibraryHeaderBar } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useListFilterRefresh } from '/@/renderer/hooks/use-list-filter-refresh';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer, useListStoreByKey } from '/@/renderer/store';\nimport {\n    AlbumArtistListQuery,\n    AlbumListQuery,\n    LibraryItem,\n    SongListQuery,\n} from '/@/shared/types/domain-types';\n\ninterface SearchHeaderProps {\n    navigationId: string;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const SearchHeader = ({ navigationId, tableRef }: SearchHeaderProps) => {\n    const { t } = useTranslation();\n    const { itemType } = useParams() as { itemType: LibraryItem };\n    const [searchParams, setSearchParams] = useSearchParams();\n    const cq = useContainerQuery();\n    const server = useCurrentServer();\n    const { filter } = useListStoreByKey<AlbumArtistListQuery | AlbumListQuery | SongListQuery>({\n        key: itemType,\n    });\n\n    const { handleRefreshTable } = useListFilterRefresh({\n        itemType,\n        server,\n    });\n\n    const handleSearch = debounce((e: ChangeEvent<HTMLInputElement>) => {\n        setSearchParams({ query: e.target.value }, { replace: true, state: { navigationId } });\n        handleRefreshTable(tableRef, { ...filter, searchTerm: e.target.value });\n    }, 200);\n\n    return (\n        <Stack\n            ref={cq.ref}\n            spacing={0}\n        >\n            <PageHeader>\n                <Flex\n                    justify=\"space-between\"\n                    w=\"100%\"\n                >\n                    <LibraryHeaderBar>\n                        <LibraryHeaderBar.Title>Search</LibraryHeaderBar.Title>\n                    </LibraryHeaderBar>\n                    <Group>\n                        <SearchInput\n                            defaultValue={searchParams.get('query') || ''}\n                            onChange={handleSearch}\n                            openedWidth={cq.isMd ? 250 : cq.isSm ? 200 : 150}\n                        />\n                    </Group>\n                </Flex>\n            </PageHeader>\n            <FilterBar>\n                <Group>\n                    <Button\n                        compact\n                        component={Link}\n                        fw={600}\n                        replace\n                        size=\"md\"\n                        state={{ navigationId }}\n                        to={{\n                            pathname: generatePath(AppRoute.SEARCH, { itemType: LibraryItem.SONG }),\n                            search: searchParams.toString(),\n                        }}\n                        variant={itemType === LibraryItem.SONG ? 'filled' : 'subtle'}\n                    >\n                        {t('entity.track_other', { postProcess: 'sentenceCase' })}\n                    </Button>\n                    <Button\n                        compact\n                        component={Link}\n                        fw={600}\n                        replace\n                        size=\"md\"\n                        state={{ navigationId }}\n                        to={{\n                            pathname: generatePath(AppRoute.SEARCH, {\n                                itemType: LibraryItem.ALBUM,\n                            }),\n                            search: searchParams.toString(),\n                        }}\n                        variant={itemType === LibraryItem.ALBUM ? 'filled' : 'subtle'}\n                    >\n                        {t('entity.album_other', { postProcess: 'sentenceCase' })}\n                    </Button>\n                    <Button\n                        compact\n                        component={Link}\n                        fw={600}\n                        replace\n                        size=\"md\"\n                        state={{ navigationId }}\n                        to={{\n                            pathname: generatePath(AppRoute.SEARCH, {\n                                itemType: LibraryItem.ALBUM_ARTIST,\n                            }),\n                            search: searchParams.toString(),\n                        }}\n                        variant={itemType === LibraryItem.ALBUM_ARTIST ? 'filled' : 'subtle'}\n                    >\n                        {t('entity.artist_other', { postProcess: 'sentenceCase' })}\n                    </Button>\n                </Group>\n            </FilterBar>\n        </Stack>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { useId, useRef } from 'react';\nimport { useLocation, useParams } from 'react-router';\n\nimport { SearchContent } from '/@/renderer/features/search/components/search-content';\nimport { SearchHeader } from '/@/renderer/features/search/components/search-header';\nimport { AnimatedPage } from '/@/renderer/features/shared';\n\nconst SearchRoute = () => {\n    const { state: locationState } = useLocation();\n    const localNavigationId = useId();\n    const navigationId = locationState?.navigationId || localNavigationId;\n    const { itemType } = useParams() as { itemType: string };\n    const tableRef = useRef<AgGridReactType | null>(null);\n\n    return (\n        <AnimatedPage key={`search-${navigationId}`}>\n            <SearchHeader\n                navigationId={navigationId}\n                tableRef={tableRef}\n            />\n            <SearchContent\n                key={`page-${itemType}`}\n                tableRef={tableRef}\n            />\n        </AnimatedPage>\n    );\n};\n\nexport default SearchRoute;\n"],"names":["SearchContent","tableRef","navigate","useNavigate","server","useCurrentServer","itemType","useParams","searchParams","useSearchParams","pageKey","filter","useListStoreByKey","handlePlayQueueAdd","usePlayQueueAdd","playButtonBehavior","usePlayButtonBehavior","contextMenuItems","LibraryItem","ALBUM_CONTEXT_MENU_ITEMS","ARTIST_CONTEXT_MENU_ITEMS","SONG_CONTEXT_MENU_ITEMS","handleRowDoubleClick","e","generatePath","AppRoute","rowClassRules","useCurrentSongRowStyles","tableProps","useVirtualTable","VirtualGridAutoSizerContainer","createElement","VirtualTable","data","SearchHeader","navigationId","t","useTranslation","setSearchParams","cq","useContainerQuery","handleRefreshTable","useListFilterRefresh","handleSearch","debounce","jsxs","Stack","jsx","PageHeader","Flex","LibraryHeaderBar","Group","SearchInput","FilterBar","Button","Link","SearchRoute","locationState","useLocation","localNavigationId","useId","useRef","AnimatedPage"],"mappings":"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"}