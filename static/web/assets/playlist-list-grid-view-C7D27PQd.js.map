{"version":3,"file":"playlist-list-grid-view-C7D27PQd.js","sources":["../../../src/renderer/features/playlists/components/playlist-list-grid-view.tsx"],"sourcesContent":["import { QueryKey, useQueryClient } from '@tanstack/react-query';\nimport { MutableRefObject, useCallback, useMemo } from 'react';\nimport AutoSizer, { Size } from 'react-virtualized-auto-sizer';\nimport { ListOnScrollProps } from 'react-window';\n\nimport { controller } from '/@/renderer/api/controller';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { PLAYLIST_CARD_ROWS } from '/@/renderer/components';\nimport {\n    VirtualGridAutoSizerContainer,\n    VirtualInfiniteGrid,\n    VirtualInfiniteGridRef,\n} from '/@/renderer/components/virtual-grid';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { useHandleFavorite } from '/@/renderer/features/shared/hooks/use-handle-favorite';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer, useListStoreByKey } from '/@/renderer/store';\nimport { useListStoreActions } from '/@/renderer/store/list.store';\nimport {\n    LibraryItem,\n    Playlist,\n    PlaylistListQuery,\n    PlaylistListResponse,\n    PlaylistListSort,\n} from '/@/shared/types/domain-types';\nimport { CardRow, ListDisplayType } from '/@/shared/types/types';\n\ninterface PlaylistListGridViewProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n}\n\nexport const PlaylistListGridView = ({ gridRef, itemCount }: PlaylistListGridViewProps) => {\n    const { pageKey } = useListContext();\n    const queryClient = useQueryClient();\n    const server = useCurrentServer();\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const { display, filter, grid } = useListStoreByKey<PlaylistListQuery>({ key: pageKey });\n    const { setGrid } = useListStoreActions();\n    const handleFavorite = useHandleFavorite({ gridRef, server });\n\n    const cardRows = useMemo(() => {\n        const rows: CardRow<Playlist>[] = [PLAYLIST_CARD_ROWS.nameFull];\n\n        switch (filter.sortBy) {\n            case PlaylistListSort.DURATION:\n                rows.push(PLAYLIST_CARD_ROWS.duration);\n                break;\n            case PlaylistListSort.NAME:\n                rows.push(PLAYLIST_CARD_ROWS.songCount);\n                break;\n            case PlaylistListSort.OWNER:\n                rows.push(PLAYLIST_CARD_ROWS.owner);\n                break;\n            case PlaylistListSort.PUBLIC:\n                rows.push(PLAYLIST_CARD_ROWS.public);\n                break;\n            case PlaylistListSort.SONG_COUNT:\n                rows.push(PLAYLIST_CARD_ROWS.songCount);\n                break;\n            case PlaylistListSort.UPDATED_AT:\n                break;\n        }\n\n        return rows;\n    }, [filter.sortBy]);\n\n    const handleGridScroll = useCallback(\n        (e: ListOnScrollProps) => {\n            setGrid({ data: { scrollOffset: e.scrollOffset }, key: pageKey });\n        },\n        [pageKey, setGrid],\n    );\n\n    const fetchInitialData = useCallback(() => {\n        const query: Omit<PlaylistListQuery, 'limit' | 'startIndex'> = {\n            ...filter,\n        };\n\n        const queriesFromCache: [QueryKey, PlaylistListResponse][] = queryClient.getQueriesData({\n            exact: false,\n            fetchStatus: 'idle',\n            queryKey: queryKeys.playlists.list(server?.id || '', query),\n            stale: false,\n        });\n\n        const itemData: Playlist[] = [];\n\n        for (const [, data] of queriesFromCache) {\n            const { items, startIndex } = data || {};\n\n            if (items && items.length !== 1 && startIndex !== undefined) {\n                let itemIndex = 0;\n                for (\n                    let rowIndex = startIndex;\n                    rowIndex < startIndex + items.length;\n                    rowIndex += 1\n                ) {\n                    itemData[rowIndex] = items[itemIndex];\n                    itemIndex += 1;\n                }\n            }\n        }\n\n        return itemData;\n    }, [filter, queryClient, server?.id]);\n\n    const fetch = useCallback(\n        async ({ skip, take }: { skip: number; take: number }) => {\n            if (!server) {\n                return [];\n            }\n\n            const query: PlaylistListQuery = {\n                limit: take,\n                ...filter,\n                _custom: {},\n                startIndex: skip,\n            };\n\n            const queryKey = queryKeys.playlists.list(server?.id || '', query);\n\n            const playlists = await queryClient.fetchQuery(queryKey, async ({ signal }) =>\n                controller.getPlaylistList({\n                    apiClientProps: {\n                        server,\n                        signal,\n                    },\n                    query,\n                }),\n            );\n\n            return playlists;\n        },\n        [filter, queryClient, server],\n    );\n\n    return (\n        <VirtualGridAutoSizerContainer>\n            <AutoSizer>\n                {({ height, width }: Size) => (\n                    <VirtualInfiniteGrid\n                        cardRows={cardRows}\n                        display={display || ListDisplayType.CARD}\n                        fetchFn={fetch}\n                        fetchInitialData={fetchInitialData}\n                        handleFavorite={handleFavorite}\n                        handlePlayQueueAdd={handlePlayQueueAdd}\n                        height={height}\n                        initialScrollOffset={grid?.scrollOffset || 0}\n                        itemCount={itemCount || 0}\n                        itemGap={grid?.itemGap ?? 10}\n                        itemSize={grid?.itemSize || 200}\n                        itemType={LibraryItem.PLAYLIST}\n                        key={`playlist-list-${server?.id}`}\n                        loading={itemCount === undefined || itemCount === null}\n                        minimumBatchSize={40}\n                        onScroll={handleGridScroll}\n                        ref={gridRef}\n                        route={{\n                            route: AppRoute.PLAYLISTS_DETAIL_SONGS,\n                            slugs: [{ idProperty: 'id', slugProperty: 'playlistId' }],\n                        }}\n                        width={width}\n                    />\n                )}\n            </AutoSizer>\n        </VirtualGridAutoSizerContainer>\n    );\n};\n"],"names":["PlaylistListGridView","gridRef","itemCount","pageKey","useListContext","queryClient","useQueryClient","server","useCurrentServer","handlePlayQueueAdd","usePlayQueueAdd","display","filter","grid","useListStoreByKey","setGrid","useListStoreActions","handleFavorite","useHandleFavorite","cardRows","useMemo","rows","PLAYLIST_CARD_ROWS","PlaylistListSort","handleGridScroll","useCallback","e","fetchInitialData","query","queriesFromCache","queryKeys","itemData","data","items","startIndex","itemIndex","rowIndex","fetch","skip","take","queryKey","signal","controller","jsx","VirtualGridAutoSizerContainer","AutoSizer","height","width","VirtualInfiniteGrid","ListDisplayType","LibraryItem","AppRoute"],"mappings":"6NAiCO,MAAMA,EAAuB,CAAC,CAAE,QAAAC,EAAS,UAAAC,KAA2C,CACjF,KAAA,CAAE,QAAAC,CAAQ,EAAIC,EAAe,EAC7BC,EAAcC,EAAe,EAC7BC,EAASC,EAAiB,EAC1BC,EAAqBC,EAAgB,EACrC,CAAE,QAAAC,EAAS,OAAAC,EAAQ,KAAAC,CAAA,EAASC,EAAqC,CAAE,IAAKX,EAAS,EACjF,CAAE,QAAAY,CAAQ,EAAIC,EAAoB,EAClCC,EAAiBC,EAAkB,CAAE,QAAAjB,EAAS,OAAAM,EAAQ,EAEtDY,EAAWC,EAAAA,QAAQ,IAAM,CACrB,MAAAC,EAA4B,CAACC,EAAmB,QAAQ,EAE9D,OAAQV,EAAO,OAAQ,CACnB,KAAKW,EAAiB,SACbF,EAAA,KAAKC,EAAmB,QAAQ,EACrC,MACJ,KAAKC,EAAiB,KACbF,EAAA,KAAKC,EAAmB,SAAS,EACtC,MACJ,KAAKC,EAAiB,MACbF,EAAA,KAAKC,EAAmB,KAAK,EAClC,MACJ,KAAKC,EAAiB,OACbF,EAAA,KAAKC,EAAmB,MAAM,EACnC,MACJ,KAAKC,EAAiB,WACbF,EAAA,KAAKC,EAAmB,SAAS,EACtC,MACJ,KAAKC,EAAiB,WAClB,KAAA,CAGD,OAAAF,CAAA,EACR,CAACT,EAAO,MAAM,CAAC,EAEZY,EAAmBC,EAAA,YACpBC,GAAyB,CACdX,EAAA,CAAE,KAAM,CAAE,aAAcW,EAAE,YAAa,EAAG,IAAKvB,EAAS,CACpE,EACA,CAACA,EAASY,CAAO,CACrB,EAEMY,EAAmBF,EAAAA,YAAY,IAAM,CACvC,MAAMG,EAAyD,CAC3D,GAAGhB,CACP,EAEMiB,EAAuDxB,EAAY,eAAe,CACpF,MAAO,GACP,YAAa,OACb,SAAUyB,EAAU,UAAU,MAAKvB,GAAA,YAAAA,EAAQ,KAAM,GAAIqB,CAAK,EAC1D,MAAO,EAAA,CACV,EAEKG,EAAuB,CAAC,EAE9B,SAAW,CAAA,CAAGC,CAAI,IAAKH,EAAkB,CACrC,KAAM,CAAE,MAAAI,EAAO,WAAAC,CAAW,EAAIF,GAAQ,CAAC,EAEvC,GAAIC,GAASA,EAAM,SAAW,GAAKC,IAAe,OAAW,CACzD,IAAIC,EAAY,EAChB,QACQC,EAAWF,EACfE,EAAWF,EAAaD,EAAM,OAC9BG,GAAY,EAEHL,EAAAK,CAAQ,EAAIH,EAAME,CAAS,EACvBA,GAAA,CACjB,CACJ,CAGG,OAAAJ,GACR,CAACnB,EAAQP,EAAaE,GAAA,YAAAA,EAAQ,EAAE,CAAC,EAE9B8B,EAAQZ,EAAA,YACV,MAAO,CAAE,KAAAa,EAAM,KAAAC,KAA2C,CACtD,GAAI,CAAChC,EACD,MAAO,CAAC,EAGZ,MAAMqB,EAA2B,CAC7B,MAAOW,EACP,GAAG3B,EACH,QAAS,CAAC,EACV,WAAY0B,CAChB,EAEME,EAAWV,EAAU,UAAU,MAAKvB,GAAA,YAAAA,EAAQ,KAAM,GAAIqB,CAAK,EAY1D,OAVW,MAAMvB,EAAY,WAAWmC,EAAU,MAAO,CAAE,OAAAC,CAAO,IACrEC,EAAW,gBAAgB,CACvB,eAAgB,CACZ,OAAAnC,EACA,OAAAkC,CACJ,EACA,MAAAb,CACH,CAAA,CACL,CAGJ,EACA,CAAChB,EAAQP,EAAaE,CAAM,CAChC,EAGI,OAAAoC,MAACC,GACG,SAACD,EAAAA,IAAAE,EAAA,CACI,UAAC,CAAE,OAAAC,EAAQ,MAAAC,CACR,IAAAJ,EAAA,IAACK,EAAA,CACG,SAAA7B,EACA,QAASR,GAAWsC,EAAgB,KACpC,QAASZ,EACT,iBAAAV,EACA,eAAAV,EACA,mBAAAR,EACA,OAAAqC,EACA,qBAAqBjC,GAAA,YAAAA,EAAM,eAAgB,EAC3C,UAAWX,GAAa,EACxB,SAASW,GAAA,YAAAA,EAAM,UAAW,GAC1B,UAAUA,GAAA,YAAAA,EAAM,WAAY,IAC5B,SAAUqC,EAAY,SAEtB,QAAoChD,GAAc,KAClD,iBAAkB,GAClB,SAAUsB,EACV,IAAKvB,EACL,MAAO,CACH,MAAOkD,EAAS,uBAChB,MAAO,CAAC,CAAE,WAAY,KAAM,aAAc,YAAc,CAAA,CAC5D,EACA,MAAAJ,CAAA,EATK,iBAAiBxC,GAAA,YAAAA,EAAQ,EAAE,IAY5C,CACJ,CAAA,CAER"}