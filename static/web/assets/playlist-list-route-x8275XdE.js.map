{"version":3,"mappings":"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","names":["PlaylistListTableView","lazy","module","PlaylistListGridView","PlaylistListContent","gridRef","itemCount","tableRef","pageKey","useListContext","display","useListStoreByKey","Suspense","Spinner","ListDisplayType","jsx","FILTERS","SortOrder","i18n","PlaylistListSort","PlaylistListHeaderFilters","t","useTranslation","queryClient","useQueryClient","server","useCurrentServer","setDisplayType","setFilter","setGrid","setTable","setTablePagination","useListStoreActions","filter","grid","table","cq","useContainerQuery","isGrid","sortByLabel","_a","f","fetch","useCallback","skip","take","filters","query","_b","queryKey","queryKeys","signal","api","handleFilterChange","data","_c","dataSource","params","limit","startIndex","pageFilters","playlistsRes","_d","_e","_f","handleSetSortBy","e","sortOrder","updatedFilters","LibraryItem","handleToggleSortOrder","newSortOrder","handleSetViewType","handleTableColumns","values","existingColumns","newColumn","removed","column","newColumns","handleAutoFitColumns","handleItemSize","handleItemGap","handleRefresh","jsxs","Flex","Group","DropdownMenu","Button","Divider","OrderToggleButton","RiRefreshLine","RiMoreFill","RiSettings3Fill","Slider","Fragment","Stack","MultiSelect","PLAYLIST_TABLE_COLUMNS","Text","Switch","PlaylistListHeader","handleCreatePlaylistModal","openModal","CreatePlaylistForm","closeAllModals","ServerType","refresh","search","useDisplayRefresh","handleSearch","debounce","PageHeader","LibraryHeaderBar","Paper","SpinnerIcon","RiFileAddFill","SearchInput","PlaylistListRoute","useRef","playlistId","useParams","itemCountCheck","usePlaylistList","providerValue","useMemo","AnimatedPage","ListContext"],"ignoreList":[],"sources":["../../../src/renderer/features/playlists/components/playlist-list-content.tsx","../../../src/renderer/features/playlists/components/playlist-list-header-filters.tsx","../../../src/renderer/features/playlists/components/playlist-list-header.tsx","../../../src/renderer/features/playlists/routes/playlist-list-route.tsx"],"sourcesContent":["import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { lazy, MutableRefObject, Suspense } from 'react';\n\nimport { Spinner } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { useListStoreByKey } from '/@/renderer/store/list.store';\nimport { ListDisplayType } from '/@/shared/types/types';\n\nconst PlaylistListTableView = lazy(() =>\n    import('/@/renderer/features/playlists/components/playlist-list-table-view').then((module) => ({\n        default: module.PlaylistListTableView,\n    })),\n);\n\nconst PlaylistListGridView = lazy(() =>\n    import('/@/renderer/features/playlists/components/playlist-list-grid-view').then((module) => ({\n        default: module.PlaylistListGridView,\n    })),\n);\n\ninterface PlaylistListContentProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const PlaylistListContent = ({ gridRef, itemCount, tableRef }: PlaylistListContentProps) => {\n    const { pageKey } = useListContext();\n    const { display } = useListStoreByKey({ key: pageKey });\n\n    return (\n        <Suspense fallback={<Spinner container />}>\n            {display === ListDisplayType.CARD || display === ListDisplayType.POSTER ? (\n                <PlaylistListGridView\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                />\n            ) : (\n                <PlaylistListTableView\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            )}\n            <div />\n        </Suspense>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { IDatasource } from '@ag-grid-community/core';\nimport { Divider, Flex, Group, Stack } from '@mantine/core';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { ChangeEvent, MouseEvent, MutableRefObject, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { RiMoreFill, RiRefreshLine, RiSettings3Fill } from 'react-icons/ri';\n\nimport i18n from '/@/i18n/i18n';\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { Button, DropdownMenu, MultiSelect, Slider, Switch, Text } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { PLAYLIST_TABLE_COLUMNS } from '/@/renderer/components/virtual-table';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { OrderToggleButton } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { PlaylistListFilter, useCurrentServer, useListStoreActions } from '/@/renderer/store';\nimport { useListStoreByKey } from '/@/renderer/store/list.store';\nimport {\n    LibraryItem,\n    PlaylistListQuery,\n    PlaylistListSort,\n    SortOrder,\n} from '/@/shared/types/domain-types';\nimport { ListDisplayType, TableColumn } from '/@/shared/types/types';\n\nconst FILTERS = {\n    jellyfin: [\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.duration', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.DURATION,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.songCount', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.SONG_COUNT,\n        },\n    ],\n    navidrome: [\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.duration', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.DURATION,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.owner', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.OWNER,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.isPublic', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.PUBLIC,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.songCount', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.SONG_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyUpdated', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.UPDATED_AT,\n        },\n    ],\n    subsonic: [\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.duration', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.DURATION,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.owner', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.OWNER,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.isPublic', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.PUBLIC,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.songCount', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.SONG_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyUpdated', { postProcess: 'titleCase' }),\n            value: PlaylistListSort.UPDATED_AT,\n        },\n    ],\n};\n\ninterface PlaylistListHeaderFiltersProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const PlaylistListHeaderFilters = ({\n    gridRef,\n    tableRef,\n}: PlaylistListHeaderFiltersProps) => {\n    const { t } = useTranslation();\n    const { pageKey } = useListContext();\n    const queryClient = useQueryClient();\n    const server = useCurrentServer();\n    const { setDisplayType, setFilter, setGrid, setTable, setTablePagination } =\n        useListStoreActions();\n    const { display, filter, grid, table } = useListStoreByKey<PlaylistListQuery>({ key: pageKey });\n    const cq = useContainerQuery();\n\n    const isGrid = display === ListDisplayType.CARD || display === ListDisplayType.POSTER;\n\n    const sortByLabel =\n        (server?.type &&\n            (\n                FILTERS[server.type as keyof typeof FILTERS] as { name: string; value: string }[]\n            ).find((f) => f.value === filter.sortBy)?.name) ||\n        'Unknown';\n\n    const fetch = useCallback(\n        async (skip: number, take: number, filters: PlaylistListFilter) => {\n            const query: PlaylistListQuery = {\n                _custom: {\n                    jellyfin: {\n                        ...filters._custom?.jellyfin,\n                    },\n                    navidrome: {\n                        ...filters._custom?.navidrome,\n                    },\n                },\n                limit: take,\n                startIndex: skip,\n                ...filters,\n            };\n\n            const queryKey = queryKeys.playlists.list(server?.id || '', query);\n\n            const playlists = await queryClient.fetchQuery(queryKey, async ({ signal }) =>\n                api.controller.getPlaylistList({\n                    apiClientProps: {\n                        server,\n                        signal,\n                    },\n                    query,\n                }),\n            );\n\n            return playlists;\n        },\n        [queryClient, server],\n    );\n\n    const handleFilterChange = useCallback(\n        async (filters?: PlaylistListFilter) => {\n            if (isGrid) {\n                gridRef.current?.scrollTo(0);\n                gridRef.current?.resetLoadMoreItemsCache();\n                const data = await fetch(0, 200, filters || filter);\n                if (!data?.items) return;\n                gridRef.current?.setItemData(data.items);\n            } else {\n                const dataSource: IDatasource = {\n                    getRows: async (params) => {\n                        const limit = params.endRow - params.startRow;\n                        const startIndex = params.startRow;\n\n                        const pageFilters = filters || filter;\n\n                        const queryKey = queryKeys.playlists.list(server?.id || '', {\n                            limit,\n                            startIndex,\n                            ...pageFilters,\n                        });\n\n                        const playlistsRes = await queryClient.fetchQuery(\n                            queryKey,\n                            async ({ signal }) =>\n                                api.controller.getPlaylistList({\n                                    apiClientProps: {\n                                        server,\n                                        signal,\n                                    },\n                                    query: {\n                                        limit,\n                                        startIndex,\n                                        ...pageFilters,\n                                    },\n                                }),\n                        );\n\n                        params.successCallback(\n                            playlistsRes?.items || [],\n                            playlistsRes?.totalRecordCount || 0,\n                        );\n                    },\n                    rowCount: undefined,\n                };\n                tableRef.current?.api.setDatasource(dataSource);\n                tableRef.current?.api.purgeInfiniteCache();\n                tableRef.current?.api.ensureIndexVisible(0, 'top');\n                setTablePagination({ data: { currentPage: 0 }, key: pageKey });\n            }\n        },\n        [\n            isGrid,\n            gridRef,\n            fetch,\n            filter,\n            tableRef,\n            setTablePagination,\n            pageKey,\n            server,\n            queryClient,\n        ],\n    );\n\n    const handleSetSortBy = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value || !server?.type) return;\n\n            const sortOrder = FILTERS[server.type as keyof typeof FILTERS].find(\n                (f) => f.value === e.currentTarget.value,\n            )?.defaultOrder;\n\n            const updatedFilters = setFilter({\n                data: {\n                    sortBy: e.currentTarget.value as PlaylistListSort,\n                    sortOrder: sortOrder || SortOrder.ASC,\n                },\n                itemType: LibraryItem.PLAYLIST,\n                key: pageKey,\n            }) as PlaylistListFilter;\n\n            handleFilterChange(updatedFilters);\n        },\n        [handleFilterChange, pageKey, server?.type, setFilter],\n    );\n\n    const handleToggleSortOrder = useCallback(() => {\n        const newSortOrder = filter.sortOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n        const updatedFilters = setFilter({\n            data: { sortOrder: newSortOrder },\n            itemType: LibraryItem.PLAYLIST,\n            key: pageKey,\n        }) as PlaylistListFilter;\n        handleFilterChange(updatedFilters);\n    }, [filter.sortOrder, handleFilterChange, pageKey, setFilter]);\n\n    const handleSetViewType = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value) return;\n            setDisplayType({ data: e.currentTarget.value as ListDisplayType, key: pageKey });\n        },\n        [pageKey, setDisplayType],\n    );\n\n    const handleTableColumns = (values: TableColumn[]) => {\n        const existingColumns = table.columns;\n\n        if (values.length === 0) {\n            return setTable({\n                data: { columns: [] },\n                key: pageKey,\n            });\n        }\n\n        // If adding a column\n        if (values.length > existingColumns.length) {\n            const newColumn = { column: values[values.length - 1], width: 100 };\n\n            return setTable({ data: { columns: [...existingColumns, newColumn] }, key: pageKey });\n        }\n\n        // If removing a column\n        const removed = existingColumns.filter((column) => !values.includes(column.column));\n        const newColumns = existingColumns.filter((column) => !removed.includes(column));\n\n        return setTable({ data: { columns: newColumns }, key: pageKey });\n    };\n\n    const handleAutoFitColumns = (e: ChangeEvent<HTMLInputElement>) => {\n        setTable({ data: { autoFit: e.currentTarget.checked }, key: pageKey });\n\n        if (e.currentTarget.checked) {\n            tableRef.current?.api.sizeColumnsToFit();\n        }\n    };\n\n    const handleItemSize = (e: number) => {\n        if (isGrid) {\n            setGrid({ data: { itemSize: e }, key: pageKey });\n        } else {\n            setTable({ data: { rowHeight: e }, key: pageKey });\n        }\n    };\n\n    const handleItemGap = (e: number) => {\n        setGrid({ data: { itemGap: e }, key: pageKey });\n    };\n\n    const handleRefresh = () => {\n        queryClient.invalidateQueries(queryKeys.playlists.list(server?.id || '', filter));\n        handleFilterChange(filter);\n    };\n\n    return (\n        <Flex justify=\"space-between\">\n            <Group\n                ref={cq.ref}\n                spacing=\"sm\"\n                w=\"100%\"\n            >\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            fw=\"600\"\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            {sortByLabel}\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        {FILTERS[server?.type as keyof typeof FILTERS].map((f) => (\n                            <DropdownMenu.Item\n                                $isActive={f.value === filter.sortBy}\n                                key={`filter-${f.name}`}\n                                onClick={handleSetSortBy}\n                                value={f.value}\n                            >\n                                {f.name}\n                            </DropdownMenu.Item>\n                        ))}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n                <Divider orientation=\"vertical\" />\n                <OrderToggleButton\n                    onToggle={handleToggleSortOrder}\n                    sortOrder={filter.sortOrder}\n                />\n                <Divider orientation=\"vertical\" />\n                <Button\n                    compact\n                    onClick={handleRefresh}\n                    size=\"md\"\n                    tooltip={{ label: t('common.refresh', { postProcess: 'titleCase' }) }}\n                    variant=\"subtle\"\n                >\n                    <RiRefreshLine size=\"1.3rem\" />\n                </Button>\n                <Divider orientation=\"vertical\" />\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            fw=\"600\"\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            <RiMoreFill size=\"1.3rem\" />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Item\n                            icon={<RiRefreshLine />}\n                            onClick={handleRefresh}\n                        >\n                            {t('common.refresh', { postProcess: 'titleCase' })}\n                        </DropdownMenu.Item>\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </Group>\n            <Group>\n                <DropdownMenu\n                    position=\"bottom-end\"\n                    width={425}\n                >\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            <RiSettings3Fill size=\"1.3rem\" />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Label>\n                            {t('table.config.general.displayType', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.CARD}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.CARD}\n                        >\n                            {t('table.config.view.card', { postProcess: 'titleCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.POSTER}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.POSTER}\n                        >\n                            {t('table.config.view.poster', { postProcess: 'titleCase' })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.TABLE}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.TABLE}\n                        >\n                            {t('table.config.view.table', { postProcess: 'titleCase' })}\n                        </DropdownMenu.Item>\n                        {/* <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.TABLE_PAGINATED}\n                            value={ListDisplayType.TABLE_PAGINATED}\n                            onClick={handleSetViewType}\n                        >\n                            Table (paginated)\n                        </DropdownMenu.Item> */}\n                        <DropdownMenu.Divider />\n                        <DropdownMenu.Label>\n                            {t('table.config.general.itemSize', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item closeMenuOnClick={false}>\n                            <Slider\n                                defaultValue={isGrid ? grid?.itemSize || 0 : table.rowHeight}\n                                max={isGrid ? 300 : 100}\n                                min={isGrid ? 100 : 25}\n                                onChangeEnd={handleItemSize}\n                            />\n                        </DropdownMenu.Item>\n                        {isGrid && (\n                            <>\n                                <DropdownMenu.Label>\n                                    {t('table.config.general.itemGap', {\n                                        postProcess: 'sentenceCase',\n                                    })}\n                                </DropdownMenu.Label>\n                                <DropdownMenu.Item closeMenuOnClick={false}>\n                                    <Slider\n                                        defaultValue={grid?.itemGap || 0}\n                                        max={30}\n                                        min={0}\n                                        onChangeEnd={handleItemGap}\n                                    />\n                                </DropdownMenu.Item>\n                            </>\n                        )}\n                        {!isGrid && (\n                            <>\n                                <DropdownMenu.Label>\n                                    {t('table.config.generaltableColumns', {\n                                        postProcess: 'titleCase',\n                                    })}\n                                </DropdownMenu.Label>\n                                <DropdownMenu.Item\n                                    closeMenuOnClick={false}\n                                    component=\"div\"\n                                    sx={{ cursor: 'default' }}\n                                >\n                                    <Stack>\n                                        <MultiSelect\n                                            clearable\n                                            data={PLAYLIST_TABLE_COLUMNS}\n                                            defaultValue={table?.columns.map(\n                                                (column) => column.column,\n                                            )}\n                                            onChange={handleTableColumns}\n                                            width={300}\n                                        />\n                                        <Group position=\"apart\">\n                                            <Text>\n                                                {t('table.config.general.autoFitColumns', {\n                                                    postProcess: 'titleCase',\n                                                })}\n                                            </Text>\n                                            <Switch\n                                                defaultChecked={table.autoFit}\n                                                onChange={handleAutoFitColumns}\n                                            />\n                                        </Group>\n                                    </Stack>\n                                </DropdownMenu.Item>\n                            </>\n                        )}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </Group>\n        </Flex>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { Flex, Group, Stack } from '@mantine/core';\nimport { closeAllModals, openModal } from '@mantine/modals';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, MutableRefObject } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { RiFileAddFill } from 'react-icons/ri';\n\nimport { Button, PageHeader, Paper, SearchInput, SpinnerIcon } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { CreatePlaylistForm } from '/@/renderer/features/playlists/components/create-playlist-form';\nimport { PlaylistListHeaderFilters } from '/@/renderer/features/playlists/components/playlist-list-header-filters';\nimport { LibraryHeaderBar } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useDisplayRefresh } from '/@/renderer/hooks/use-display-refresh';\nimport { PlaylistListFilter, useCurrentServer } from '/@/renderer/store';\nimport { LibraryItem, PlaylistListQuery, ServerType } from '/@/shared/types/domain-types';\n\ninterface PlaylistListHeaderProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const PlaylistListHeader = ({ gridRef, itemCount, tableRef }: PlaylistListHeaderProps) => {\n    const { t } = useTranslation();\n    const cq = useContainerQuery();\n    const server = useCurrentServer();\n\n    const handleCreatePlaylistModal = () => {\n        openModal({\n            children: <CreatePlaylistForm onCancel={() => closeAllModals()} />,\n            onClose: () => {\n                tableRef?.current?.api?.purgeInfiniteCache();\n            },\n            size: server?.type === ServerType?.NAVIDROME ? 'xl' : 'sm',\n            title: t('form.createPlaylist.title', { postProcess: 'sentenceCase' }),\n        });\n    };\n\n    const { filter, refresh, search } = useDisplayRefresh<PlaylistListQuery>({\n        gridRef,\n        itemCount,\n        itemType: LibraryItem.PLAYLIST,\n        server,\n        tableRef,\n    });\n\n    const handleSearch = debounce((e: ChangeEvent<HTMLInputElement>) => {\n        const updatedFilters = search(e) as PlaylistListFilter;\n        refresh(updatedFilters);\n    }, 500);\n\n    return (\n        <Stack\n            ref={cq.ref}\n            spacing={0}\n        >\n            <PageHeader backgroundColor=\"var(--titlebar-bg)\">\n                <Flex\n                    align=\"center\"\n                    justify=\"space-between\"\n                    w=\"100%\"\n                >\n                    <LibraryHeaderBar>\n                        <LibraryHeaderBar.Title>\n                            {t('page.playlistList.title', { postProcess: 'titleCase' })}\n                        </LibraryHeaderBar.Title>\n                        <Paper\n                            fw=\"600\"\n                            px=\"1rem\"\n                            py=\"0.3rem\"\n                            radius=\"sm\"\n                        >\n                            {itemCount === null || itemCount === undefined ? (\n                                <SpinnerIcon />\n                            ) : (\n                                itemCount\n                            )}\n                        </Paper>\n                        <Button\n                            onClick={handleCreatePlaylistModal}\n                            tooltip={{\n                                label: t('action.createPlaylist', { postProcess: 'sentenceCase' }),\n                                openDelay: 500,\n                            }}\n                            variant=\"filled\"\n                        >\n                            <RiFileAddFill />\n                        </Button>\n                    </LibraryHeaderBar>\n                    <Group>\n                        <SearchInput\n                            defaultValue={filter.searchTerm}\n                            onChange={handleSearch}\n                            openedWidth={cq.isMd ? 250 : cq.isSm ? 200 : 150}\n                        />\n                    </Group>\n                </Flex>\n            </PageHeader>\n            <Paper p=\"1rem\">\n                <PlaylistListHeaderFilters\n                    gridRef={gridRef}\n                    tableRef={tableRef}\n                />\n            </Paper>\n        </Stack>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { useMemo, useRef } from 'react';\nimport { useParams } from 'react-router';\n\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { ListContext } from '/@/renderer/context/list-context';\nimport { PlaylistListContent } from '/@/renderer/features/playlists/components/playlist-list-content';\nimport { PlaylistListHeader } from '/@/renderer/features/playlists/components/playlist-list-header';\nimport { usePlaylistList } from '/@/renderer/features/playlists/queries/playlist-list-query';\nimport { AnimatedPage } from '/@/renderer/features/shared';\nimport { useCurrentServer, useListStoreByKey } from '/@/renderer/store';\nimport { PlaylistListSort, PlaylistSongListQuery, SortOrder } from '/@/shared/types/domain-types';\n\nconst PlaylistListRoute = () => {\n    const gridRef = useRef<null | VirtualInfiniteGridRef>(null);\n    const tableRef = useRef<AgGridReactType | null>(null);\n    const server = useCurrentServer();\n    const { playlistId } = useParams();\n    const pageKey = 'playlist';\n    const { filter } = useListStoreByKey<PlaylistSongListQuery>({ key: pageKey });\n\n    const itemCountCheck = usePlaylistList({\n        options: {\n            cacheTime: 1000 * 60 * 60 * 2,\n            staleTime: 1000 * 60 * 60 * 2,\n        },\n        query: {\n            ...filter,\n            limit: 1,\n            sortBy: PlaylistListSort.NAME,\n            sortOrder: SortOrder.ASC,\n            startIndex: 0,\n        },\n        serverId: server?.id,\n    });\n\n    const itemCount =\n        itemCountCheck.data?.totalRecordCount === null\n            ? undefined\n            : itemCountCheck.data?.totalRecordCount;\n\n    const providerValue = useMemo(() => {\n        return {\n            id: playlistId,\n            pageKey,\n        };\n    }, [playlistId]);\n\n    return (\n        <AnimatedPage>\n            <ListContext.Provider value={providerValue}>\n                <PlaylistListHeader\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n                <PlaylistListContent\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            </ListContext.Provider>\n        </AnimatedPage>\n    );\n};\n\nexport default PlaylistListRoute;\n"],"file":"assets/playlist-list-route-x8275XdE.js"}