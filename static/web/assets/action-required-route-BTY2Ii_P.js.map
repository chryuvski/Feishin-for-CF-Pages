{"version":3,"file":"action-required-route-BTY2Ii_P.js","sources":["../../../src/renderer/features/action-required/components/action-required-container.tsx","../../../src/renderer/features/action-required/components/server-credential-required.tsx","../../../src/renderer/features/action-required/components/server-required.tsx","../../../src/renderer/features/action-required/routes/action-required-route.tsx"],"sourcesContent":["import { Group, Stack } from '@mantine/core';\nimport { ReactNode } from 'react';\nimport { RiAlertFill } from 'react-icons/ri';\n\nimport { Text } from '/@/renderer/components';\n\ninterface ActionRequiredContainerProps {\n    children: ReactNode;\n    title: string;\n}\n\nexport const ActionRequiredContainer = ({ children, title }: ActionRequiredContainerProps) => (\n    <Stack sx={{ cursor: 'default', maxWidth: '700px' }}>\n        <Group>\n            <RiAlertFill\n                color=\"var(--warning-color)\"\n                size={30}\n            />\n            <Text\n                size=\"xl\"\n                sx={{ textTransform: 'uppercase' }}\n            >\n                {title}\n            </Text>\n        </Group>\n        <Stack>{children}</Stack>\n    </Stack>\n);\n","import { Text } from '/@/renderer/components';\nimport { useCurrentServer } from '/@/renderer/store';\n\nexport const ServerCredentialRequired = () => {\n    const currentServer = useCurrentServer();\n\n    return (\n        <>\n            <Text>\n                The selected server &apos;{currentServer?.name}&apos; requires an additional login\n                to access.\n            </Text>\n            <Text>\n                Add your credentials in the &apos;manage servers&apos; menu or switch to a different\n                server.\n            </Text>\n        </>\n    );\n};\n","import { RiMenuFill } from 'react-icons/ri';\n\nimport { Button, DropdownMenu, Text } from '/@/renderer/components';\nimport { AppMenu } from '/@/renderer/features/titlebar/components/app-menu';\n\nexport const ServerRequired = () => {\n    return (\n        <>\n            <Text>No server selected.</Text>\n            <DropdownMenu>\n                <DropdownMenu.Target>\n                    <Button\n                        leftIcon={<RiMenuFill />}\n                        variant=\"filled\"\n                    >\n                        Open menu\n                    </Button>\n                </DropdownMenu.Target>\n                <DropdownMenu.Dropdown>\n                    <AppMenu />\n                </DropdownMenu.Dropdown>\n            </DropdownMenu>\n        </>\n    );\n};\n","import { Center, Group, Stack } from '@mantine/core';\nimport { openModal } from '@mantine/modals';\nimport { useTranslation } from 'react-i18next';\nimport { RiCheckFill, RiEdit2Line, RiHome4Line } from 'react-icons/ri';\nimport { Link } from 'react-router-dom';\n\nimport { Button, PageHeader, Text } from '/@/renderer/components';\nimport { ActionRequiredContainer } from '/@/renderer/features/action-required/components/action-required-container';\nimport { ServerCredentialRequired } from '/@/renderer/features/action-required/components/server-credential-required';\nimport { ServerRequired } from '/@/renderer/features/action-required/components/server-required';\nimport { ServerList } from '/@/renderer/features/servers';\nimport { AnimatedPage } from '/@/renderer/features/shared';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer } from '/@/renderer/store';\n\nconst ActionRequiredRoute = () => {\n    const { t } = useTranslation();\n    const currentServer = useCurrentServer();\n    const isServerRequired = !currentServer;\n    const isCredentialRequired = currentServer && !currentServer.credential;\n\n    const checks = [\n        {\n            component: <ServerCredentialRequired />,\n            title: t('error.credentialsRequired', { postProcess: 'sentenceCase' }),\n            valid: !isCredentialRequired,\n        },\n        {\n            component: <ServerRequired />,\n            title: t('error.serverRequired', { postProcess: 'serverRequired' }),\n            valid: !isServerRequired,\n        },\n    ];\n\n    const canReturnHome = checks.every((c) => c.valid);\n    const displayedCheck = checks.find((c) => !c.valid);\n\n    const handleManageServersModal = () => {\n        openModal({\n            children: <ServerList />,\n            title: t('page.appMenu.manageServers', { postProcess: 'sentenceCase' }),\n        });\n    };\n\n    return (\n        <AnimatedPage>\n            <PageHeader />\n            <Center sx={{ height: '100%', width: '100vw' }}>\n                <Stack\n                    spacing=\"xl\"\n                    sx={{ maxWidth: '50%' }}\n                >\n                    <Group noWrap>\n                        {displayedCheck && (\n                            <ActionRequiredContainer title={displayedCheck.title}>\n                                {displayedCheck?.component}\n                            </ActionRequiredContainer>\n                        )}\n                    </Group>\n                    <Stack mt=\"2rem\">\n                        {canReturnHome && (\n                            <>\n                                <Group\n                                    noWrap\n                                    position=\"center\"\n                                >\n                                    <RiCheckFill\n                                        color=\"var(--success-color)\"\n                                        size={30}\n                                    />\n                                    <Text size=\"xl\">No issues found</Text>\n                                </Group>\n                                <Button\n                                    component={Link}\n                                    disabled={!canReturnHome}\n                                    leftIcon={<RiHome4Line />}\n                                    to={AppRoute.HOME}\n                                    variant=\"filled\"\n                                >\n                                    Go back\n                                </Button>\n                            </>\n                        )}\n                        {!displayedCheck && (\n                            <Group\n                                noWrap\n                                position=\"center\"\n                            >\n                                <Button\n                                    fullWidth\n                                    leftIcon={<RiEdit2Line />}\n                                    onClick={handleManageServersModal}\n                                    variant=\"filled\"\n                                >\n                                    {t('page.appMenu.manageServers', {\n                                        postProcess: 'sentenceCase',\n                                    })}\n                                </Button>\n                            </Group>\n                        )}\n                    </Stack>\n                </Stack>\n            </Center>\n        </AnimatedPage>\n    );\n};\n\nexport default ActionRequiredRoute;\n"],"names":["ActionRequiredContainer","children","title","jsxs","Stack","Group","jsx","RiAlertFill","Text","ServerCredentialRequired","currentServer","useCurrentServer","Fragment","ServerRequired","DropdownMenu","Button","RiMenuFill","AppMenu","ActionRequiredRoute","t","useTranslation","isServerRequired","isCredentialRequired","checks","canReturnHome","c","displayedCheck","handleManageServersModal","openModal","ServerList","AnimatedPage","PageHeader","Center","RiCheckFill","Link","RiHome4Line","AppRoute","RiEdit2Line"],"mappings":"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"}