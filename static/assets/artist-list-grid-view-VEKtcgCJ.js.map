{"version":3,"file":"artist-list-grid-view-VEKtcgCJ.js","sources":["../../../src/renderer/features/artists/components/artist-list-grid-view.tsx"],"sourcesContent":["import { QueryKey, useQueryClient } from '@tanstack/react-query';\nimport { MutableRefObject, useCallback, useMemo } from 'react';\nimport AutoSizer, { Size } from 'react-virtualized-auto-sizer';\nimport { ListOnScrollProps } from 'react-window';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { ALBUMARTIST_CARD_ROWS } from '/@/renderer/components';\nimport {\n    VirtualGridAutoSizerContainer,\n    VirtualInfiniteGrid,\n    VirtualInfiniteGridRef,\n} from '/@/renderer/components/virtual-grid';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { useHandleFavorite } from '/@/renderer/features/shared/hooks/use-handle-favorite';\nimport { AppRoute } from '/@/renderer/router/routes';\nimport { useCurrentServer, useListStoreActions } from '/@/renderer/store';\nimport { useListStoreByKey } from '/@/renderer/store/list.store';\nimport {\n    AlbumArtist,\n    ArtistListQuery,\n    ArtistListResponse,\n    ArtistListSort,\n    LibraryItem,\n} from '/@/shared/types/domain-types';\nimport { CardRow, ListDisplayType } from '/@/shared/types/types';\n\ninterface ArtistListGridViewProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n}\n\nexport const ArtistListGridView = ({ gridRef, itemCount }: ArtistListGridViewProps) => {\n    const queryClient = useQueryClient();\n    const server = useCurrentServer();\n    const handlePlayQueueAdd = usePlayQueueAdd();\n\n    const { pageKey } = useListContext();\n    const { display, filter, grid } = useListStoreByKey<ArtistListQuery>({ key: pageKey });\n    const { setGrid } = useListStoreActions();\n    const handleFavorite = useHandleFavorite({ gridRef, server });\n\n    const fetchInitialData = useCallback(() => {\n        const query: Omit<ArtistListQuery, 'limit' | 'startIndex'> = {\n            ...filter,\n        };\n\n        const queriesFromCache: [QueryKey, ArtistListResponse][] = queryClient.getQueriesData({\n            exact: false,\n            fetchStatus: 'idle',\n            queryKey: queryKeys.artists.list(server?.id || '', query),\n            stale: false,\n        });\n\n        const itemData: AlbumArtist[] = [];\n\n        for (const [, data] of queriesFromCache) {\n            const { items, startIndex } = data || {};\n\n            if (items && items.length !== 1 && startIndex !== undefined) {\n                let itemIndex = 0;\n                for (\n                    let rowIndex = startIndex;\n                    rowIndex < startIndex + items.length;\n                    rowIndex += 1\n                ) {\n                    itemData[rowIndex] = items[itemIndex];\n                    itemIndex += 1;\n                }\n            }\n        }\n\n        return itemData;\n    }, [filter, queryClient, server?.id]);\n\n    const fetch = useCallback(\n        async ({ skip: startIndex, take: limit }: { skip: number; take: number }) => {\n            const query: ArtistListQuery = {\n                ...filter,\n                limit,\n                startIndex,\n            };\n\n            const queryKey = queryKeys.artists.list(server?.id || '', query);\n\n            const artistsRes = await queryClient.fetchQuery(\n                queryKey,\n                async ({ signal }) =>\n                    api.controller.getArtistList({\n                        apiClientProps: {\n                            server,\n                            signal,\n                        },\n                        query,\n                    }),\n                { cacheTime: 1000 * 60 * 1 },\n            );\n\n            return artistsRes;\n        },\n        [filter, queryClient, server],\n    );\n\n    const handleGridScroll = useCallback(\n        (e: ListOnScrollProps) => {\n            setGrid({ data: { scrollOffset: e.scrollOffset }, key: pageKey });\n        },\n        [pageKey, setGrid],\n    );\n\n    const cardRows = useMemo(() => {\n        const rows: CardRow<AlbumArtist>[] = [ALBUMARTIST_CARD_ROWS.name];\n\n        switch (filter.sortBy) {\n            case ArtistListSort.ALBUM_COUNT:\n                rows.push(ALBUMARTIST_CARD_ROWS.albumCount);\n                break;\n            case ArtistListSort.DURATION:\n                rows.push(ALBUMARTIST_CARD_ROWS.duration);\n                break;\n            case ArtistListSort.FAVORITED:\n                break;\n            case ArtistListSort.NAME:\n                break;\n            case ArtistListSort.PLAY_COUNT:\n                rows.push(ALBUMARTIST_CARD_ROWS.playCount);\n                break;\n            case ArtistListSort.RANDOM:\n                break;\n            case ArtistListSort.RATING:\n                rows.push(ALBUMARTIST_CARD_ROWS.rating);\n                break;\n            case ArtistListSort.RECENTLY_ADDED:\n                break;\n            case ArtistListSort.RELEASE_DATE:\n                break;\n            case ArtistListSort.SONG_COUNT:\n                rows.push(ALBUMARTIST_CARD_ROWS.songCount);\n                break;\n        }\n\n        return rows;\n    }, [filter.sortBy]);\n\n    return (\n        <VirtualGridAutoSizerContainer>\n            <AutoSizer>\n                {({ height, width }: Size) => (\n                    <VirtualInfiniteGrid\n                        cardRows={cardRows}\n                        display={display || ListDisplayType.CARD}\n                        fetchFn={fetch}\n                        fetchInitialData={fetchInitialData}\n                        handleFavorite={handleFavorite}\n                        handlePlayQueueAdd={handlePlayQueueAdd}\n                        height={height}\n                        initialScrollOffset={grid?.scrollOffset || 0}\n                        itemCount={itemCount || 0}\n                        itemGap={grid?.itemGap ?? 10}\n                        itemSize={grid?.itemSize || 200}\n                        itemType={LibraryItem.ARTIST}\n                        loading={itemCount === undefined || itemCount === null}\n                        minimumBatchSize={40}\n                        onScroll={handleGridScroll}\n                        ref={gridRef}\n                        route={{\n                            route: AppRoute.LIBRARY_ARTISTS_DETAIL,\n                            slugs: [{ idProperty: 'id', slugProperty: 'artistId' }],\n                        }}\n                        width={width}\n                    />\n                )}\n            </AutoSizer>\n        </VirtualGridAutoSizerContainer>\n    );\n};\n"],"names":["ArtistListGridView","gridRef","itemCount","queryClient","useQueryClient","server","useCurrentServer","handlePlayQueueAdd","usePlayQueueAdd","pageKey","useListContext","display","filter","grid","useListStoreByKey","setGrid","useListStoreActions","handleFavorite","useHandleFavorite","fetchInitialData","useCallback","query","queriesFromCache","queryKeys","itemData","data","items","startIndex","itemIndex","rowIndex","fetch","limit","queryKey","signal","api","handleGridScroll","e","cardRows","useMemo","rows","ALBUMARTIST_CARD_ROWS","ArtistListSort","jsx","VirtualGridAutoSizerContainer","AutoSizer","height","width","VirtualInfiniteGrid","ListDisplayType","LibraryItem","AppRoute"],"mappings":"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"}