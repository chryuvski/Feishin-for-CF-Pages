{"version":3,"mappings":"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","names":["AlbumArtistListGridView","lazy","__vitePreload","module","AlbumArtistListTableView","AlbumArtistListContent","gridRef","itemCount","tableRef","pageKey","useListContext","display","useListStoreByKey","isGrid","ListDisplayType","jsx","Suspense","Spinner","FILTERS","SortOrder","i18n","AlbumArtistListSort","AlbumArtistListHeaderFilters","t","useTranslation","queryClient","useQueryClient","server","useCurrentServer","filter","grid","table","setDisplayType","setFilter","setGrid","setTable","setTablePagination","useListStoreActions","cq","useContainerQuery","musicFoldersQuery","useMusicFolders","sortByLabel","_a","f","handleItemSize","e","handleItemGap","debouncedHandleItemSize","debounce","fetch","useCallback","startIndex","limit","filters","queryKey","queryKeys","signal","api","handleFilterChange","dataSource","params","albumArtistsRes","_b","_c","_d","_e","data","_f","handleSetSortBy","sortOrder","updatedFilters","LibraryItem","handleSetMusicFolder","handleToggleSortOrder","newSortOrder","handleSetViewType","handleTableColumns","values","existingColumns","newColumn","removed","column","newColumns","handleAutoFitColumns","handleRefresh","jsxs","Flex","Group","DropdownMenu","Button","Divider","OrderToggleButton","ServerType","Fragment","RiFolder2Line","folder","RiRefreshLine","RiMoreFill","RiSettings3Fill","Slider","Stack","MultiSelect","ALBUMARTIST_TABLE_COLUMNS","Text","Switch","AlbumArtistListHeader","refresh","search","useDisplayRefresh","handleSearch","PageHeader","LibraryHeaderBar","SearchInput","FilterBar","useAlbumArtistListCount","args","options","query","serverId","getServerById","useQuery","AlbumArtistListRoute","useRef","albumArtistListFilter","useListFilterByKey","itemCountCheck","providerValue","useMemo","AnimatedPage","ListContext"],"ignoreList":[],"sources":["../../../src/renderer/features/artists/components/album-artist-list-content.tsx","../../../src/renderer/features/artists/components/album-artist-list-header-filters.tsx","../../../src/renderer/features/artists/components/album-artist-list-header.tsx","../../../src/renderer/features/artists/queries/album-artist-list-count-query.ts","../../../src/renderer/features/artists/routes/album-artist-list-route.tsx"],"sourcesContent":["import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { lazy, MutableRefObject, Suspense } from 'react';\n\nimport { Spinner } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { useListStoreByKey } from '/@/renderer/store';\nimport { ListDisplayType } from '/@/shared/types/types';\n\nconst AlbumArtistListGridView = lazy(() =>\n    import('/@/renderer/features/artists/components/album-artist-list-grid-view').then(\n        (module) => ({\n            default: module.AlbumArtistListGridView,\n        }),\n    ),\n);\n\nconst AlbumArtistListTableView = lazy(() =>\n    import('/@/renderer/features/artists/components/album-artist-list-table-view').then(\n        (module) => ({\n            default: module.AlbumArtistListTableView,\n        }),\n    ),\n);\n\ninterface AlbumArtistListContentProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const AlbumArtistListContent = ({\n    gridRef,\n    itemCount,\n    tableRef,\n}: AlbumArtistListContentProps) => {\n    const { pageKey } = useListContext();\n    const { display } = useListStoreByKey({ key: pageKey });\n    const isGrid = display === ListDisplayType.CARD || display === ListDisplayType.POSTER;\n\n    return (\n        <Suspense fallback={<Spinner container />}>\n            {isGrid ? (\n                <AlbumArtistListGridView\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                />\n            ) : (\n                <AlbumArtistListTableView\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            )}\n        </Suspense>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { IDatasource } from '@ag-grid-community/core';\nimport { Divider, Flex, Group, Stack } from '@mantine/core';\nimport { useQueryClient } from '@tanstack/react-query';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, MouseEvent, MutableRefObject, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { RiFolder2Line, RiMoreFill, RiRefreshLine, RiSettings3Fill } from 'react-icons/ri';\n\nimport i18n from '/@/i18n/i18n';\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { Button, DropdownMenu, MultiSelect, Slider, Switch, Text } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { ALBUMARTIST_TABLE_COLUMNS } from '/@/renderer/components/virtual-table';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { OrderToggleButton, useMusicFolders } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport {\n    AlbumArtistListFilter,\n    useCurrentServer,\n    useListStoreActions,\n    useListStoreByKey,\n} from '/@/renderer/store';\nimport {\n    AlbumArtistListQuery,\n    AlbumArtistListSort,\n    LibraryItem,\n    ServerType,\n    SortOrder,\n} from '/@/shared/types/domain-types';\nimport { ListDisplayType, TableColumn } from '/@/shared/types/types';\n\nconst FILTERS = {\n    jellyfin: [\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.album', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.ALBUM,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.duration', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.DURATION,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.random', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.RANDOM,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.recentlyAdded', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.RECENTLY_ADDED,\n        },\n        // { defaultOrder: SortOrder.DESC, name: 'Release Date', value: AlbumArtistListSort.RELEASE_DATE },\n    ],\n    navidrome: [\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.albumCount', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.ALBUM_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.isFavorited', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.FAVORITED,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.mostPlayed', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.PLAY_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.rating', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.RATING,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.songCount', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.SONG_COUNT,\n        },\n    ],\n    subsonic: [\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.albumCount', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.ALBUM_COUNT,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.isFavorited', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.FAVORITED,\n        },\n        {\n            defaultOrder: SortOrder.ASC,\n            name: i18n.t('filter.name', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.NAME,\n        },\n        {\n            defaultOrder: SortOrder.DESC,\n            name: i18n.t('filter.rating', { postProcess: 'titleCase' }),\n            value: AlbumArtistListSort.RATING,\n        },\n    ],\n};\n\ninterface AlbumArtistListHeaderFiltersProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const AlbumArtistListHeaderFilters = ({\n    gridRef,\n    tableRef,\n}: AlbumArtistListHeaderFiltersProps) => {\n    const { t } = useTranslation();\n    const queryClient = useQueryClient();\n    const server = useCurrentServer();\n    const { pageKey } = useListContext();\n    const { display, filter, grid, table } = useListStoreByKey<AlbumArtistListQuery>({\n        key: pageKey,\n    });\n    const { setDisplayType, setFilter, setGrid, setTable, setTablePagination } =\n        useListStoreActions();\n    const cq = useContainerQuery();\n\n    const isGrid = display === ListDisplayType.CARD || display === ListDisplayType.POSTER;\n    const musicFoldersQuery = useMusicFolders({ query: null, serverId: server?.id });\n\n    const sortByLabel =\n        (server?.type &&\n            FILTERS[server.type as keyof typeof FILTERS].find((f) => f.value === filter.sortBy)\n                ?.name) ||\n        t('common.unknown', { postProcess: 'titleCase' });\n\n    const handleItemSize = (e: number) => {\n        if (display === ListDisplayType.TABLE || display === ListDisplayType.TABLE_PAGINATED) {\n            setTable({ data: { rowHeight: e }, key: pageKey });\n        } else {\n            setGrid({ data: { itemSize: e }, key: pageKey });\n        }\n    };\n\n    const handleItemGap = (e: number) => {\n        setGrid({ data: { itemGap: e }, key: pageKey });\n    };\n\n    const debouncedHandleItemSize = debounce(handleItemSize, 20);\n\n    const fetch = useCallback(\n        async (startIndex: number, limit: number, filters: AlbumArtistListFilter) => {\n            const queryKey = queryKeys.albumArtists.list(server?.id || '', {\n                limit,\n                startIndex,\n                ...filters,\n            });\n\n            const albums = await queryClient.fetchQuery(\n                queryKey,\n                async ({ signal }) =>\n                    api.controller.getAlbumArtistList({\n                        apiClientProps: {\n                            server,\n                            signal,\n                        },\n                        query: {\n                            limit,\n                            startIndex,\n                            ...filters,\n                        },\n                    }),\n                { cacheTime: 1000 * 60 * 1 },\n            );\n\n            return albums;\n        },\n        [queryClient, server],\n    );\n\n    const handleFilterChange = useCallback(\n        async (filters: AlbumArtistListFilter) => {\n            if (display === ListDisplayType.TABLE || display === ListDisplayType.TABLE_PAGINATED) {\n                const dataSource: IDatasource = {\n                    getRows: async (params) => {\n                        const limit = params.endRow - params.startRow;\n                        const startIndex = params.startRow;\n\n                        const queryKey = queryKeys.albumArtists.list(server?.id || '', {\n                            limit,\n                            startIndex,\n                            ...filters,\n                        });\n\n                        const albumArtistsRes = await queryClient.fetchQuery(\n                            queryKey,\n                            async ({ signal }) =>\n                                api.controller.getAlbumArtistList({\n                                    apiClientProps: {\n                                        server,\n                                        signal,\n                                    },\n                                    query: {\n                                        limit,\n                                        startIndex,\n                                        ...filters,\n                                    },\n                                }),\n                            { cacheTime: 1000 * 60 * 1 },\n                        );\n\n                        params.successCallback(\n                            albumArtistsRes?.items || [],\n                            albumArtistsRes?.totalRecordCount || 0,\n                        );\n                    },\n                    rowCount: undefined,\n                };\n                tableRef.current?.api.setDatasource(dataSource);\n                tableRef.current?.api.purgeInfiniteCache();\n                tableRef.current?.api.ensureIndexVisible(0, 'top');\n\n                if (display === ListDisplayType.TABLE_PAGINATED) {\n                    setTablePagination({ data: { currentPage: 0 }, key: pageKey });\n                }\n            } else {\n                gridRef.current?.scrollTo(0);\n                gridRef.current?.resetLoadMoreItemsCache();\n\n                // Refetching within the virtualized grid may be inconsistent due to it refetching\n                // using an outdated set of filters. To avoid this, we fetch using the updated filters\n                // and then set the grid's data here.\n                const data = await fetch(0, 200, filters);\n\n                if (!data?.items) return;\n                gridRef.current?.setItemData(data.items);\n            }\n        },\n        [display, tableRef, server, queryClient, setTablePagination, pageKey, gridRef, fetch],\n    );\n\n    const handleSetSortBy = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value || !server?.type) return;\n\n            const sortOrder = FILTERS[server.type as keyof typeof FILTERS].find(\n                (f) => f.value === e.currentTarget.value,\n            )?.defaultOrder;\n\n            const updatedFilters = setFilter({\n                data: {\n                    sortBy: e.currentTarget.value as AlbumArtistListSort,\n                    sortOrder: sortOrder || SortOrder.ASC,\n                },\n                itemType: LibraryItem.ALBUM_ARTIST,\n                key: pageKey,\n            }) as AlbumArtistListFilter;\n\n            handleFilterChange(updatedFilters);\n        },\n        [handleFilterChange, pageKey, server?.type, setFilter],\n    );\n\n    const handleSetMusicFolder = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value) return;\n\n            let updatedFilters: AlbumArtistListFilter | null = null;\n            if (e.currentTarget.value === String(filter.musicFolderId)) {\n                updatedFilters = setFilter({\n                    data: { musicFolderId: undefined },\n                    itemType: LibraryItem.ALBUM_ARTIST,\n                    key: pageKey,\n                }) as AlbumArtistListFilter;\n            } else {\n                updatedFilters = setFilter({\n                    data: { musicFolderId: e.currentTarget.value },\n                    itemType: LibraryItem.ALBUM_ARTIST,\n                    key: pageKey,\n                }) as AlbumArtistListFilter;\n            }\n\n            handleFilterChange(updatedFilters);\n        },\n        [filter.musicFolderId, handleFilterChange, setFilter, pageKey],\n    );\n\n    const handleToggleSortOrder = useCallback(() => {\n        const newSortOrder = filter.sortOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n        const updatedFilters = setFilter({\n            data: { sortOrder: newSortOrder },\n            itemType: LibraryItem.ALBUM_ARTIST,\n            key: pageKey,\n        }) as AlbumArtistListFilter;\n        handleFilterChange(updatedFilters);\n    }, [filter.sortOrder, handleFilterChange, pageKey, setFilter]);\n\n    const handleSetViewType = useCallback(\n        (e: MouseEvent<HTMLButtonElement>) => {\n            if (!e.currentTarget?.value) return;\n\n            setDisplayType({ data: e.currentTarget.value as ListDisplayType, key: pageKey });\n        },\n        [pageKey, setDisplayType],\n    );\n\n    const handleTableColumns = (values: TableColumn[]) => {\n        const existingColumns = table.columns;\n\n        if (values.length === 0) {\n            return setTable({\n                data: {\n                    columns: [],\n                },\n                key: pageKey,\n            });\n        }\n\n        // If adding a column\n        if (values.length > existingColumns.length) {\n            const newColumn = { column: values[values.length - 1], width: 100 };\n\n            setTable({ data: { columns: [...existingColumns, newColumn] }, key: pageKey });\n        } else {\n            // If removing a column\n            const removed = existingColumns.filter((column) => !values.includes(column.column));\n            const newColumns = existingColumns.filter((column) => !removed.includes(column));\n\n            setTable({ data: { columns: newColumns }, key: pageKey });\n        }\n\n        return tableRef.current?.api.sizeColumnsToFit();\n    };\n\n    const handleAutoFitColumns = (e: ChangeEvent<HTMLInputElement>) => {\n        setTable({ data: { autoFit: e.currentTarget.checked }, key: pageKey });\n\n        if (e.currentTarget.checked) {\n            tableRef.current?.api.sizeColumnsToFit();\n        }\n    };\n\n    const handleRefresh = useCallback(() => {\n        queryClient.invalidateQueries(queryKeys.albumArtists.list(server?.id || ''));\n        handleFilterChange(filter);\n    }, [filter, handleFilterChange, queryClient, server?.id]);\n\n    return (\n        <Flex justify=\"space-between\">\n            <Group\n                ref={cq.ref}\n                spacing=\"sm\"\n                w=\"100%\"\n            >\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            fw=\"600\"\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            {sortByLabel}\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        {FILTERS[server?.type as keyof typeof FILTERS].map((f) => (\n                            <DropdownMenu.Item\n                                $isActive={f.value === filter.sortBy}\n                                key={`filter-${f.name}`}\n                                onClick={handleSetSortBy}\n                                value={f.value}\n                            >\n                                {f.name}\n                            </DropdownMenu.Item>\n                        ))}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n                <Divider orientation=\"vertical\" />\n                <OrderToggleButton\n                    onToggle={handleToggleSortOrder}\n                    sortOrder={filter.sortOrder}\n                />\n                {server?.type === ServerType.JELLYFIN && (\n                    <>\n                        <Divider orientation=\"vertical\" />\n                        <DropdownMenu position=\"bottom-start\">\n                            <DropdownMenu.Target>\n                                <Button\n                                    compact\n                                    fw=\"600\"\n                                    size=\"md\"\n                                    variant=\"subtle\"\n                                >\n                                    {cq.isMd ? 'Folder' : <RiFolder2Line size={15} />}\n                                </Button>\n                            </DropdownMenu.Target>\n                            <DropdownMenu.Dropdown>\n                                {musicFoldersQuery.data?.items.map((folder) => (\n                                    <DropdownMenu.Item\n                                        $isActive={filter.musicFolderId === folder.id}\n                                        key={`musicFolder-${folder.id}`}\n                                        onClick={handleSetMusicFolder}\n                                        value={folder.id}\n                                    >\n                                        {folder.name}\n                                    </DropdownMenu.Item>\n                                ))}\n                            </DropdownMenu.Dropdown>\n                        </DropdownMenu>\n                    </>\n                )}\n                <Divider orientation=\"vertical\" />\n                <Button\n                    compact\n                    onClick={handleRefresh}\n                    size=\"md\"\n                    tooltip={{ label: t('common.refresh', { postProcess: 'titleCase' }) }}\n                    variant=\"subtle\"\n                >\n                    <RiRefreshLine size=\"1.3rem\" />\n                </Button>\n                <Divider orientation=\"vertical\" />\n                <DropdownMenu position=\"bottom-start\">\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            <RiMoreFill size={15} />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Item\n                            icon={<RiRefreshLine />}\n                            onClick={handleRefresh}\n                        >\n                            {t('common.refresh', {\n                                postProcess: 'titleCase',\n                            })}\n                        </DropdownMenu.Item>\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </Group>\n            <Group>\n                <DropdownMenu\n                    position=\"bottom-end\"\n                    width={425}\n                >\n                    <DropdownMenu.Target>\n                        <Button\n                            compact\n                            size=\"md\"\n                            variant=\"subtle\"\n                        >\n                            <RiSettings3Fill size=\"1.3rem\" />\n                        </Button>\n                    </DropdownMenu.Target>\n                    <DropdownMenu.Dropdown>\n                        <DropdownMenu.Label>\n                            {t('table.config.general.displayType', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.CARD}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.CARD}\n                        >\n                            {t('table.config.view.card', {\n                                postProcess: 'sentenceCase',\n                            })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.POSTER}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.POSTER}\n                        >\n                            {t('table.config.view.poster', {\n                                postProcess: 'sentenceCase',\n                            })}\n                        </DropdownMenu.Item>\n                        <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.TABLE}\n                            onClick={handleSetViewType}\n                            value={ListDisplayType.TABLE}\n                        >\n                            {t('table.config.view.table', {\n                                postProcess: 'sentenceCase',\n                            })}\n                        </DropdownMenu.Item>\n                        {/* <DropdownMenu.Item\n                            $isActive={display === ListDisplayType.TABLE_PAGINATED}\n                            value={ListDisplayType.TABLE_PAGINATED}\n                            onClick={handleSetViewType}\n                        >\n                            Table (paginated)\n                        </DropdownMenu.Item> */}\n                        <DropdownMenu.Divider />\n                        <DropdownMenu.Label>\n                            {t('table.config.general.itemSize', { postProcess: 'sentenceCase' })}\n                        </DropdownMenu.Label>\n                        <DropdownMenu.Item closeMenuOnClick={false}>\n                            {display === ListDisplayType.CARD ||\n                            display === ListDisplayType.POSTER ? (\n                                <Slider\n                                    defaultValue={grid?.itemSize}\n                                    max={300}\n                                    min={150}\n                                    onChange={debouncedHandleItemSize}\n                                />\n                            ) : (\n                                <Slider\n                                    defaultValue={table.rowHeight}\n                                    max={100}\n                                    min={30}\n                                    onChange={debouncedHandleItemSize}\n                                />\n                            )}\n                        </DropdownMenu.Item>\n                        {isGrid && (\n                            <>\n                                <DropdownMenu.Label>\n                                    {t('table.config.general.itemGap', {\n                                        postProcess: 'sentenceCase',\n                                    })}\n                                </DropdownMenu.Label>\n                                <DropdownMenu.Item closeMenuOnClick={false}>\n                                    <Slider\n                                        defaultValue={grid?.itemGap || 0}\n                                        max={30}\n                                        min={0}\n                                        onChangeEnd={handleItemGap}\n                                    />\n                                </DropdownMenu.Item>\n                            </>\n                        )}\n                        {!isGrid && (\n                            <>\n                                <DropdownMenu.Label>\n                                    {t('table.config.general.tableColumns', {\n                                        postProcess: 'sentenceCase',\n                                    })}\n                                </DropdownMenu.Label>\n                                <DropdownMenu.Item\n                                    closeMenuOnClick={false}\n                                    component=\"div\"\n                                    sx={{ cursor: 'default' }}\n                                >\n                                    <Stack>\n                                        <MultiSelect\n                                            clearable\n                                            data={ALBUMARTIST_TABLE_COLUMNS}\n                                            defaultValue={table?.columns.map(\n                                                (column) => column.column,\n                                            )}\n                                            onChange={handleTableColumns}\n                                            width={300}\n                                        />\n                                        <Group position=\"apart\">\n                                            <Text>\n                                                {t('table.config.general.autoFitColumns', {\n                                                    postProcess: 'sentenceCase',\n                                                })}\n                                            </Text>\n                                            <Switch\n                                                defaultChecked={table.autoFit}\n                                                onChange={handleAutoFitColumns}\n                                            />\n                                        </Group>\n                                    </Stack>\n                                </DropdownMenu.Item>\n                            </>\n                        )}\n                    </DropdownMenu.Dropdown>\n                </DropdownMenu>\n            </Group>\n        </Flex>\n    );\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\nimport type { ChangeEvent, MutableRefObject } from 'react';\n\nimport { Flex, Group, Stack } from '@mantine/core';\nimport debounce from 'lodash/debounce';\nimport { useTranslation } from 'react-i18next';\n\nimport { PageHeader, SearchInput } from '/@/renderer/components';\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { AlbumArtistListHeaderFilters } from '/@/renderer/features/artists/components/album-artist-list-header-filters';\nimport { FilterBar, LibraryHeaderBar } from '/@/renderer/features/shared';\nimport { useContainerQuery } from '/@/renderer/hooks';\nimport { useDisplayRefresh } from '/@/renderer/hooks/use-display-refresh';\nimport { AlbumArtistListFilter, useCurrentServer } from '/@/renderer/store';\nimport { AlbumArtistListQuery, LibraryItem } from '/@/shared/types/domain-types';\n\ninterface AlbumArtistListHeaderProps {\n    gridRef: MutableRefObject<null | VirtualInfiniteGridRef>;\n    itemCount?: number;\n    tableRef: MutableRefObject<AgGridReactType | null>;\n}\n\nexport const AlbumArtistListHeader = ({\n    gridRef,\n    itemCount,\n    tableRef,\n}: AlbumArtistListHeaderProps) => {\n    const { t } = useTranslation();\n    const server = useCurrentServer();\n    const cq = useContainerQuery();\n\n    const { filter, refresh, search } = useDisplayRefresh<AlbumArtistListQuery>({\n        gridRef,\n        itemCount,\n        itemType: LibraryItem.ALBUM_ARTIST,\n        server,\n        tableRef,\n    });\n\n    const handleSearch = debounce((e: ChangeEvent<HTMLInputElement>) => {\n        const updatedFilters = search(e) as AlbumArtistListFilter;\n        refresh(updatedFilters);\n    }, 500);\n\n    return (\n        <Stack\n            ref={cq.ref}\n            spacing={0}\n        >\n            <PageHeader backgroundColor=\"var(--titlebar-bg)\">\n                <Flex\n                    justify=\"space-between\"\n                    w=\"100%\"\n                >\n                    <LibraryHeaderBar>\n                        <LibraryHeaderBar.Title>\n                            {t('page.albumArtistList.title', { postProcess: 'titleCase' })}\n                        </LibraryHeaderBar.Title>\n                        <LibraryHeaderBar.Badge\n                            isLoading={itemCount === null || itemCount === undefined}\n                        >\n                            {itemCount}\n                        </LibraryHeaderBar.Badge>\n                    </LibraryHeaderBar>\n                    <Group>\n                        <SearchInput\n                            defaultValue={filter.searchTerm}\n                            onChange={handleSearch}\n                            openedWidth={cq.isMd ? 250 : cq.isSm ? 200 : 150}\n                        />\n                    </Group>\n                </Flex>\n            </PageHeader>\n            <FilterBar>\n                <AlbumArtistListHeaderFilters\n                    gridRef={gridRef}\n                    tableRef={tableRef}\n                />\n            </FilterBar>\n        </Stack>\n    );\n};\n","import { useQuery } from '@tanstack/react-query';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { QueryHookArgs } from '/@/renderer/lib/react-query';\nimport { getServerById } from '/@/renderer/store';\nimport { AlbumArtistListQuery } from '/@/shared/types/domain-types';\n\nexport const useAlbumArtistListCount = (args: QueryHookArgs<AlbumArtistListQuery>) => {\n    const { options, query, serverId } = args;\n    const server = getServerById(serverId);\n\n    return useQuery({\n        enabled: !!serverId,\n        queryFn: ({ signal }) => {\n            if (!server) throw new Error('Server not found');\n            return api.controller.getAlbumArtistListCount({\n                apiClientProps: {\n                    server,\n                    signal,\n                },\n                query,\n            });\n        },\n        queryKey: queryKeys.albumArtists.count(\n            serverId || '',\n            Object.keys(query).length === 0 ? undefined : query,\n        ),\n        ...options,\n    });\n};\n","import type { AgGridReact as AgGridReactType } from '@ag-grid-community/react/lib/agGridReact';\n\nimport { useMemo, useRef } from 'react';\n\nimport { VirtualInfiniteGridRef } from '/@/renderer/components/virtual-grid';\nimport { ListContext } from '/@/renderer/context/list-context';\nimport { AlbumArtistListContent } from '/@/renderer/features/artists/components/album-artist-list-content';\nimport { AlbumArtistListHeader } from '/@/renderer/features/artists/components/album-artist-list-header';\nimport { useAlbumArtistListCount } from '/@/renderer/features/artists/queries/album-artist-list-count-query';\nimport { AnimatedPage } from '/@/renderer/features/shared';\nimport { useCurrentServer } from '/@/renderer/store/auth.store';\nimport { useListFilterByKey } from '/@/renderer/store/list.store';\nimport { AlbumArtistListQuery, LibraryItem } from '/@/shared/types/domain-types';\n\nconst AlbumArtistListRoute = () => {\n    const gridRef = useRef<null | VirtualInfiniteGridRef>(null);\n    const tableRef = useRef<AgGridReactType | null>(null);\n    const pageKey = LibraryItem.ALBUM_ARTIST;\n    const server = useCurrentServer();\n\n    const albumArtistListFilter = useListFilterByKey<AlbumArtistListQuery>({ key: pageKey });\n\n    const itemCountCheck = useAlbumArtistListCount({\n        options: {\n            cacheTime: 1000 * 60,\n            staleTime: 1000 * 60,\n        },\n        query: albumArtistListFilter,\n        serverId: server?.id,\n    });\n\n    const itemCount = itemCountCheck.data === null ? undefined : itemCountCheck.data;\n\n    const providerValue = useMemo(() => {\n        return {\n            id: undefined,\n            pageKey,\n        };\n    }, [pageKey]);\n\n    return (\n        <AnimatedPage>\n            <ListContext.Provider value={providerValue}>\n                <AlbumArtistListHeader\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n                <AlbumArtistListContent\n                    gridRef={gridRef}\n                    itemCount={itemCount}\n                    tableRef={tableRef}\n                />\n            </ListContext.Provider>\n        </AnimatedPage>\n    );\n};\n\nexport default AlbumArtistListRoute;\n"],"file":"assets/album-artist-list-route-6iEcyTCB.js"}