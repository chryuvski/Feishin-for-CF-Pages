{"version":3,"file":"hotkeys-tab-BCBimGZI.js","sources":["../../../src/renderer/features/settings/components/hotkeys/hotkey-manager-settings.tsx","../../../src/renderer/features/settings/components/hotkeys/window-hotkey-settings.tsx","../../../src/renderer/features/settings/components/hotkeys/hotkeys-tab.tsx"],"sourcesContent":["import { Group } from '@mantine/core';\nimport isElectron from 'is-electron';\nimport debounce from 'lodash/debounce';\nimport { ChangeEvent, KeyboardEvent, useCallback, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { RiDeleteBinLine, RiEditLine, RiKeyboardBoxLine } from 'react-icons/ri';\nimport styled from 'styled-components';\n\nimport i18n from '/@/i18n/i18n';\nimport { Button, Checkbox, TextInput } from '/@/renderer/components';\nimport { SettingsOptions } from '/@/renderer/features/settings/components/settings-option';\nimport { useSettingSearchContext } from '/@/renderer/features/settings/context/search-context';\nimport { BindingActions, useHotkeySettings, useSettingsStoreActions } from '/@/renderer/store';\n\nconst ipc = isElectron() ? window.api.ipc : null;\n\nconst BINDINGS_MAP: Record<BindingActions, string> = {\n    browserBack: i18n.t('setting.hotkey', { context: 'browserBack', postProcess: 'sentenceCase' }),\n    browserForward: i18n.t('setting.hotkey', {\n        context: 'browserForward',\n        postProcess: 'sentenceCase',\n    }),\n    favoriteCurrentAdd: i18n.t('setting.hotkey', {\n        context: 'favoriteCurrentSong',\n        postProcess: 'sentenceCase',\n    }),\n    favoriteCurrentRemove: i18n.t('setting.hotkey', {\n        context: 'unfavoriteCurrentSong',\n        postProcess: 'sentenceCase',\n    }),\n    favoriteCurrentToggle: i18n.t('setting.hotkey', {\n        context: 'toggleCurrentSongFavorite',\n        postProcess: 'sentenceCase',\n    }),\n    favoritePreviousAdd: i18n.t('setting.hotkey', {\n        context: 'favoritePreviousSong',\n        postProcess: 'sentenceCase',\n    }),\n    favoritePreviousRemove: i18n.t('setting.hotkey', {\n        context: 'unfavoritePreviousSong',\n        postProcess: 'sentenceCase',\n    }),\n    favoritePreviousToggle: i18n.t('setting.hotkey', {\n        context: 'togglePreviousSongFavorite',\n        postProcess: 'sentenceCase',\n    }),\n    globalSearch: i18n.t('setting.hotkey', {\n        context: 'globalSearch',\n        postProcess: 'sentenceCase',\n    }),\n    localSearch: i18n.t('setting.hotkey', { context: 'localSearch', postProcess: 'sentenceCase' }),\n    next: i18n.t('setting.hotkey', { context: 'playbackNext', postProcess: 'sentenceCase' }),\n    pause: i18n.t('setting.hotkey', { context: 'playbackPause', postProcess: 'sentenceCase' }),\n    play: i18n.t('setting.hotkey', { context: 'playbackPlay', postProcess: 'sentenceCase' }),\n    playPause: i18n.t('setting.hotkey', {\n        context: 'playbackPlayPause',\n        postProcess: 'sentenceCase',\n    }),\n    previous: i18n.t('setting.hotkey', {\n        context: 'playbackPrevious',\n        postProcess: 'sentenceCase',\n    }),\n    rate0: i18n.t('setting.hotkey', { context: 'rate0', postProcess: 'sentenceCase' }),\n    rate1: i18n.t('setting.hotkey', { context: 'rate1', postProcess: 'sentenceCase' }),\n    rate2: i18n.t('setting.hotkey', { context: 'rate2', postProcess: 'sentenceCase' }),\n    rate3: i18n.t('setting.hotkey', { context: 'rate3', postProcess: 'sentenceCase' }),\n    rate4: i18n.t('setting.hotkey', { context: 'rate4', postProcess: 'sentenceCase' }),\n    rate5: i18n.t('setting.hotkey', { context: 'rate5', postProcess: 'sentenceCase' }),\n    skipBackward: i18n.t('setting.hotkey', {\n        context: 'skipBackward',\n        postProcess: 'sentenceCase',\n    }),\n    skipForward: i18n.t('setting.hotkey', { context: 'skipForward', postProcess: 'sentenceCase' }),\n    stop: i18n.t('setting.hotkey', { context: 'playbackStop', postProcess: 'sentenceCase' }),\n    toggleFullscreenPlayer: i18n.t('setting.hotkey', {\n        context: 'toggleFullScreenPlayer',\n        postProcess: 'sentenceCase',\n    }),\n    toggleQueue: i18n.t('setting.hotkey', { context: 'toggleQueue', postProcess: 'sentenceCase' }),\n    toggleRepeat: i18n.t('setting.hotkey', {\n        context: 'toggleRepeat',\n        postProcess: 'sentenceCase',\n    }),\n    toggleShuffle: i18n.t('setting.hotkey', {\n        context: 'toggleShuffle',\n        postProcess: 'sentenceCase',\n    }),\n    volumeDown: i18n.t('setting.hotkey', { context: 'volumeDown', postProcess: 'sentenceCase' }),\n    volumeMute: i18n.t('setting.hotkey', { context: 'volumeMute', postProcess: 'sentenceCase' }),\n    volumeUp: i18n.t('setting.hotkey', { context: 'volumeUp', postProcess: 'sentenceCase' }),\n    zoomIn: i18n.t('setting.hotkey', { context: 'zoomIn', postProcess: 'sentenceCase' }),\n    zoomOut: i18n.t('setting.hotkey', { context: 'zoomOut', postProcess: 'sentenceCase' }),\n};\n\nconst HotkeysContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n    justify-content: center;\n    width: 100%;\n\n    button {\n        padding: 0 1rem;\n    }\n`;\n\nexport const HotkeyManagerSettings = () => {\n    const { t } = useTranslation();\n    const { bindings, globalMediaHotkeys } = useHotkeySettings();\n    const { setSettings } = useSettingsStoreActions();\n    const [selected, setSelected] = useState<BindingActions | null>(null);\n    const keyword = useSettingSearchContext();\n\n    const debouncedSetHotkey = debounce(\n        (binding: BindingActions, e: KeyboardEvent<HTMLInputElement>) => {\n            e.preventDefault();\n            const IGNORED_KEYS = ['Control', 'Alt', 'Shift', 'Meta', ' ', 'Escape'];\n            const keys: string[] = [];\n            if (e.ctrlKey) keys.push('mod');\n            if (e.altKey) keys.push('alt');\n            if (e.shiftKey) keys.push('shift');\n            if (e.metaKey) keys.push('meta');\n            if (e.key === ' ') keys.push('space');\n            if (!IGNORED_KEYS.includes(e.key)) {\n                if (e.code.includes('Numpad')) {\n                    if (e.key === '+') keys.push('numpadadd');\n                    else if (e.key === '-') keys.push('numpadsubtract');\n                    else if (e.key === '*') keys.push('numpadmultiply');\n                    else if (e.key === '/') keys.push('numpaddivide');\n                    else if (e.key === '.') keys.push('numpaddecimal');\n                    else keys.push(`numpad${e.key}`.toLowerCase());\n                } else if (e.key === '+') {\n                    keys.push('equal');\n                } else {\n                    keys.push(e.key?.toLowerCase());\n                }\n            }\n\n            const bindingString = keys.join('+');\n\n            const updatedBindings = {\n                ...bindings,\n                [binding]: { ...bindings[binding], hotkey: bindingString },\n            };\n\n            setSettings({\n                hotkeys: {\n                    bindings: updatedBindings,\n                    globalMediaHotkeys,\n                },\n            });\n\n            ipc?.send('set-global-shortcuts', updatedBindings);\n        },\n        20,\n    );\n\n    const handleSetHotkey = useCallback(debouncedSetHotkey, [\n        bindings,\n        globalMediaHotkeys,\n        setSettings,\n        debouncedSetHotkey,\n    ]);\n\n    const handleSetGlobalHotkey = useCallback(\n        (binding: BindingActions, e: ChangeEvent<HTMLInputElement>) => {\n            const updatedBindings = {\n                ...bindings,\n                [binding]: { ...bindings[binding], isGlobal: e.currentTarget.checked },\n            };\n\n            setSettings({\n                hotkeys: {\n                    bindings: updatedBindings,\n                    globalMediaHotkeys,\n                },\n            });\n\n            ipc?.send('set-global-shortcuts', updatedBindings);\n        },\n        [bindings, globalMediaHotkeys, setSettings],\n    );\n\n    const handleClearHotkey = useCallback(\n        (binding: BindingActions) => {\n            const updatedBindings = {\n                ...bindings,\n                [binding]: { ...bindings[binding], hotkey: '', isGlobal: false },\n            };\n\n            setSettings({\n                hotkeys: {\n                    bindings: updatedBindings,\n                    globalMediaHotkeys,\n                },\n            });\n\n            ipc?.send('set-global-shortcuts', updatedBindings);\n        },\n        [bindings, globalMediaHotkeys, setSettings],\n    );\n\n    const duplicateHotkeyMap = useMemo(() => {\n        const countPerHotkey = Object.values(bindings).reduce(\n            (acc, key) => {\n                const hotkey = key.hotkey;\n                if (!hotkey) return acc;\n\n                if (acc[hotkey]) {\n                    acc[hotkey] += 1;\n                } else {\n                    acc[hotkey] = 1;\n                }\n\n                return acc;\n            },\n            {} as Record<string, number>,\n        );\n\n        const duplicateKeys = Object.keys(countPerHotkey).filter((key) => countPerHotkey[key] > 1);\n\n        return duplicateKeys;\n    }, [bindings]);\n\n    const filteredBindings = useMemo(() => {\n        const base = Object.keys(bindings);\n\n        if (keyword === '') {\n            return base.filter((binding) => BINDINGS_MAP[binding as keyof typeof BINDINGS_MAP]);\n        }\n\n        return base.filter((binding) => {\n            const item = BINDINGS_MAP[binding as keyof typeof BINDINGS_MAP];\n            if (!item) return false;\n\n            return item.toLocaleLowerCase().includes(keyword);\n        });\n    }, [bindings, keyword]);\n\n    return (\n        <>\n            <SettingsOptions\n                control={<></>}\n                description={t('setting.applicationHotkeys', {\n                    context: 'description',\n                    postProcess: 'sentenceCase',\n                })}\n                title={t('setting.applicationHotkeys', { postProcess: 'sentenceCase' })}\n            />\n            <HotkeysContainer>\n                {filteredBindings.map((binding) => (\n                    <Group\n                        key={`hotkey-${binding}`}\n                        noWrap\n                    >\n                        <TextInput\n                            readOnly\n                            style={{ userSelect: 'none' }}\n                            value={BINDINGS_MAP[binding as keyof typeof BINDINGS_MAP]}\n                        />\n                        <TextInput\n                            icon={<RiKeyboardBoxLine />}\n                            id={`hotkey-${binding}`}\n                            onBlur={() => setSelected(null)}\n                            onChange={() => {}}\n                            onKeyDownCapture={(e) => {\n                                if (selected !== (binding as BindingActions)) return;\n                                handleSetHotkey(binding as BindingActions, e);\n                            }}\n                            readOnly\n                            style={{\n                                opacity: selected === (binding as BindingActions) ? 0.8 : 1,\n                                outline: duplicateHotkeyMap.includes(\n                                    bindings[binding as keyof typeof BINDINGS_MAP].hotkey!,\n                                )\n                                    ? '1px dashed red'\n                                    : undefined,\n                            }}\n                            value={bindings[binding as keyof typeof BINDINGS_MAP].hotkey}\n                        />\n                        {isElectron() && (\n                            <Checkbox\n                                checked={bindings[binding as keyof typeof BINDINGS_MAP].isGlobal}\n                                disabled={\n                                    bindings[binding as keyof typeof BINDINGS_MAP].hotkey === ''\n                                }\n                                onChange={(e) =>\n                                    handleSetGlobalHotkey(binding as BindingActions, e)\n                                }\n                                size=\"xl\"\n                                style={{\n                                    opacity: bindings[binding as keyof typeof BINDINGS_MAP]\n                                        .allowGlobal\n                                        ? 1\n                                        : 0,\n                                }}\n                            />\n                        )}\n                        <Button\n                            onClick={() => {\n                                setSelected(binding as BindingActions);\n                                document.getElementById(`hotkey-${binding}`)?.focus();\n                            }}\n                            variant=\"default\"\n                            w={100}\n                        >\n                            <RiEditLine />\n                        </Button>\n                        <Button\n                            onClick={() => handleClearHotkey(binding as BindingActions)}\n                            variant=\"default\"\n                        >\n                            <RiDeleteBinLine />\n                        </Button>\n                    </Group>\n                ))}\n            </HotkeysContainer>\n        </>\n    );\n};\n","import isElectron from 'is-electron';\nimport { useTranslation } from 'react-i18next';\n\nimport { Switch } from '/@/renderer/components';\nimport {\n    SettingOption,\n    SettingsSection,\n} from '/@/renderer/features/settings/components/settings-section';\nimport { useHotkeySettings, useSettingsStoreActions } from '/@/renderer/store';\n\nconst localSettings = isElectron() ? window.api.localSettings : null;\n\nexport const WindowHotkeySettings = () => {\n    const { t } = useTranslation();\n    const settings = useHotkeySettings();\n    const { setSettings } = useSettingsStoreActions();\n\n    const options: SettingOption[] = [\n        {\n            control: (\n                <Switch\n                    defaultChecked={settings.globalMediaHotkeys}\n                    disabled={!isElectron()}\n                    onChange={(e) => {\n                        setSettings({\n                            hotkeys: {\n                                ...settings,\n                                globalMediaHotkeys: e.currentTarget.checked,\n                            },\n                        });\n                        localSettings!.set('global_media_hotkeys', e.currentTarget.checked);\n\n                        if (e.currentTarget.checked) {\n                            localSettings!.enableMediaKeys();\n                        } else {\n                            localSettings!.disableMediaKeys();\n                        }\n                    }}\n                />\n            ),\n            description: t('setting.globalMediaHotkeys', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.globalMediaHotkeys', { postProcess: 'sentenceCase' }),\n        },\n    ];\n\n    return <SettingsSection options={options} />;\n};\n","import { Stack } from '@mantine/core';\nimport isElectron from 'is-electron';\n\nimport { HotkeyManagerSettings } from '/@/renderer/features/settings/components/hotkeys/hotkey-manager-settings';\nimport { WindowHotkeySettings } from '/@/renderer/features/settings/components/hotkeys/window-hotkey-settings';\n\nexport const HotkeysTab = () => {\n    return (\n        <Stack spacing=\"md\">\n            {isElectron() && <WindowHotkeySettings />}\n            <HotkeyManagerSettings />\n        </Stack>\n    );\n};\n"],"names":["ipc","isElectron","BINDINGS_MAP","i18n","HotkeysContainer","styled","HotkeyManagerSettings","t","useTranslation","bindings","globalMediaHotkeys","useHotkeySettings","setSettings","useSettingsStoreActions","selected","setSelected","useState","keyword","useSettingSearchContext","debouncedSetHotkey","debounce","binding","IGNORED_KEYS","keys","_a","bindingString","updatedBindings","handleSetHotkey","useCallback","handleSetGlobalHotkey","handleClearHotkey","duplicateHotkeyMap","useMemo","countPerHotkey","acc","key","hotkey","filteredBindings","base","item","jsxs","Fragment","jsx","SettingsOptions","Group","TextInput","RiKeyboardBoxLine","Checkbox","Button","RiEditLine","RiDeleteBinLine","localSettings","WindowHotkeySettings","settings","options","Switch","e","SettingsSection","HotkeysTab","Stack"],"mappings":"gMAcA,MAAMA,EAAMC,EAAe,EAAA,OAAO,IAAI,IAAM,KAEtCC,EAA+C,CACjD,YAAaC,EAAK,EAAE,iBAAkB,CAAE,QAAS,cAAe,YAAa,eAAgB,EAC7F,eAAgBA,EAAK,EAAE,iBAAkB,CACrC,QAAS,iBACT,YAAa,cAAA,CAChB,EACD,mBAAoBA,EAAK,EAAE,iBAAkB,CACzC,QAAS,sBACT,YAAa,cAAA,CAChB,EACD,sBAAuBA,EAAK,EAAE,iBAAkB,CAC5C,QAAS,wBACT,YAAa,cAAA,CAChB,EACD,sBAAuBA,EAAK,EAAE,iBAAkB,CAC5C,QAAS,4BACT,YAAa,cAAA,CAChB,EACD,oBAAqBA,EAAK,EAAE,iBAAkB,CAC1C,QAAS,uBACT,YAAa,cAAA,CAChB,EACD,uBAAwBA,EAAK,EAAE,iBAAkB,CAC7C,QAAS,yBACT,YAAa,cAAA,CAChB,EACD,uBAAwBA,EAAK,EAAE,iBAAkB,CAC7C,QAAS,6BACT,YAAa,cAAA,CAChB,EACD,aAAcA,EAAK,EAAE,iBAAkB,CACnC,QAAS,eACT,YAAa,cAAA,CAChB,EACD,YAAaA,EAAK,EAAE,iBAAkB,CAAE,QAAS,cAAe,YAAa,eAAgB,EAC7F,KAAMA,EAAK,EAAE,iBAAkB,CAAE,QAAS,eAAgB,YAAa,eAAgB,EACvF,MAAOA,EAAK,EAAE,iBAAkB,CAAE,QAAS,gBAAiB,YAAa,eAAgB,EACzF,KAAMA,EAAK,EAAE,iBAAkB,CAAE,QAAS,eAAgB,YAAa,eAAgB,EACvF,UAAWA,EAAK,EAAE,iBAAkB,CAChC,QAAS,oBACT,YAAa,cAAA,CAChB,EACD,SAAUA,EAAK,EAAE,iBAAkB,CAC/B,QAAS,mBACT,YAAa,cAAA,CAChB,EACD,MAAOA,EAAK,EAAE,iBAAkB,CAAE,QAAS,QAAS,YAAa,eAAgB,EACjF,MAAOA,EAAK,EAAE,iBAAkB,CAAE,QAAS,QAAS,YAAa,eAAgB,EACjF,MAAOA,EAAK,EAAE,iBAAkB,CAAE,QAAS,QAAS,YAAa,eAAgB,EACjF,MAAOA,EAAK,EAAE,iBAAkB,CAAE,QAAS,QAAS,YAAa,eAAgB,EACjF,MAAOA,EAAK,EAAE,iBAAkB,CAAE,QAAS,QAAS,YAAa,eAAgB,EACjF,MAAOA,EAAK,EAAE,iBAAkB,CAAE,QAAS,QAAS,YAAa,eAAgB,EACjF,aAAcA,EAAK,EAAE,iBAAkB,CACnC,QAAS,eACT,YAAa,cAAA,CAChB,EACD,YAAaA,EAAK,EAAE,iBAAkB,CAAE,QAAS,cAAe,YAAa,eAAgB,EAC7F,KAAMA,EAAK,EAAE,iBAAkB,CAAE,QAAS,eAAgB,YAAa,eAAgB,EACvF,uBAAwBA,EAAK,EAAE,iBAAkB,CAC7C,QAAS,yBACT,YAAa,cAAA,CAChB,EACD,YAAaA,EAAK,EAAE,iBAAkB,CAAE,QAAS,cAAe,YAAa,eAAgB,EAC7F,aAAcA,EAAK,EAAE,iBAAkB,CACnC,QAAS,eACT,YAAa,cAAA,CAChB,EACD,cAAeA,EAAK,EAAE,iBAAkB,CACpC,QAAS,gBACT,YAAa,cAAA,CAChB,EACD,WAAYA,EAAK,EAAE,iBAAkB,CAAE,QAAS,aAAc,YAAa,eAAgB,EAC3F,WAAYA,EAAK,EAAE,iBAAkB,CAAE,QAAS,aAAc,YAAa,eAAgB,EAC3F,SAAUA,EAAK,EAAE,iBAAkB,CAAE,QAAS,WAAY,YAAa,eAAgB,EACvF,OAAQA,EAAK,EAAE,iBAAkB,CAAE,QAAS,SAAU,YAAa,eAAgB,EACnF,QAASA,EAAK,EAAE,iBAAkB,CAAE,QAAS,UAAW,YAAa,cAAgB,CAAA,CACzF,EAEMC,EAAmBC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYnBC,EAAwB,IAAM,CACjC,KAAA,CAAE,EAAAC,CAAE,EAAIC,EAAe,EACvB,CAAE,SAAAC,EAAU,mBAAAC,CAAmB,EAAIC,EAAkB,EACrD,CAAE,YAAAC,CAAY,EAAIC,EAAwB,EAC1C,CAACC,EAAUC,CAAW,EAAIC,EAAAA,SAAgC,IAAI,EAC9DC,EAAUC,EAAwB,EAElCC,EAAqBC,EACvB,CAACC,EAAyB,IAAuC,OAC7D,EAAE,eAAe,EACjB,MAAMC,EAAe,CAAC,UAAW,MAAO,QAAS,OAAQ,IAAK,QAAQ,EAChEC,EAAiB,CAAC,EACpB,EAAE,SAAcA,EAAA,KAAK,KAAK,EAC1B,EAAE,QAAaA,EAAA,KAAK,KAAK,EACzB,EAAE,UAAeA,EAAA,KAAK,OAAO,EAC7B,EAAE,SAAcA,EAAA,KAAK,MAAM,EAC3B,EAAE,MAAQ,KAAKA,EAAK,KAAK,OAAO,EAC/BD,EAAa,SAAS,EAAE,GAAG,IACxB,EAAE,KAAK,SAAS,QAAQ,EACpB,EAAE,MAAQ,IAAKC,EAAK,KAAK,WAAW,EAC/B,EAAE,MAAQ,IAAKA,EAAK,KAAK,gBAAgB,EACzC,EAAE,MAAQ,IAAKA,EAAK,KAAK,gBAAgB,EACzC,EAAE,MAAQ,IAAKA,EAAK,KAAK,cAAc,EACvC,EAAE,MAAQ,IAAKA,EAAK,KAAK,eAAe,IACvC,KAAK,SAAS,EAAE,GAAG,GAAG,aAAa,EACtC,EAAE,MAAQ,IACjBA,EAAK,KAAK,OAAO,EAEjBA,EAAK,MAAKC,EAAA,EAAE,MAAF,YAAAA,EAAO,aAAa,GAIhC,MAAAC,EAAgBF,EAAK,KAAK,GAAG,EAE7BG,EAAkB,CACpB,GAAGjB,EACH,CAACY,CAAO,EAAG,CAAE,GAAGZ,EAASY,CAAO,EAAG,OAAQI,CAAc,CAC7D,EAEYb,EAAA,CACR,QAAS,CACL,SAAUc,EACV,mBAAAhB,CAAA,CACJ,CACH,EAEIV,GAAA,MAAAA,EAAA,KAAK,uBAAwB0B,EACtC,EACA,EACJ,EAEMC,EAAkBC,cAAYT,EAAoB,CACpDV,EACAC,EACAE,EACAO,CAAA,CACH,EAEKU,EAAwBD,EAAA,YAC1B,CAACP,EAAyB,IAAqC,CAC3D,MAAMK,EAAkB,CACpB,GAAGjB,EACH,CAACY,CAAO,EAAG,CAAE,GAAGZ,EAASY,CAAO,EAAG,SAAU,EAAE,cAAc,OAAQ,CACzE,EAEYT,EAAA,CACR,QAAS,CACL,SAAUc,EACV,mBAAAhB,CAAA,CACJ,CACH,EAEIV,GAAA,MAAAA,EAAA,KAAK,uBAAwB0B,EACtC,EACA,CAACjB,EAAUC,EAAoBE,CAAW,CAC9C,EAEMkB,EAAoBF,EAAA,YACrBP,GAA4B,CACzB,MAAMK,EAAkB,CACpB,GAAGjB,EACH,CAACY,CAAO,EAAG,CAAE,GAAGZ,EAASY,CAAO,EAAG,OAAQ,GAAI,SAAU,EAAM,CACnE,EAEYT,EAAA,CACR,QAAS,CACL,SAAUc,EACV,mBAAAhB,CAAA,CACJ,CACH,EAEIV,GAAA,MAAAA,EAAA,KAAK,uBAAwB0B,EACtC,EACA,CAACjB,EAAUC,EAAoBE,CAAW,CAC9C,EAEMmB,EAAqBC,EAAAA,QAAQ,IAAM,CACrC,MAAMC,EAAiB,OAAO,OAAOxB,CAAQ,EAAE,OAC3C,CAACyB,EAAKC,IAAQ,CACV,MAAMC,EAASD,EAAI,OACf,OAACC,IAEDF,EAAIE,CAAM,EACVF,EAAIE,CAAM,GAAK,EAEfF,EAAIE,CAAM,EAAI,GAGXF,CACX,EACA,CAAA,CACJ,EAIO,OAFe,OAAO,KAAKD,CAAc,EAAE,OAAQE,GAAQF,EAAeE,CAAG,EAAI,CAAC,CAElF,EACR,CAAC1B,CAAQ,CAAC,EAEP4B,EAAmBL,EAAAA,QAAQ,IAAM,CAC7B,MAAAM,EAAO,OAAO,KAAK7B,CAAQ,EAEjC,OAAIQ,IAAY,GACLqB,EAAK,OAAQjB,GAAYnB,EAAamB,CAAoC,CAAC,EAG/EiB,EAAK,OAAQjB,GAAY,CACtB,MAAAkB,EAAOrC,EAAamB,CAAoC,EAC1D,OAACkB,EAEEA,EAAK,oBAAoB,SAAStB,CAAO,EAF9B,EAE8B,CACnD,CAAA,EACF,CAACR,EAAUQ,CAAO,CAAC,EAEtB,OAEQuB,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,EAAA,IAACC,EAAA,CACG,QAAWD,EAAAA,IAAAD,EAAA,SAAA,EAAA,EACX,YAAalC,EAAE,6BAA8B,CACzC,QAAS,cACT,YAAa,cAAA,CAChB,EACD,MAAOA,EAAE,6BAA8B,CAAE,YAAa,cAAgB,CAAA,CAAA,CAC1E,EACCmC,EAAA,IAAAtC,EAAA,CACI,SAAiBiC,EAAA,IAAKhB,GACnBmB,EAAA,KAACI,EAAA,CAEG,OAAM,GAEN,SAAA,CAAAF,EAAA,IAACG,EAAA,CACG,SAAQ,GACR,MAAO,CAAE,WAAY,MAAO,EAC5B,MAAO3C,EAAamB,CAAoC,CAAA,CAC5D,EACAqB,EAAA,IAACG,EAAA,CACG,WAAOC,EAAkB,EAAA,EACzB,GAAI,UAAUzB,CAAO,GACrB,OAAQ,IAAMN,EAAY,IAAI,EAC9B,SAAU,IAAM,CAAC,EACjB,iBAAmB,GAAM,CACjBD,IAAcO,GAClBM,EAAgBN,EAA2B,CAAC,CAChD,EACA,SAAQ,GACR,MAAO,CACH,QAASP,IAAcO,EAA6B,GAAM,EAC1D,QAASU,EAAmB,SACxBtB,EAASY,CAAoC,EAAE,QAE7C,iBACA,MACV,EACA,MAAOZ,EAASY,CAAoC,EAAE,MAAA,CAC1D,EACCpB,EACG,GAAAyC,EAAA,IAACK,EAAA,CACG,QAAStC,EAASY,CAAoC,EAAE,SACxD,SACIZ,EAASY,CAAoC,EAAE,SAAW,GAE9D,SAAW,GACPQ,EAAsBR,EAA2B,CAAC,EAEtD,KAAK,KACL,MAAO,CACH,QAASZ,EAASY,CAAoC,EACjD,YACC,EACA,CAAA,CACV,CACJ,EAEJqB,EAAA,IAACM,EAAA,CACG,QAAS,IAAM,OACXjC,EAAYM,CAAyB,GACrCG,EAAA,SAAS,eAAe,UAAUH,CAAO,EAAE,IAA3C,MAAAG,EAA8C,OAClD,EACA,QAAQ,UACR,EAAG,IAEH,eAACyB,EAAW,CAAA,CAAA,CAAA,CAChB,EACAP,EAAA,IAACM,EAAA,CACG,QAAS,IAAMlB,EAAkBT,CAAyB,EAC1D,QAAQ,UAER,eAAC6B,EAAgB,CAAA,CAAA,CAAA,CAAA,CACrB,CAAA,EA7DK,UAAU7B,CAAO,EAAA,CA+D7B,CACL,CAAA,CAAA,EACJ,CAER,ECrTM8B,EAAgBlD,EAAe,EAAA,OAAO,IAAI,cAAgB,KAEnDmD,EAAuB,IAAM,CAChC,KAAA,CAAE,EAAA7C,CAAE,EAAIC,EAAe,EACvB6C,EAAW1C,EAAkB,EAC7B,CAAE,YAAAC,CAAY,EAAIC,EAAwB,EAE1CyC,EAA2B,CAC7B,CACI,QACIZ,EAAA,IAACa,EAAA,CACG,eAAgBF,EAAS,mBACzB,SAAU,CAACpD,EAAW,EACtB,SAAWuD,GAAM,CACD5C,EAAA,CACR,QAAS,CACL,GAAGyC,EACH,mBAAoBG,EAAE,cAAc,OAAA,CACxC,CACH,EACDL,EAAe,IAAI,uBAAwBK,EAAE,cAAc,OAAO,EAE9DA,EAAE,cAAc,QAChBL,EAAe,gBAAgB,EAE/BA,EAAe,iBAAiB,CACpC,CACJ,CACJ,EAEJ,YAAa5C,EAAE,6BAA8B,CACzC,QAAS,cACT,YAAa,cAAA,CAChB,EACD,SAAU,CAACN,EAAW,EACtB,MAAOM,EAAE,6BAA8B,CAAE,YAAa,cAAgB,CAAA,CAAA,CAE9E,EAEO,OAAAmC,MAACe,GAAgB,QAAAH,EAAkB,CAC9C,EC5CaI,EAAa,IAElBlB,EAAA,KAACmB,EAAM,CAAA,QAAQ,KACV,SAAA,CAAW1D,WAAMmD,EAAqB,EAAA,QACtC9C,EAAsB,CAAA,CAAA,CAAA,EAC3B"}