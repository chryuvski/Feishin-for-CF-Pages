{"version":3,"file":"use-tag-list-CmDBDSdm.js","sources":["../../../src/renderer/utils/sentence-case.ts","../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/isEmpty.js","../../../src/renderer/components/select-with-invalid-data/index.tsx","../../../src/renderer/features/tag/queries/use-tag-list.ts"],"sourcesContent":["export const sentenceCase = (string: string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n};\n","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLike = require('./isArrayLike'),\n    isBuffer = require('./isBuffer'),\n    isPrototype = require('./_isPrototype'),\n    isTypedArray = require('./isTypedArray');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * _.isEmpty(null);\n * // => true\n *\n * _.isEmpty(true);\n * // => true\n *\n * _.isEmpty(1);\n * // => true\n *\n * _.isEmpty([1, 2, 3]);\n * // => false\n *\n * _.isEmpty({ 'a': 1 });\n * // => false\n */\nfunction isEmpty(value) {\n  if (value == null) {\n    return true;\n  }\n  if (isArrayLike(value) &&\n      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||\n        isBuffer(value) || isTypedArray(value) || isArguments(value))) {\n    return !value.length;\n  }\n  var tag = getTag(value);\n  if (tag == mapTag || tag == setTag) {\n    return !value.size;\n  }\n  if (isPrototype(value)) {\n    return !baseKeys(value).length;\n  }\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = isEmpty;\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { MultiSelect, MultiSelectProps, Select, SelectProps } from '/@/renderer/components/select';\n\nexport const SelectWithInvalidData = ({ data, defaultValue, ...props }: SelectProps) => {\n    const { t } = useTranslation();\n\n    const [fullData, hasError] = useMemo(() => {\n        if (typeof defaultValue === 'string') {\n            const missingField =\n                data.find((item) =>\n                    typeof item === 'string' ? item === defaultValue : item.value === defaultValue,\n                ) === undefined;\n\n            if (missingField) {\n                return [data.concat(defaultValue), true];\n            }\n        }\n\n        return [data, false];\n    }, [data, defaultValue]);\n\n    return (\n        <Select\n            data={fullData}\n            defaultValue={defaultValue}\n            error={\n                hasError\n                    ? t('error.badValue', { postProcess: 'sentenceCase', value: defaultValue })\n                    : undefined\n            }\n            {...props}\n        />\n    );\n};\n\nexport const MultiSelectWithInvalidData = ({ data, defaultValue, ...props }: MultiSelectProps) => {\n    const { t } = useTranslation();\n    const [fullData, missing] = useMemo(() => {\n        if (defaultValue?.length) {\n            const validValues = new Set<string>();\n            for (const item of data) {\n                if (typeof item === 'string') {\n                    validValues.add(item);\n                } else {\n                    validValues.add(item.value);\n                }\n            }\n\n            const missingFields: string[] = [];\n\n            for (const value of defaultValue) {\n                if (!validValues.has(value)) {\n                    missingFields.push(value);\n                }\n            }\n\n            if (missingFields.length > 0) {\n                return [data.concat(missingFields), missingFields];\n            }\n        }\n\n        return [data, []];\n    }, [data, defaultValue]);\n\n    return (\n        <MultiSelect\n            data={fullData}\n            defaultValue={defaultValue}\n            error={\n                missing.length\n                    ? t('error.badValue', { postProcess: 'sentenceCase', value: missing })\n                    : undefined\n            }\n            {...props}\n        />\n    );\n};\n","import { useQuery } from '@tanstack/react-query';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { QueryHookArgs } from '/@/renderer/lib/react-query';\nimport { getServerById } from '/@/renderer/store';\nimport { hasFeature } from '/@/shared/api/utils';\nimport { TagQuery } from '/@/shared/types/domain-types';\nimport { ServerFeature } from '/@/shared/types/features-types';\n\nexport const useTagList = (args: QueryHookArgs<TagQuery>) => {\n    const { options, query, serverId } = args || {};\n    const server = getServerById(serverId);\n\n    return useQuery({\n        enabled: !!server && hasFeature(server, ServerFeature.TAGS),\n        queryFn: ({ signal }) => {\n            if (!server) throw new Error('Server not found');\n            return api.controller.getTags({ apiClientProps: { server, signal }, query });\n        },\n        queryKey: queryKeys.tags.list(server?.id || '', query.type),\n        staleTime: 1000 * 60,\n        ...options,\n    });\n};\n"],"names":["sentenceCase","string","baseKeys","require$$0","getTag","require$$1","isArguments","require$$2","isArray","require$$3","isArrayLike","require$$4","isBuffer","require$$5","isPrototype","require$$6","isTypedArray","require$$7","mapTag","setTag","objectProto","hasOwnProperty","isEmpty","value","tag","key","isEmpty_1","SelectWithInvalidData","data","defaultValue","props","t","useTranslation","fullData","hasError","useMemo","item","jsx","Select","MultiSelectWithInvalidData","missing","validValues","missingFields","MultiSelect","useTagList","args","options","query","serverId","server","getServerById","useQuery","hasFeature","ServerFeature","signal","api","queryKeys"],"mappings":"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","x_google_ignoreList":[1]}