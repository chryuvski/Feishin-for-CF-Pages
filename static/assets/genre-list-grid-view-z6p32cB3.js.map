{"version":3,"file":"genre-list-grid-view-z6p32cB3.js","sources":["../../../src/renderer/features/genres/components/genre-list-grid-view.tsx"],"sourcesContent":["import { QueryKey, useQueryClient } from '@tanstack/react-query';\nimport { useCallback, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport AutoSizer, { Size } from 'react-virtualized-auto-sizer';\nimport { ListOnScrollProps } from 'react-window';\n\nimport { api } from '/@/renderer/api';\nimport { queryKeys } from '/@/renderer/api/query-keys';\nimport { ALBUM_CARD_ROWS } from '/@/renderer/components';\nimport {\n    VirtualGridAutoSizerContainer,\n    VirtualInfiniteGrid,\n} from '/@/renderer/components/virtual-grid';\nimport { useListContext } from '/@/renderer/context/list-context';\nimport { usePlayQueueAdd } from '/@/renderer/features/player';\nimport { useGenreRoute } from '/@/renderer/hooks/use-genre-route';\nimport { useCurrentServer, useListStoreActions, useListStoreByKey } from '/@/renderer/store';\nimport {\n    Album,\n    Genre,\n    GenreListQuery,\n    GenreListResponse,\n    LibraryItem,\n} from '/@/shared/types/domain-types';\nimport { CardRow, ListDisplayType } from '/@/shared/types/types';\n\nexport const GenreListGridView = ({ gridRef, itemCount }: any) => {\n    const queryClient = useQueryClient();\n    const server = useCurrentServer();\n    const handlePlayQueueAdd = usePlayQueueAdd();\n    const { id, pageKey } = useListContext();\n    const { display, filter, grid } = useListStoreByKey<GenreListQuery>({ key: pageKey });\n    const { setGrid } = useListStoreActions();\n    const genrePath = useGenreRoute();\n\n    const [searchParams, setSearchParams] = useSearchParams();\n    const scrollOffset = searchParams.get('scrollOffset');\n    const initialScrollOffset = Number(id ? scrollOffset : grid?.scrollOffset) || 0;\n\n    const cardRows = useMemo(() => {\n        const rows: CardRow<Album>[] = [ALBUM_CARD_ROWS.name];\n        return rows;\n    }, []);\n\n    const handleGridScroll = useCallback(\n        (e: ListOnScrollProps) => {\n            if (id) {\n                setSearchParams(\n                    (params) => {\n                        params.set('scrollOffset', String(e.scrollOffset));\n                        return params;\n                    },\n                    { replace: true },\n                );\n            } else {\n                setGrid({ data: { scrollOffset: e.scrollOffset }, key: pageKey });\n            }\n        },\n        [id, pageKey, setGrid, setSearchParams],\n    );\n\n    const fetchInitialData = useCallback(() => {\n        const query: Omit<GenreListQuery, 'limit' | 'startIndex'> = {\n            ...filter,\n        };\n\n        const queriesFromCache: [QueryKey, GenreListResponse][] = queryClient.getQueriesData({\n            exact: false,\n            fetchStatus: 'idle',\n            queryKey: queryKeys.genres.list(server?.id || '', query),\n            stale: false,\n        });\n\n        const itemData: Genre[] = [];\n\n        for (const [, data] of queriesFromCache) {\n            const { items, startIndex } = data || {};\n\n            if (items && items.length !== 1 && startIndex !== undefined) {\n                let itemIndex = 0;\n                for (\n                    let rowIndex = startIndex;\n                    rowIndex < startIndex + items.length;\n                    rowIndex += 1\n                ) {\n                    itemData[rowIndex] = items[itemIndex];\n                    itemIndex += 1;\n                }\n            }\n        }\n\n        return itemData;\n    }, [filter, queryClient, server?.id]);\n\n    const fetch = useCallback(\n        async ({ skip, take }: { skip: number; take: number }) => {\n            if (!server) {\n                return [];\n            }\n\n            const query: GenreListQuery = {\n                ...filter,\n                limit: take,\n                startIndex: skip,\n            };\n\n            const queryKey = queryKeys.albums.list(server?.id || '', query);\n\n            const albums = await queryClient.fetchQuery({\n                queryFn: async ({ signal }) => {\n                    return api.controller.getGenreList({\n                        apiClientProps: {\n                            server,\n                            signal,\n                        },\n                        query,\n                    });\n                },\n                queryKey,\n            });\n\n            return albums;\n        },\n        [filter, queryClient, server],\n    );\n\n    return (\n        <VirtualGridAutoSizerContainer>\n            <AutoSizer>\n                {({ height, width }: Size) => (\n                    <VirtualInfiniteGrid\n                        cardRows={cardRows}\n                        display={display || ListDisplayType.CARD}\n                        fetchFn={fetch}\n                        fetchInitialData={fetchInitialData}\n                        handlePlayQueueAdd={handlePlayQueueAdd}\n                        height={height}\n                        initialScrollOffset={initialScrollOffset}\n                        itemCount={itemCount || 0}\n                        itemGap={grid?.itemGap ?? 10}\n                        itemSize={grid?.itemSize || 200}\n                        itemType={LibraryItem.GENRE}\n                        key={`album-list-${server?.id}-${display}`}\n                        loading={itemCount === undefined || itemCount === null}\n                        minimumBatchSize={40}\n                        onScroll={handleGridScroll}\n                        ref={gridRef}\n                        route={{\n                            route: genrePath,\n                            slugs: [{ idProperty: 'id', slugProperty: 'genreId' }],\n                        }}\n                        width={width}\n                    />\n                )}\n            </AutoSizer>\n        </VirtualGridAutoSizerContainer>\n    );\n};\n"],"names":["GenreListGridView","gridRef","itemCount","queryClient","useQueryClient","server","useCurrentServer","handlePlayQueueAdd","usePlayQueueAdd","id","pageKey","useListContext","display","filter","grid","useListStoreByKey","setGrid","useListStoreActions","genrePath","useGenreRoute","searchParams","setSearchParams","useSearchParams","scrollOffset","initialScrollOffset","cardRows","useMemo","ALBUM_CARD_ROWS","handleGridScroll","useCallback","e","params","fetchInitialData","query","queriesFromCache","queryKeys","itemData","data","items","startIndex","itemIndex","rowIndex","fetch","skip","take","queryKey","signal","api","jsx","VirtualGridAutoSizerContainer","AutoSizer","height","width","VirtualInfiniteGrid","ListDisplayType","LibraryItem"],"mappings":"sKA0BO,MAAMA,EAAoB,CAAC,CAAE,QAAAC,EAAS,UAAAC,KAAqB,CAC9D,MAAMC,EAAcC,EAAe,EAC7BC,EAASC,EAAiB,EAC1BC,EAAqBC,EAAgB,EACrC,CAAE,GAAAC,EAAI,QAAAC,CAAQ,EAAIC,EAAe,EACjC,CAAE,QAAAC,EAAS,OAAAC,EAAQ,KAAAC,CAAA,EAASC,EAAkC,CAAE,IAAKL,EAAS,EAC9E,CAAE,QAAAM,CAAQ,EAAIC,EAAoB,EAClCC,EAAYC,EAAc,EAE1B,CAACC,EAAcC,CAAe,EAAIC,EAAgB,EAClDC,EAAeH,EAAa,IAAI,cAAc,EAC9CI,EAAsB,OAAOf,EAAKc,EAAeT,GAAA,YAAAA,EAAM,YAAY,GAAK,EAExEW,EAAWC,EAAAA,QAAQ,IACU,CAACC,EAAgB,IAAI,EAErD,EAAE,EAECC,EAAmBC,EAAA,YACpBC,GAAyB,CAClBrB,EACAY,EACKU,IACGA,EAAO,IAAI,eAAgB,OAAOD,EAAE,YAAY,CAAC,EAC1CC,GAEX,CAAE,QAAS,EAAK,CACpB,EAEQf,EAAA,CAAE,KAAM,CAAE,aAAcc,EAAE,YAAa,EAAG,IAAKpB,EAAS,CAExE,EACA,CAACD,EAAIC,EAASM,EAASK,CAAe,CAC1C,EAEMW,EAAmBH,EAAAA,YAAY,IAAM,CACvC,MAAMI,EAAsD,CACxD,GAAGpB,CACP,EAEMqB,EAAoD/B,EAAY,eAAe,CACjF,MAAO,GACP,YAAa,OACb,SAAUgC,EAAU,OAAO,MAAK9B,GAAA,YAAAA,EAAQ,KAAM,GAAI4B,CAAK,EACvD,MAAO,EAAA,CACV,EAEKG,EAAoB,CAAC,EAE3B,SAAW,CAAA,CAAGC,CAAI,IAAKH,EAAkB,CACrC,KAAM,CAAE,MAAAI,EAAO,WAAAC,CAAW,EAAIF,GAAQ,CAAC,EAEvC,GAAIC,GAASA,EAAM,SAAW,GAAKC,IAAe,OAAW,CACzD,IAAIC,EAAY,EAChB,QACQC,EAAWF,EACfE,EAAWF,EAAaD,EAAM,OAC9BG,GAAY,EAEHL,EAAAK,CAAQ,EAAIH,EAAME,CAAS,EACvBA,GAAA,CACjB,CACJ,CAGG,OAAAJ,GACR,CAACvB,EAAQV,EAAaE,GAAA,YAAAA,EAAQ,EAAE,CAAC,EAE9BqC,EAAQb,EAAA,YACV,MAAO,CAAE,KAAAc,EAAM,KAAAC,KAA2C,CACtD,GAAI,CAACvC,EACD,MAAO,CAAC,EAGZ,MAAM4B,EAAwB,CAC1B,GAAGpB,EACH,MAAO+B,EACP,WAAYD,CAChB,EAEME,EAAWV,EAAU,OAAO,MAAK9B,GAAA,YAAAA,EAAQ,KAAM,GAAI4B,CAAK,EAevD,OAbQ,MAAM9B,EAAY,WAAW,CACxC,QAAS,MAAO,CAAE,OAAA2C,KACPC,EAAI,WAAW,aAAa,CAC/B,eAAgB,CACZ,OAAA1C,EACA,OAAAyC,CACJ,EACA,MAAAb,CAAA,CACH,EAEL,SAAAY,CAAA,CACH,CAGL,EACA,CAAChC,EAAQV,EAAaE,CAAM,CAChC,EAGI,OAAA2C,MAACC,GACG,SAACD,EAAAA,IAAAE,EAAA,CACI,UAAC,CAAE,OAAAC,EAAQ,MAAAC,CACR,IAAAJ,EAAA,IAACK,EAAA,CACG,SAAA5B,EACA,QAASb,GAAW0C,EAAgB,KACpC,QAASZ,EACT,iBAAAV,EACA,mBAAAzB,EACA,OAAA4C,EACA,oBAAA3B,EACA,UAAWtB,GAAa,EACxB,SAASY,GAAA,YAAAA,EAAM,UAAW,GAC1B,UAAUA,GAAA,YAAAA,EAAM,WAAY,IAC5B,SAAUyC,EAAY,MAEtB,QAAoCrD,GAAc,KAClD,iBAAkB,GAClB,SAAU0B,EACV,IAAK3B,EACL,MAAO,CACH,MAAOiB,EACP,MAAO,CAAC,CAAE,WAAY,KAAM,aAAc,SAAW,CAAA,CACzD,EACA,MAAAkC,CAAA,EATK,cAAc/C,GAAA,YAAAA,EAAQ,EAAE,IAAIO,CAAO,IAYpD,CACJ,CAAA,CAER"}