{"version":3,"mappings":"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","names":["getAudioDevice","dev","AudioSettings","hasFancyAudio","t","useTranslation","settings","usePlaybackSettings","setSettings","useSettingsStoreActions","status","useCurrentStatus","audioDevices","setAudioDevices","useState","useEffect","getAudioDevices","d","toast","PlaybackType","audioOptions","jsx","Select","isElectron","PlayerStatus","e","queueData","usePlayerStore","setQueue","PlaybackStyle","Switch","Slider","CrossfadeStyle","SettingsSection","localSettings","WorkingButtonSelect","styled","MultiSelect","LyricSettings","useLyricsSettings","lyricOptions","LyricSource","NumberInput","value","languages","TextInput","ScrobbleSettings","scrobbleOptions","TranscodeSettings","transcode","setTranscodingConfig","note","transcodeOptions","MpvSettings","lazy","__vitePreload","n","module","PlaybackTab","audioType","useSettingsStore","state","useWebAudio","useMemo","jsxs","Stack","Suspense","Fragment"],"ignoreList":[],"sources":["../../../src/renderer/features/settings/components/playback/audio-settings.tsx","../../../src/renderer/features/settings/components/playback/lyric-settings.tsx","../../../src/renderer/features/settings/components/playback/scrobble-settings.tsx","../../../src/renderer/features/settings/components/playback/transcode-settings.tsx","../../../src/renderer/features/settings/components/playback/playback-tab.tsx"],"sourcesContent":["import { SelectItem } from '@mantine/core';\nimport isElectron from 'is-electron';\nimport { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Select, Slider, Switch, toast } from '/@/renderer/components';\nimport {\n    SettingOption,\n    SettingsSection,\n} from '/@/renderer/features/settings/components/settings-section';\nimport { useCurrentStatus, usePlayerStore } from '/@/renderer/store';\nimport { usePlaybackSettings, useSettingsStoreActions } from '/@/renderer/store/settings.store';\nimport { setQueue } from '/@/renderer/utils/set-transcoded-queue-data';\nimport { CrossfadeStyle, PlaybackStyle, PlaybackType, PlayerStatus } from '/@/shared/types/types';\n\nconst getAudioDevice = async () => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    return (devices || []).filter((dev: MediaDeviceInfo) => dev.kind === 'audiooutput');\n};\n\nexport const AudioSettings = ({ hasFancyAudio }: { hasFancyAudio: boolean }) => {\n    const { t } = useTranslation();\n    const settings = usePlaybackSettings();\n    const { setSettings } = useSettingsStoreActions();\n    const status = useCurrentStatus();\n\n    const [audioDevices, setAudioDevices] = useState<SelectItem[]>([]);\n\n    useEffect(() => {\n        const getAudioDevices = () => {\n            getAudioDevice()\n                .then((dev) =>\n                    setAudioDevices(dev.map((d) => ({ label: d.label, value: d.deviceId }))),\n                )\n                .catch(() =>\n                    toast.error({\n                        message: t('error.audioDeviceFetchError', { postProcess: 'sentenceCase' }),\n                    }),\n                );\n        };\n\n        if (settings.type === PlaybackType.WEB) {\n            getAudioDevices();\n        }\n    }, [settings.type, t]);\n\n    const audioOptions: SettingOption[] = [\n        {\n            control: (\n                <Select\n                    data={[\n                        {\n                            disabled: !isElectron(),\n                            label: 'MPV',\n                            value: PlaybackType.LOCAL,\n                        },\n                        { label: 'Web', value: PlaybackType.WEB },\n                    ]}\n                    defaultValue={settings.type}\n                    disabled={status === PlayerStatus.PLAYING}\n                    onChange={(e) => {\n                        setSettings({ playback: { ...settings, type: e as PlaybackType } });\n                        if (isElectron() && e === PlaybackType.LOCAL) {\n                            const queueData = usePlayerStore.getState().actions.getPlayerData();\n                            setQueue(queueData);\n                        }\n                    }}\n                />\n            ),\n            description: t('setting.audioPlayer', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            note:\n                status === PlayerStatus.PLAYING\n                    ? t('common.playerMustBePaused', { postProcess: 'sentenceCase' })\n                    : undefined,\n            title: t('setting.audioPlayer', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <Select\n                    clearable\n                    data={audioDevices}\n                    defaultValue={settings.audioDeviceId}\n                    disabled={settings.type !== PlaybackType.WEB}\n                    onChange={(e) => setSettings({ playback: { ...settings, audioDeviceId: e } })}\n                />\n            ),\n            description: t('setting.audioDevice', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron() || settings.type !== PlaybackType.WEB,\n            title: t('setting.audioDevice', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <Select\n                    data={[\n                        {\n                            label: t('setting.playbackStyle', {\n                                context: 'optionNormal',\n                                postProcess: 'titleCase',\n                            }),\n                            value: PlaybackStyle.GAPLESS,\n                        },\n                        {\n                            label: t('setting.playbackStyle', {\n                                context: 'optionCrossFade',\n                                postProcess: 'titleCase',\n                            }),\n                            value: PlaybackStyle.CROSSFADE,\n                        },\n                    ]}\n                    defaultValue={settings.style}\n                    disabled={settings.type !== PlaybackType.WEB || status === PlayerStatus.PLAYING}\n                    onChange={(e) =>\n                        setSettings({ playback: { ...settings, style: e as PlaybackStyle } })\n                    }\n                />\n            ),\n            description: t('setting.playbackStyle', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: settings.type !== PlaybackType.WEB,\n            note: status === PlayerStatus.PLAYING ? 'Player must be paused' : undefined,\n            title: t('setting.playbackStyle', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n        },\n        {\n            control: (\n                <Switch\n                    defaultChecked={settings.webAudio}\n                    onChange={(e) => {\n                        setSettings({\n                            playback: { ...settings, webAudio: e.currentTarget.checked },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.webAudio', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: settings.type !== PlaybackType.WEB,\n            note: t('common.restartRequired', { postProcess: 'sentenceCase' }),\n            title: t('setting.webAudio', {\n                postProcess: 'sentenceCase',\n            }),\n        },\n        {\n            control: (\n                <Slider\n                    defaultValue={settings.crossfadeDuration}\n                    disabled={\n                        settings.type !== PlaybackType.WEB ||\n                        settings.style !== PlaybackStyle.CROSSFADE ||\n                        status === PlayerStatus.PLAYING\n                    }\n                    max={15}\n                    min={0}\n                    onChangeEnd={(e) =>\n                        setSettings({ playback: { ...settings, crossfadeDuration: e } })\n                    }\n                    w={100}\n                />\n            ),\n            description: t('setting.crossfadeDuration', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: settings.type !== PlaybackType.WEB,\n            note: status === PlayerStatus.PLAYING ? 'Player must be paused' : undefined,\n            title: t('setting.crossfadeDuration', {\n                postProcess: 'sentenceCase',\n            }),\n        },\n        {\n            control: (\n                <Select\n                    data={[\n                        { label: 'Linear', value: CrossfadeStyle.LINEAR },\n                        { label: 'Constant Power', value: CrossfadeStyle.CONSTANT_POWER },\n                        {\n                            label: 'Constant Power (Slow cut)',\n                            value: CrossfadeStyle.CONSTANT_POWER_SLOW_CUT,\n                        },\n                        {\n                            label: 'Constant Power (Slow fade)',\n                            value: CrossfadeStyle.CONSTANT_POWER_SLOW_FADE,\n                        },\n                        { label: 'Dipped', value: CrossfadeStyle.DIPPED },\n                        { label: 'Equal Power', value: CrossfadeStyle.EQUALPOWER },\n                    ]}\n                    defaultValue={settings.crossfadeStyle}\n                    disabled={\n                        settings.type !== PlaybackType.WEB ||\n                        settings.style !== PlaybackStyle.CROSSFADE ||\n                        status === PlayerStatus.PLAYING\n                    }\n                    onChange={(e) => {\n                        if (!e) return;\n                        setSettings({\n                            playback: { ...settings, crossfadeStyle: e as CrossfadeStyle },\n                        });\n                    }}\n                    width={200}\n                />\n            ),\n            description: t('setting.crossfadeStyle', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: settings.type !== PlaybackType.WEB,\n            note: status === PlayerStatus.PLAYING ? 'Player must be paused' : undefined,\n            title: t('setting.crossfadeStyle', { postProcess: 'sentenceCase' }),\n        },\n    ];\n\n    return (\n        <SettingsSection\n            divider={!hasFancyAudio}\n            options={audioOptions}\n        />\n    );\n};\n","import isElectron from 'is-electron';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\n\nimport { languages } from '/@/i18n/i18n';\nimport {\n    MultiSelect,\n    MultiSelectProps,\n    NumberInput,\n    Select,\n    Switch,\n    TextInput,\n} from '/@/renderer/components';\nimport {\n    SettingOption,\n    SettingsSection,\n} from '/@/renderer/features/settings/components/settings-section';\nimport { useLyricsSettings, useSettingsStoreActions } from '/@/renderer/store';\nimport { LyricSource } from '/@/shared/types/domain-types';\n\nconst localSettings = isElectron() ? window.api.localSettings : null;\n\nconst WorkingButtonSelect = styled(MultiSelect)<MultiSelectProps>`\n    & button {\n        padding: 0;\n    }\n`;\n\nexport const LyricSettings = () => {\n    const { t } = useTranslation();\n    const settings = useLyricsSettings();\n    const { setSettings } = useSettingsStoreActions();\n\n    const lyricOptions: SettingOption[] = [\n        {\n            control: (\n                <Switch\n                    aria-label=\"Follow lyrics\"\n                    defaultChecked={settings.follow}\n                    onChange={(e) => {\n                        setSettings({\n                            lyrics: {\n                                ...settings,\n                                follow: e.currentTarget.checked,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.followLyric', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            title: t('setting.followLyric', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <Switch\n                    aria-label=\"Enable fetching lyrics\"\n                    defaultChecked={settings.fetch}\n                    onChange={(e) => {\n                        setSettings({\n                            lyrics: {\n                                ...settings,\n                                fetch: e.currentTarget.checked,\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.lyricFetch', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.lyricFetch', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <WorkingButtonSelect\n                    aria-label=\"Lyric providers\"\n                    clearable\n                    data={Object.values(LyricSource)}\n                    defaultValue={settings.sources}\n                    onChange={(e: LyricSource[]) => {\n                        localSettings?.set('lyrics', e);\n                        setSettings({\n                            lyrics: {\n                                ...settings,\n                                sources: e,\n                            },\n                        });\n                    }}\n                    width={300}\n                />\n            ),\n            description: t('setting.lyricFetchProvider', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.lyricFetchProvider', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <NumberInput\n                    defaultValue={settings.delayMs}\n                    onBlur={(e) => {\n                        const value = Number(e.currentTarget.value);\n                        setSettings({\n                            lyrics: {\n                                ...settings,\n                                delayMs: value,\n                            },\n                        });\n                    }}\n                    step={10}\n                    width={100}\n                />\n            ),\n            description: t('setting.lyricOffset', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.lyricOffset', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <Select\n                    data={languages}\n                    onChange={(value) => {\n                        setSettings({ lyrics: { ...settings, translationTargetLanguage: value } });\n                    }}\n                    value={settings.translationTargetLanguage}\n                />\n            ),\n            description: t('setting.translationTargetLanguage', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.translationTargetLanguage', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <Select\n                    data={['Microsoft Azure', 'Google Cloud']}\n                    onChange={(value) => {\n                        setSettings({ lyrics: { ...settings, translationApiProvider: value } });\n                    }}\n                    value={settings.translationApiProvider}\n                />\n            ),\n            description: t('setting.translationApiProvider', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.translationApiProvider', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <TextInput\n                    onChange={(e) => {\n                        setSettings({\n                            lyrics: { ...settings, translationApiKey: e.currentTarget.value },\n                        });\n                    }}\n                    value={settings.translationApiKey}\n                />\n            ),\n            description: t('setting.translationApiKey', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !isElectron(),\n            title: t('setting.translationApiKey', { postProcess: 'sentenceCase' }),\n        },\n    ];\n\n    return (\n        <SettingsSection\n            divider={false}\n            options={lyricOptions}\n        />\n    );\n};\n","import { useTranslation } from 'react-i18next';\n\nimport { NumberInput, Slider, Switch } from '/@/renderer/components';\nimport {\n    SettingOption,\n    SettingsSection,\n} from '/@/renderer/features/settings/components/settings-section';\nimport { usePlaybackSettings, useSettingsStoreActions } from '/@/renderer/store/settings.store';\n\nexport const ScrobbleSettings = () => {\n    const { t } = useTranslation();\n    const settings = usePlaybackSettings();\n    const { setSettings } = useSettingsStoreActions();\n\n    const scrobbleOptions: SettingOption[] = [\n        {\n            control: (\n                <Switch\n                    aria-label=\"Toggle scrobble\"\n                    defaultChecked={settings.scrobble.enabled}\n                    onChange={(e) => {\n                        setSettings({\n                            playback: {\n                                ...settings,\n                                scrobble: {\n                                    ...settings.scrobble,\n                                    enabled: e.currentTarget.checked,\n                                },\n                            },\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.scrobble', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            title: t('setting.scrobble', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <Slider\n                    aria-label=\"Scrobble percentage\"\n                    defaultValue={settings.scrobble.scrobbleAtPercentage}\n                    label={`${settings.scrobble.scrobbleAtPercentage}%`}\n                    max={90}\n                    min={25}\n                    onChange={(e) => {\n                        setSettings({\n                            playback: {\n                                ...settings,\n                                scrobble: {\n                                    ...settings.scrobble,\n                                    scrobbleAtPercentage: e,\n                                },\n                            },\n                        });\n                    }}\n                    w={100}\n                />\n            ),\n            description: t('setting.minimumScrobblePercentage', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            title: t('setting.minimumScrobblePercentage', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <NumberInput\n                    aria-label=\"Scrobble duration in seconds\"\n                    defaultValue={settings.scrobble.scrobbleAtDuration}\n                    max={1200}\n                    min={0}\n                    onChange={(e) => {\n                        if (e === '') return;\n                        setSettings({\n                            playback: {\n                                ...settings,\n                                scrobble: {\n                                    ...settings.scrobble,\n                                    scrobbleAtDuration: e,\n                                },\n                            },\n                        });\n                    }}\n                    width={75}\n                />\n            ),\n            description: t('setting.minimumScrobbleSeconds', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            title: t('setting.minimumScrobbleSeconds', { postProcess: 'sentenceCase' }),\n        },\n    ];\n\n    return <SettingsSection options={scrobbleOptions} />;\n};\n","import { useTranslation } from 'react-i18next';\n\nimport { NumberInput, Switch, TextInput } from '/@/renderer/components';\nimport {\n    SettingOption,\n    SettingsSection,\n} from '/@/renderer/features/settings/components/settings-section';\nimport { usePlaybackSettings, useSettingsStoreActions } from '/@/renderer/store/settings.store';\n\nexport const TranscodeSettings = () => {\n    const { t } = useTranslation();\n    const { transcode } = usePlaybackSettings();\n    const { setTranscodingConfig } = useSettingsStoreActions();\n    const note = t('setting.transcodeNote', { postProcess: 'sentenceCase' });\n\n    const transcodeOptions: SettingOption[] = [\n        {\n            control: (\n                <Switch\n                    aria-label=\"Toggle transcode\"\n                    defaultChecked={transcode.enabled}\n                    onChange={(e) => {\n                        setTranscodingConfig({\n                            ...transcode,\n                            enabled: e.currentTarget.checked,\n                        });\n                    }}\n                />\n            ),\n            description: t('setting.transcode', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            note,\n            title: t('setting.transcode', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <NumberInput\n                    aria-label=\"Transcode bitrate\"\n                    defaultValue={transcode.bitrate}\n                    min={0}\n                    onBlur={(e) => {\n                        setTranscodingConfig({\n                            ...transcode,\n                            bitrate: e.currentTarget.value\n                                ? Number(e.currentTarget.value)\n                                : undefined,\n                        });\n                    }}\n                    w={100}\n                />\n            ),\n            description: t('setting.transcodeBitrate', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !transcode.enabled,\n            note,\n            title: t('setting.transcodeBitrate', { postProcess: 'sentenceCase' }),\n        },\n        {\n            control: (\n                <TextInput\n                    aria-label=\"transcoding format\"\n                    defaultValue={transcode.format}\n                    onBlur={(e) => {\n                        setTranscodingConfig({\n                            ...transcode,\n                            format: e.currentTarget.value || undefined,\n                        });\n                    }}\n                    placeholder=\"mp3, opus\"\n                    width={100}\n                />\n            ),\n            description: t('setting.transcodeFormat', {\n                context: 'description',\n                postProcess: 'sentenceCase',\n            }),\n            isHidden: !transcode.enabled,\n            note,\n            title: t('setting.transcodeFormat', { postProcess: 'sentenceCase' }),\n        },\n    ];\n\n    return (\n        <SettingsSection\n            divider\n            options={transcodeOptions}\n        />\n    );\n};\n","import { Stack } from '@mantine/core';\nimport isElectron from 'is-electron';\nimport { lazy, Suspense, useMemo } from 'react';\n\nimport { AudioSettings } from '/@/renderer/features/settings/components/playback/audio-settings';\nimport { LyricSettings } from '/@/renderer/features/settings/components/playback/lyric-settings';\nimport { ScrobbleSettings } from '/@/renderer/features/settings/components/playback/scrobble-settings';\nimport { TranscodeSettings } from '/@/renderer/features/settings/components/playback/transcode-settings';\nimport { useSettingsStore } from '/@/renderer/store';\nimport { PlaybackType } from '/@/shared/types/types';\n\nconst MpvSettings = lazy(() =>\n    import('/@/renderer/features/settings/components/playback/mpv-settings').then((module) => {\n        return { default: module.MpvSettings };\n    }),\n);\n\nexport const PlaybackTab = () => {\n    const audioType = useSettingsStore((state) => state.playback.type);\n    const useWebAudio = useSettingsStore((state) => state.playback.webAudio);\n\n    const hasFancyAudio = useMemo(() => {\n        return (\n            (isElectron() && audioType === PlaybackType.LOCAL) ||\n            (useWebAudio && 'AudioContext' in window)\n        );\n    }, [audioType, useWebAudio]);\n\n    return (\n        <Stack spacing=\"md\">\n            <AudioSettings hasFancyAudio={hasFancyAudio} />\n            <Suspense fallback={<></>}>{hasFancyAudio && <MpvSettings />}</Suspense>\n            <TranscodeSettings />\n            <ScrobbleSettings />\n            <LyricSettings />\n        </Stack>\n    );\n};\n"],"file":"assets/playback-tab-ZpuDHVIw.js"}